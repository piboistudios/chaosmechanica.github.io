// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_General
#include <General.h>
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_cdb_Index
#include <cdb/Index.h>
#endif
#ifndef INCLUDED_cdb_IndexId
#include <cdb/IndexId.h>
#endif
#ifndef INCLUDED_dat_Data
#include <dat/Data.h>
#endif
#ifndef INCLUDED_dat__Data_CarrierUnits_Impl_
#include <dat/_Data/CarrierUnits_Impl_.h>
#endif
#ifndef INCLUDED_dat__Data_CatData_Impl_
#include <dat/_Data/CatData_Impl_.h>
#endif
#ifndef INCLUDED_dat__Data_Part_Impl_
#include <dat/_Data/Part_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_PartFactory
#include <util/PartFactory.h>
#endif
#ifndef INCLUDED_util_mechanica_ArmUnits
#include <util/mechanica/ArmUnits.h>
#endif
#ifndef INCLUDED_util_mechanica_CarrierUnit
#include <util/mechanica/CarrierUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_CoreUnit
#include <util/mechanica/CoreUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_EquipmentUnit
#include <util/mechanica/EquipmentUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_FirearmUnit
#include <util/mechanica/FirearmUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_HeadUnit
#include <util/mechanica/HeadUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_LegUnits
#include <util/mechanica/LegUnits.h>
#endif
#ifndef INCLUDED_util_mechanica_Mechanica
#include <util/mechanica/Mechanica.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif
#ifndef INCLUDED_util_mechanica_ThrusterUnit
#include <util/mechanica/ThrusterUnit.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e7a8d5a794575a0e_11_partExists,"util.PartFactory","partExists",0x3a3bc732,"util.PartFactory.partExists","util/PartFactory.hx",11,0x7a6318d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e7a8d5a794575a0e_21_buildPart,"util.PartFactory","buildPart",0x24fe129e,"util.PartFactory.buildPart","util/PartFactory.hx",21,0x7a6318d4)
static const int _hx_array_data_12f7b28b_2[] = {
	(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)0,(int)1,
};
static const int _hx_array_data_12f7b28b_3[] = {
	(int)0,(int)1,(int)2,(int)3,
};
namespace util{

void PartFactory_obj::__construct() { }

Dynamic PartFactory_obj::__CreateEmpty() { return new PartFactory_obj; }

void *PartFactory_obj::_hx_vtable = 0;

Dynamic PartFactory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PartFactory_obj > _hx_result = new PartFactory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PartFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7bcf40f5;
}

bool PartFactory_obj::partExists(::String part){
            	HX_STACKFRAME(&_hx_pos_e7a8d5a794575a0e_11_partExists)
HXLINE(  12)		 ::Dynamic partObj = ::dat::Data_obj::part->resolve(part,null());
HXLINE(  13)		::Array< ::Dynamic> partsList = ::dat::Data_obj::part->all->copy();
HXLINE(  14)		if ((::General_obj::findInList_dat_Part(partObj,partsList) > (int)-1)) {
HXLINE(  16)			return true;
            		}
HXLINE(  18)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PartFactory_obj,partExists,return )

 ::util::mechanica::Part PartFactory_obj::buildPart(::String part){
            	HX_GC_STACKFRAME(&_hx_pos_e7a8d5a794575a0e_21_buildPart)
HXLINE(  22)		if (!(::util::PartFactory_obj::partExists(part))) {
HXLINE(  24)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp = ::flixel::FlxG_obj::log;
HXDLIN(  24)			_hx_tmp->advanced((part + HX_(" doesn't exist!",c8,8e,40,5e)),::Global_obj::logStyle,null());
HXLINE(  26)			return null();
            		}
HXLINE(  28)		 ::Dynamic partDat = ::dat::Data_obj::part->resolve(part,null());
HXLINE(  29)		 ::Dynamic catData = ::dat::_Data::Part_Impl__obj::get_categoricalData(partDat);
HXLINE(  30)		 ::util::mechanica::Part partObj;
HXLINE(  32)		::flixel::FlxG_obj::log->advanced(HX_("Fetching categorical part data...",2f,4f,c5,de),::Global_obj::logStyle,null());
HXLINE(  34)		{
HXLINE(  34)			int _g = ( (int)(catData->__Field(HX_("partType",4d,78,c0,5e),hx::paccDynamic)) );
HXDLIN(  34)			switch((int)(_g)){
            				case (int)0: {
HXLINE(  38)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::log;
HXDLIN(  38)					_hx_tmp1->advanced((HX_("Building head: ",d2,d7,ee,c6) + part),::Global_obj::logStyle,null());
HXLINE(  39)					partObj =  ::util::mechanica::HeadUnit_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  40)					 ::util::mechanica::HeadUnit catPartObj = hx::TCast<  ::util::mechanica::HeadUnit >::cast(partObj);
HXLINE(  41)					 ::Dynamic catPartData = ::dat::_Data::CatData_Impl__obj::get_headDataObj(catData);
HXLINE(  42)					catPartObj->lockSpeed = ( (Float)(catPartData->__Field(HX_("lockSpeed",9c,57,4b,bc),hx::paccDynamic)) );
HXLINE(  43)					catPartObj->scanRange = ( (Float)(catPartData->__Field(HX_("scanRange",00,13,25,15),hx::paccDynamic)) );
            				}
            				break;
            				case (int)1: {
HXLINE(  47)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::log;
HXDLIN(  47)					_hx_tmp2->advanced((HX_("Building core: ",d1,39,65,94) + part),::Global_obj::logStyle,null());
HXLINE(  48)					partObj =  ::util::mechanica::CoreUnit_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  49)					 ::util::mechanica::CoreUnit catPartObj1 = hx::TCast<  ::util::mechanica::CoreUnit >::cast(partObj);
HXLINE(  50)					 ::Dynamic catPartData1 = ::dat::_Data::CatData_Impl__obj::get_coreDataObj(catData);
HXLINE(  51)					catPartObj1->coolingRate = ( (Float)(catPartData1->__Field(HX_("coolingRate",39,c5,94,5c),hx::paccDynamic)) );
HXLINE(  52)					catPartObj1->regenRate = ( (Float)(catPartData1->__Field(HX_("regenRate",3d,50,27,2a),hx::paccDynamic)) );
            				}
            				break;
            				case (int)2: {
HXLINE(  69)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::log;
HXDLIN(  69)					_hx_tmp3->advanced((HX_("Building legs: ",d7,f2,5e,64) + part),::Global_obj::logStyle,null());
HXLINE(  70)					partObj =  ::util::mechanica::LegUnits_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  71)					 ::util::mechanica::LegUnits catPartObj2 = hx::TCast<  ::util::mechanica::LegUnits >::cast(partObj);
HXLINE(  72)					 ::Dynamic catPartData2 = ::dat::_Data::CatData_Impl__obj::get_carrierDataObj(catData);
HXLINE(  73)					catPartObj2->stability = ( (Float)(catPartData2->__Field(HX_("stability",29,43,af,5a),hx::paccDynamic)) );
HXLINE(  74)					catPartObj2->weightCapacity = ( (Float)(catPartData2->__Field(HX_("weightCapacity",d2,66,95,25),hx::paccDynamic)) );
HXLINE(  75)					catPartObj2->topSpeed = ( (Float)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(catPartData2)->__Field(HX_("topSpeed",b2,a4,39,cf),hx::paccDynamic)) );
HXLINE(  76)					catPartObj2->_acceleration = ( (Float)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(catPartData2)->__Field(HX_("acceleration",40,00,61,9a),hx::paccDynamic)) );
HXLINE(  77)					catPartObj2->turningSpeed = ( (Float)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(catPartData2)->__Field(HX_("turningSpeed",c2,37,8c,8c),hx::paccDynamic)) );
HXLINE(  78)					catPartObj2->brakingForce = ( (Float)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(catPartData2)->__Field(HX_("brakingForce",63,2a,e0,af),hx::paccDynamic)) );
HXLINE(  79)					catPartObj2->frameRate = ( (int)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(catPartData2)->__Field(HX_("frameRate",ad,11,25,39),hx::paccDynamic)) );
HXLINE(  80)					catPartObj2->animated = ( (bool)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(catPartData2)->__Field(HX_("animated",a3,72,f2,88),hx::paccDynamic)) );
            				}
            				break;
            				case (int)3: {
HXLINE(  57)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::log;
HXDLIN(  57)					_hx_tmp4->advanced((HX_("Building arms: ",09,cd,9e,7e) + part),::Global_obj::logStyle,null());
HXLINE(  58)					partObj =  ::util::mechanica::ArmUnits_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  59)					 ::util::mechanica::CarrierUnit catPartObj3 = hx::TCast<  ::util::mechanica::CarrierUnit >::cast(partObj);
HXLINE(  60)					 ::Dynamic catPartData3 = ::dat::_Data::CatData_Impl__obj::get_carrierDataObj(catData);
HXLINE(  61)					catPartObj3->stability = ( (Float)(catPartData3->__Field(HX_("stability",29,43,af,5a),hx::paccDynamic)) );
HXLINE(  62)					catPartObj3->weightCapacity = ( (Float)(catPartData3->__Field(HX_("weightCapacity",d2,66,95,25),hx::paccDynamic)) );
HXLINE(  63)					catPartObj3->performanceWeightCapacity = ( (Float)(catPartData3->__Field(HX_("performanceWeightCapacity",e2,4c,24,59),hx::paccDynamic)) );
            				}
            				break;
            				case (int)4: {
HXLINE(  84)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::log;
HXDLIN(  84)					_hx_tmp5->advanced((HX_("Building thruster: ",f7,04,7e,5d) + part),::Global_obj::logStyle,null());
HXLINE(  85)					partObj =  ::util::mechanica::ThrusterUnit_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  86)					 ::util::mechanica::ThrusterUnit catPartObj4 = hx::TCast<  ::util::mechanica::ThrusterUnit >::cast(partObj);
HXLINE(  87)					 ::Dynamic catPartData4 = ::dat::_Data::CatData_Impl__obj::get_thrusterDataObj(catData);
HXLINE(  88)					catPartObj4->topSpeed = ( (Float)(catPartData4->__Field(HX_("topSpeed",b2,a4,39,cf),hx::paccDynamic)) );
HXLINE(  89)					catPartObj4->_acceleration = ( (Float)(catPartData4->__Field(HX_("acceleration",40,00,61,9a),hx::paccDynamic)) );
HXLINE(  90)					catPartObj4->driveEnUsage = ( (Float)(catPartData4->__Field(HX_("driveEnUsage",0e,ac,72,2a),hx::paccDynamic)) );
HXLINE(  91)					catPartObj4->ignitionEnUsage = ( (Float)(catPartData4->__Field(HX_("ignitionEnUsage",8b,c9,bf,1a),hx::paccDynamic)) );
            				}
            				break;
            				case (int)5: {
HXLINE(  96)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::log;
HXDLIN(  96)					_hx_tmp6->advanced((HX_("Building equipment: ",e8,76,1a,25) + part),::Global_obj::logStyle,null());
HXLINE(  98)					partObj =  ::util::mechanica::FirearmUnit_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  99)					 ::util::mechanica::FirearmUnit catPartObj5 = hx::TCast<  ::util::mechanica::FirearmUnit >::cast(partObj);
HXLINE( 100)					 ::Dynamic catPartData5 = ::dat::_Data::CatData_Impl__obj::get_equipDataObj(catData);
HXLINE( 101)					catPartObj5->recoil = ( (Float)(catPartData5->__Field(HX_("recoil",c2,6e,ec,fd),hx::paccDynamic)) );
HXLINE( 102)					catPartObj5->bulletLifespan = ( (Float)(catPartData5->__Field(HX_("bulletLifespan",28,7a,2f,3a),hx::paccDynamic)) );
HXLINE( 103)					catPartObj5->bulletSpeed = ( (Float)(catPartData5->__Field(HX_("bulletSpeed",e5,05,43,34),hx::paccDynamic)) );
HXLINE( 104)					catPartObj5->bulletType = ( (::String)(catPartData5->__Field(HX_("bulletType",1c,fa,95,15),hx::paccDynamic)) );
HXLINE( 105)					catPartObj5->twoHanded = ( (bool)(catPartData5->__Field(HX_("twoHanded",3a,10,37,20),hx::paccDynamic)) );
HXLINE( 106)					catPartObj5->firingRate = ( (Float)(catPartData5->__Field(HX_("firingRate",f3,4a,79,29),hx::paccDynamic)) );
            				}
            				break;
            				default:{
HXLINE( 110)					return null();
            				}
            			}
            		}
HXLINE( 112)		::flixel::FlxG_obj::log->advanced(HX_("Fetching common part data...",d4,3b,72,c9),::Global_obj::logStyle,null());
HXLINE( 113)		partObj->weight = ( (Float)(partDat->__Field(HX_("weight",78,71,a6,01),hx::paccDynamic)) );
HXLINE( 114)		::flixel::FlxG_obj::log->advanced(HX_("Reading make...",cc,b1,61,80),::Global_obj::logStyle,null());
HXLINE( 115)		partObj->make = ::util::mechanica::Mechanica_obj::makeToString(( (int)(partDat->__Field(HX_("make",ee,39,56,48),hx::paccDynamic)) ));
HXLINE( 116)		::flixel::FlxG_obj::log->advanced(HX_("Reading desc...",49,2d,70,3d),::Global_obj::logStyle,null());
HXLINE( 117)		partObj->desc = ( (::String)(partDat->__Field(HX_("desc",51,5e,66,42),hx::paccDynamic)) );
HXLINE( 118)		::flixel::FlxG_obj::log->advanced(HX_("Reading number...",d1,7a,82,e4),::Global_obj::logStyle,null());
HXLINE( 119)		partObj->number = ( (::String)(partDat->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) );
HXLINE( 120)		::flixel::FlxG_obj::log->advanced(HX_("Reading enUsage...",6a,ff,27,22),::Global_obj::logStyle,null());
HXLINE( 121)		partObj->enUsage = ( (Float)(partDat->__Field(HX_("enUsage",f8,57,96,a0),hx::paccDynamic)) );
HXLINE( 122)		::flixel::FlxG_obj::log->advanced(HX_("Reading tempCutoff...",39,fd,3c,17),::Global_obj::logStyle,null());
HXLINE( 123)		partObj->tempCutoff = ( (Float)(partDat->__Field(HX_("tempCutoff",61,a9,a7,5b),hx::paccDynamic)) );
HXLINE( 124)		::flixel::FlxG_obj::log->advanced(HX_("Reading armorRating...",e6,bb,f6,d0),::Global_obj::logStyle,null());
HXLINE( 125)		partObj->armorRating = ( (Float)(partDat->__Field(HX_("armorRating",fc,bf,c6,87),hx::paccDynamic)) );
HXLINE( 126)		if ((( (::String)(partDat->__Field(HX_("imageFile",77,63,f0,25),hx::paccDynamic)) ) != HX_("",00,00,00,00))) {
HXLINE( 128)			::String assetPath = HX_("assets/images/",ab,47,cb,9f);
HXLINE( 129)			partObj->imageFile = (assetPath + ( (::String)(partDat->__Field(HX_("imageFile",77,63,f0,25),hx::paccDynamic)) ));
HXLINE( 130)			partObj->loadGraphic(partObj->imageFile,true,(int)32,(int)32,null(),null());
HXLINE( 132)			bool _hx_tmp7;
HXDLIN( 132)			if ((( (int)(catData->__Field(HX_("partType",4d,78,c0,5e),hx::paccDynamic)) ) == (int)2)) {
HXLINE( 132)				_hx_tmp7 = ( (bool)(::dat::_Data::CarrierUnits_Impl__obj::get_legRef(::dat::_Data::CatData_Impl__obj::get_carrierDataObj(catData))->__Field(HX_("animated",a3,72,f2,88),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 132)				_hx_tmp7 = false;
            			}
HXDLIN( 132)			if (_hx_tmp7) {
HXLINE( 134)				 ::flixel::animation::FlxAnimationController partObj1 = partObj->animation;
HXDLIN( 134)				partObj1->add(HX_("locomote",c2,a0,46,f0),::Array_obj< int >::fromData( _hx_array_data_12f7b28b_2,8),hx::TCast<  ::util::mechanica::LegUnits >::cast(partObj)->frameRate,false,null(),null());
            			}
            			else {
HXLINE( 137)				if ((( (int)(catData->__Field(HX_("partType",4d,78,c0,5e),hx::paccDynamic)) ) == (int)4)) {
HXLINE( 139)					 ::util::mechanica::ThrusterUnit partAsThruster = hx::TCast<  ::util::mechanica::ThrusterUnit >::cast(partObj);
HXLINE( 140)					 ::flixel::addons::display::FlxNestedSprite flare =  ::flixel::addons::display::FlxNestedSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 141)					int _hx_tmp8 = ( (int)(::dat::_Data::CatData_Impl__obj::get_thrusterDataObj(catData)->__Field(HX_("flareSize",af,80,6e,e2),hx::paccDynamic)) );
HXDLIN( 141)					flare->loadGraphic(HX_("assets/images/standard-rev1/flaret.png",bd,d2,39,09),true,_hx_tmp8,::dat::_Data::CatData_Impl__obj::get_thrusterDataObj(catData)->__Field(HX_("flareSize",af,80,6e,e2),hx::paccDynamic),null(),null());
HXLINE( 142)					flare->relativeX = (flare->relativeY = ((Float)(( (int)(::dat::_Data::CatData_Impl__obj::get_thrusterDataObj(catData)->__Field(HX_("flareSize",af,80,6e,e2),hx::paccDynamic)) ) - (int)32) / (Float)(int)-2));
HXLINE( 144)					flare->animation->add(HX_("engage",a1,2f,7e,fc),::Array_obj< int >::fromData( _hx_array_data_12f7b28b_3,4),(int)10,true,null(),null());
HXLINE( 147)					partAsThruster->add(flare);
HXLINE( 148)					flare->set_visible(false);
HXLINE( 149)					partAsThruster->flareSprite = flare;
            				}
            			}
            		}
HXLINE( 152)		return partObj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PartFactory_obj,buildPart,return )


PartFactory_obj::PartFactory_obj()
{
}

bool PartFactory_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"buildPart") ) { outValue = buildPart_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"partExists") ) { outValue = partExists_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PartFactory_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PartFactory_obj_sStaticStorageInfo = 0;
#endif

static void PartFactory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PartFactory_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PartFactory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PartFactory_obj::__mClass,"__mClass");
};

#endif

hx::Class PartFactory_obj::__mClass;

static ::String PartFactory_obj_sStaticFields[] = {
	HX_HCSTRING("partExists","\x2f","\x6e","\xb2","\x52"),
	HX_HCSTRING("buildPart","\x41","\x1a","\x8e","\xea"),
	::String(null())
};

void PartFactory_obj::__register()
{
	hx::Object *dummy = new PartFactory_obj;
	PartFactory_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.PartFactory","\x8b","\xb2","\xf7","\x12");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PartFactory_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PartFactory_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PartFactory_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PartFactory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PartFactory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PartFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PartFactory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
