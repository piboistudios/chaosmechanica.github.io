// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_mechanica_HeadUnit
#include <util/mechanica/HeadUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4308861f2ab98520_58_new,"util.mechanica.HeadUnit","new",0x7ca05173,"util.mechanica.HeadUnit.new","util/mechanica/Part.hx",58,0x51e4a40c)
namespace util{
namespace mechanica{

void HeadUnit_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_4308861f2ab98520_58_new)
HXLINE(  59)		super::__construct(X,Y);
HXLINE(  60)		this->type = HX_("head",20,29,0b,45);
            	}

Dynamic HeadUnit_obj::__CreateEmpty() { return new HeadUnit_obj; }

void *HeadUnit_obj::_hx_vtable = 0;

Dynamic HeadUnit_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HeadUnit_obj > _hx_result = new HeadUnit_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool HeadUnit_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		if (inClassId<=(int)0x633a463f) {
			return inClassId==(int)0x4ae160ee || inClassId==(int)0x633a463f;
		} else {
			return inClassId==(int)0x6706dc1b;
		}
	}
}


hx::ObjectPtr< HeadUnit_obj > HeadUnit_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< HeadUnit_obj > __this = new HeadUnit_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< HeadUnit_obj > HeadUnit_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	HeadUnit_obj *__this = (HeadUnit_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HeadUnit_obj), true, "util.mechanica.HeadUnit"));
	*(void **)__this = HeadUnit_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

HeadUnit_obj::HeadUnit_obj()
{
}

hx::Val HeadUnit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"scanRange") ) { return hx::Val( scanRange ); }
		if (HX_FIELD_EQ(inName,"lockSpeed") ) { return hx::Val( lockSpeed ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HeadUnit_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"scanRange") ) { scanRange=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockSpeed") ) { lockSpeed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HeadUnit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("scanRange","\x00","\x13","\x25","\x15"));
	outFields->push(HX_HCSTRING("lockSpeed","\x9c","\x57","\x4b","\xbc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HeadUnit_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(HeadUnit_obj,scanRange),HX_HCSTRING("scanRange","\x00","\x13","\x25","\x15")},
	{hx::fsFloat,(int)offsetof(HeadUnit_obj,lockSpeed),HX_HCSTRING("lockSpeed","\x9c","\x57","\x4b","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HeadUnit_obj_sStaticStorageInfo = 0;
#endif

static ::String HeadUnit_obj_sMemberFields[] = {
	HX_HCSTRING("scanRange","\x00","\x13","\x25","\x15"),
	HX_HCSTRING("lockSpeed","\x9c","\x57","\x4b","\xbc"),
	::String(null()) };

static void HeadUnit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HeadUnit_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HeadUnit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HeadUnit_obj::__mClass,"__mClass");
};

#endif

hx::Class HeadUnit_obj::__mClass;

void HeadUnit_obj::__register()
{
	hx::Object *dummy = new HeadUnit_obj;
	HeadUnit_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.mechanica.HeadUnit","\x01","\x1c","\x40","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HeadUnit_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HeadUnit_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HeadUnit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HeadUnit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HeadUnit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HeadUnit_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace mechanica
