// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxBullet
#include <flixel/addons/weapon/FlxBullet.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Watch
#include <flixel/system/debug/watch/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntryData
#include <flixel/system/debug/watch/WatchEntryData.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_math_MoreMath
#include <math/MoreMath.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_util_PartFactory
#include <util/PartFactory.h>
#endif
#ifndef INCLUDED_util_control_Controller
#include <util/control/Controller.h>
#endif
#ifndef INCLUDED_util_interfaces_ICollider
#include <util/interfaces/ICollider.h>
#endif
#ifndef INCLUDED_util_mechanica_ArmUnits
#include <util/mechanica/ArmUnits.h>
#endif
#ifndef INCLUDED_util_mechanica_CarrierUnit
#include <util/mechanica/CarrierUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_CoreUnit
#include <util/mechanica/CoreUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_EquipType
#include <util/mechanica/EquipType.h>
#endif
#ifndef INCLUDED_util_mechanica_EquipmentUnit
#include <util/mechanica/EquipmentUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_FirearmUnit
#include <util/mechanica/FirearmUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_HeadUnit
#include <util/mechanica/HeadUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_LegUnits
#include <util/mechanica/LegUnits.h>
#endif
#ifndef INCLUDED_util_mechanica_LocomotionStatus
#include <util/mechanica/LocomotionStatus.h>
#endif
#ifndef INCLUDED_util_mechanica_MechBullet
#include <util/mechanica/MechBullet.h>
#endif
#ifndef INCLUDED_util_mechanica_MechGroup
#include <util/mechanica/MechGroup.h>
#endif
#ifndef INCLUDED_util_mechanica_Mechanica
#include <util/mechanica/Mechanica.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif
#ifndef INCLUDED_util_mechanica_ThrusterUnit
#include <util/mechanica/ThrusterUnit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_701213084e7812bf_20_new,"util.mechanica.Mechanica","new",0x39b89972,"util.mechanica.Mechanica.new","util/mechanica/Mechanica.hx",20,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_48_add,"util.mechanica.Mechanica","add",0x39aebb33,"util.mechanica.Mechanica.add","util/mechanica/Mechanica.hx",48,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_54_getWeight,"util.mechanica.Mechanica","getWeight",0x2120dd40,"util.mechanica.Mechanica.getWeight","util/mechanica/Mechanica.hx",54,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_58_getLoad,"util.mechanica.Mechanica","getLoad",0xbd6e03ee,"util.mechanica.Mechanica.getLoad","util/mechanica/Mechanica.hx",58,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_62_valid,"util.mechanica.Mechanica","valid",0x24af268e,"util.mechanica.Mechanica.valid","util/mechanica/Mechanica.hx",62,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_65_bump,"util.mechanica.Mechanica","bump",0x3feb36a4,"util.mechanica.Mechanica.bump","util/mechanica/Mechanica.hx",65,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_85_struckBy,"util.mechanica.Mechanica","struckBy",0xe7c4b4f1,"util.mechanica.Mechanica.struckBy","util/mechanica/Mechanica.hx",85,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_88_postCollision,"util.mechanica.Mechanica","postCollision",0x992b0b84,"util.mechanica.Mechanica.postCollision","util/mechanica/Mechanica.hx",88,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_92_runInput,"util.mechanica.Mechanica","runInput",0xf062126d,"util.mechanica.Mechanica.runInput","util/mechanica/Mechanica.hx",92,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_231_update,"util.mechanica.Mechanica","update",0x2bea3437,"util.mechanica.Mechanica.update","util/mechanica/Mechanica.hx",231,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_239_processInput,"util.mechanica.Mechanica","processInput",0x1d48e3c9,"util.mechanica.Mechanica.processInput","util/mechanica/Mechanica.hx",239,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_250_concludeInput,"util.mechanica.Mechanica","concludeInput",0x5bac92f1,"util.mechanica.Mechanica.concludeInput","util/mechanica/Mechanica.hx",250,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_255_buildFromParts,"util.mechanica.Mechanica","buildFromParts",0x13183676,"util.mechanica.Mechanica.buildFromParts","util/mechanica/Mechanica.hx",255,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_283_rearrangeChildren,"util.mechanica.Mechanica","rearrangeChildren",0xafc12aca,"util.mechanica.Mechanica.rearrangeChildren","util/mechanica/Mechanica.hx",283,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_302_buildPart,"util.mechanica.Mechanica","buildPart",0x8db1fcd3,"util.mechanica.Mechanica.buildPart","util/mechanica/Mechanica.hx",302,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_310_enable,"util.mechanica.Mechanica","enable",0x9d6c5cb1,"util.mechanica.Mechanica.enable","util/mechanica/Mechanica.hx",310,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_317_disable,"util.mechanica.Mechanica","disable",0x548c23fa,"util.mechanica.Mechanica.disable","util/mechanica/Mechanica.hx",317,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_321_isEnabled,"util.mechanica.Mechanica","isEnabled",0x25536449,"util.mechanica.Mechanica.isEnabled","util/mechanica/Mechanica.hx",321,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_334_equip,"util.mechanica.Mechanica","equip",0x65798842,"util.mechanica.Mechanica.equip","util/mechanica/Mechanica.hx",334,0x5dbe2080)
HX_LOCAL_STACK_FRAME(_hx_pos_701213084e7812bf_325_makeToString,"util.mechanica.Mechanica","makeToString",0xf4bde968,"util.mechanica.Mechanica.makeToString","util/mechanica/Mechanica.hx",325,0x5dbe2080)
namespace util{
namespace mechanica{

void Mechanica_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_20_new)
HXLINE(  38)		this->animatedThisFrame = false;
HXLINE(  35)		this->enabled = false;
HXLINE(  22)		this->name = HX_("Blank Schematic",c1,ff,22,eb);
HXLINE(  43)		super::__construct(X,Y,null());
            	}

Dynamic Mechanica_obj::__CreateEmpty() { return new Mechanica_obj; }

void *Mechanica_obj::_hx_vtable = 0;

Dynamic Mechanica_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mechanica_obj > _hx_result = new Mechanica_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Mechanica_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x63e18482 || inClassId==(int)0x6706dc1b;
	}
}

 ::flixel::addons::display::FlxNestedSprite Mechanica_obj::add( ::flixel::addons::display::FlxNestedSprite v){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_48_add)
HXLINE(  49)		this->super::add(v);
HXLINE(  50)		if (::Std_obj::is(v,hx::ClassOf< ::util::mechanica::Part >())) {
HXLINE(  50)			hx::TCast<  ::util::mechanica::Part >::cast(v)->parent = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  51)		return v;
            	}


Float Mechanica_obj::getWeight(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_54_getWeight)
HXDLIN(  54)		Float _hx_tmp;
HXDLIN(  54)		if (hx::IsNotNull( this->equip1 )) {
HXDLIN(  54)			_hx_tmp = this->equip1->weight;
            		}
            		else {
HXDLIN(  54)			_hx_tmp = (int)0;
            		}
HXDLIN(  54)		Float _hx_tmp1;
HXDLIN(  54)		if (hx::IsNotNull( this->equip2 )) {
HXDLIN(  54)			_hx_tmp1 = this->equip2->weight;
            		}
            		else {
HXDLIN(  54)			_hx_tmp1 = (int)0;
            		}
HXDLIN(  54)		return ((((((this->head->weight + this->core->weight) + this->arms->weight) + this->legs->weight) + this->thruster->weight) + _hx_tmp) + _hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,getWeight,return )

Float Mechanica_obj::getLoad(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_58_getLoad)
HXDLIN(  58)		Float _hx_tmp = this->getWeight();
HXDLIN(  58)		return (_hx_tmp - this->legs->weight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,getLoad,return )

bool Mechanica_obj::valid(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_62_valid)
HXDLIN(  62)		bool _hx_tmp;
HXDLIN(  62)		bool _hx_tmp1;
HXDLIN(  62)		bool _hx_tmp2;
HXDLIN(  62)		if (hx::IsNotNull( this->head )) {
HXDLIN(  62)			_hx_tmp2 = hx::IsNotNull( this->core );
            		}
            		else {
HXDLIN(  62)			_hx_tmp2 = false;
            		}
HXDLIN(  62)		if (_hx_tmp2) {
HXDLIN(  62)			_hx_tmp1 = hx::IsNotNull( this->arms );
            		}
            		else {
HXDLIN(  62)			_hx_tmp1 = false;
            		}
HXDLIN(  62)		if (_hx_tmp1) {
HXDLIN(  62)			_hx_tmp = hx::IsNotNull( this->legs );
            		}
            		else {
HXDLIN(  62)			_hx_tmp = false;
            		}
HXDLIN(  62)		if (_hx_tmp) {
HXDLIN(  62)			return hx::IsNotNull( this->thruster );
            		}
            		else {
HXDLIN(  62)			return false;
            		}
HXDLIN(  62)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,valid,return )

bool Mechanica_obj::bump( ::Dynamic col1, ::Dynamic col2){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_65_bump)
HXLINE(  67)		if (::Std_obj::is(col2,hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE(  69)			if (::Std_obj::is(col2,hx::ClassOf< ::util::mechanica::MechBullet >())) {
HXLINE(  71)				 ::util::mechanica::MechBullet bullet = hx::TCast<  ::util::mechanica::MechBullet >::cast(col2);
HXLINE(  72)				if (hx::IsNotEq( bullet->parent->team,this->team )) {
HXLINE(  74)					this->struckBy(bullet);
HXLINE(  75)					return true;
            				}
            				else {
HXLINE(  77)					return false;
            				}
            			}
HXLINE(  79)			::flixel::FlxObject_obj::separate(hx::ObjectPtr<OBJ_>(this),hx::TCast<  ::flixel::FlxObject >::cast(col2));
            		}
HXLINE(  81)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mechanica_obj,bump,return )

void Mechanica_obj::struckBy( ::util::mechanica::MechBullet bullet){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_85_struckBy)
HXDLIN(  85)		 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp = ::flixel::FlxG_obj::log;
HXDLIN(  85)		_hx_tmp->advanced(((this->name + HX_(" was shot by ",3a,b6,de,b3)) + bullet->parent->name),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mechanica_obj,struckBy,(void))

void Mechanica_obj::postCollision(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_88_postCollision)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,postCollision,(void))

void Mechanica_obj::runInput( ::Xml paramsXml){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_92_runInput)
HXLINE(  93)		if (!(this->enabled)) {
HXLINE(  93)			return;
            		}
HXLINE(  95)		{
HXLINE(  95)			::String _g = paramsXml->get(HX_("action",b6,3b,46,16));
HXDLIN(  95)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("aux1",ad,e2,76,40)) ){
HXLINE( 221)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("aux2",ae,e2,76,40)) ){
HXLINE( 225)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("boost",23,27,f8,b6)) ){
HXLINE( 185)				::String mode = paramsXml->get(HX_("mode",63,d3,60,48));
HXLINE( 187)				bool mobile;
HXDLIN( 187)				if (hx::IsNotEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::Walking_dyn() )) {
HXLINE( 187)					mobile = hx::IsEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::ThrusterEngaged_dyn() );
            				}
            				else {
HXLINE( 187)					mobile = true;
            				}
HXLINE( 188)				::String _hx_switch_1 = mode;
            				if (  (_hx_switch_1==HX_("fire",b6,d3,bb,43)) ){
HXLINE( 192)					if (mobile) {
HXLINE( 194)						this->locomotionStatus = ::util::mechanica::LocomotionStatus_obj::ThrusterEngaged_dyn();
HXLINE( 195)						this->thruster->flareSprite->set_visible(true);
HXLINE( 197)						this->thruster->flareSprite->animation->play(HX_("engage",a1,2f,7e,fc),null(),null(),null());
            					}
HXLINE( 192)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_1==HX_("shutoff",bb,11,25,ee)) ){
HXLINE( 205)					this->locomotionStatus = ::util::mechanica::LocomotionStatus_obj::Standing_dyn();
HXLINE( 206)					this->thruster->flareSprite->set_visible(false);
HXLINE( 207)					this->thruster->flareSprite->animation->finish();
HXLINE( 203)					goto _hx_goto_9;
            				}
            				_hx_goto_9:;
HXLINE( 184)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("fire1",bb,6b,9d,00)) ){
HXLINE( 214)				 ::util::mechanica::FirearmUnit _hx_tmp = this->equip1;
HXDLIN( 214)				_hx_tmp->fire((this->angle - (int)90));
HXDLIN( 214)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("fire2",bc,6b,9d,00)) ){
HXLINE( 218)				 ::util::mechanica::FirearmUnit _hx_tmp1 = this->equip2;
HXDLIN( 218)				_hx_tmp1->fire((this->angle - (int)90));
HXDLIN( 218)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("locomote",c2,a0,46,f0)) ){
HXLINE( 101)				 ::Dynamic direction = ::Std_obj::parseInt(paramsXml->get(HX_("direction",3f,62,40,10)));
HXLINE( 102)				int angleOffset;
HXDLIN( 102)				if ((paramsXml->get(HX_("axis",a1,1c,79,40)) == HX_("x",78,00,00,00))) {
HXLINE( 102)					angleOffset = (int)-90;
            				}
            				else {
HXLINE( 102)					angleOffset = (int)0;
            				}
HXLINE( 104)				Float performanceRedux = this->getLoad();
HXDLIN( 104)				Float performanceRedux1 = (performanceRedux - (this->legs->performanceWeightCapacity * this->legs->weightCapacity));
HXLINE( 106)				Float performanceRedux2 = this->legs->weightCapacity;
HXLINE( 103)				Float performanceRedux3 = ((Float)performanceRedux1 / (Float)(performanceRedux2 - (this->legs->weightCapacity * this->legs->performanceWeightCapacity)));
HXLINE( 108)				Float baseSpeed;
HXDLIN( 108)				if (hx::IsNotEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::ThrusterEngaged_dyn() )) {
HXLINE( 108)					baseSpeed = (this->legs->topSpeed * this->legs->_acceleration);
            				}
            				else {
HXLINE( 108)					baseSpeed = (this->thruster->topSpeed * this->thruster->_acceleration);
            				}
HXLINE( 109)				baseSpeed = (baseSpeed * ::Global_obj::speedScale);
HXLINE( 110)				Float limit;
HXDLIN( 110)				if ((performanceRedux3 > (int)0)) {
HXLINE( 110)					limit = (((int)1 - performanceRedux3) * baseSpeed);
            				}
            				else {
HXLINE( 110)					limit = baseSpeed;
            				}
HXLINE( 112)				bool animate = !(this->animatedThisFrame);
HXLINE( 113)				if (animate) {
HXLINE( 115)					this->animatedThisFrame = true;
HXLINE( 116)					bool _hx_tmp2;
HXDLIN( 116)					bool _hx_tmp3;
HXDLIN( 116)					if (this->legs->animated) {
HXLINE( 116)						_hx_tmp3 = hx::IsNotEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::ThrusterEngaged_dyn() );
            					}
            					else {
HXLINE( 116)						_hx_tmp3 = false;
            					}
HXDLIN( 116)					if (_hx_tmp3) {
HXLINE( 116)						_hx_tmp2 = (::math::MoreMath_obj::magnitude(this->velocity) >= (int)10);
            					}
            					else {
HXLINE( 116)						_hx_tmp2 = false;
            					}
HXDLIN( 116)					if (_hx_tmp2) {
HXLINE( 118)						 ::flixel::animation::FlxAnimation _hx_tmp4 = ( ( ::flixel::animation::FlxAnimation)(::haxe::IMap_obj::get(this->legs->animation->_animations,HX_("locomote",c2,a0,46,f0))) );
HXDLIN( 118)						_hx_tmp4->set_frameRate(::Std_obj::_hx_int(::Math_obj::max((((Float)this->speed / (Float)limit) * this->legs->frameRate),(int)2)));
HXLINE( 119)						this->legs->animation->play(HX_("locomote",c2,a0,46,f0),null(),null(),null());
            					}
            					else {
HXLINE( 123)						if (hx::IsNotEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::ThrusterEngaged_dyn() )) {
HXLINE( 123)							this->locomotionStatus = ::util::mechanica::LocomotionStatus_obj::Standing_dyn();
            						}
HXLINE( 124)						bool _hx_tmp5;
HXDLIN( 124)						if (this->legs->animated) {
HXLINE( 124)							_hx_tmp5 = hx::IsNotNull( this->legs->animation->_curAnim );
            						}
            						else {
HXLINE( 124)							_hx_tmp5 = false;
            						}
HXDLIN( 124)						if (_hx_tmp5) {
HXLINE( 126)							 ::flixel::animation::FlxAnimationController _this = this->legs->animation;
HXDLIN( 126)							if (hx::IsNotNull( _this->_curAnim )) {
HXLINE( 126)								_this->_curAnim->pause();
            							}
            						}
            					}
            				}
HXLINE( 132)				if (hx::IsNotEq( direction,(int)0 )) {
HXLINE( 135)					Float a = ::Math_obj::cos(::math::MoreMath_obj::degToRad(((this->angle + (int)90) + angleOffset)));
HXLINE( 136)					Float b = ::Math_obj::sin(::math::MoreMath_obj::degToRad(((this->angle + (int)90) + angleOffset)));
HXLINE( 138)					if (animate) {
HXLINE( 140)						 ::util::mechanica::Mechanica _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 140)						_hx_tmp6->speed = (_hx_tmp6->speed + baseSpeed);
HXLINE( 141)						 ::flixel::math::FlxPoint _hx_tmp7 = this->velocity;
HXDLIN( 141)						Float _hx_tmp8 = ((a * this->speed) * direction);
HXDLIN( 141)						_hx_tmp7->set(_hx_tmp8,((b * this->speed) * direction));
            					}
            					else {
HXLINE( 146)						 ::flixel::math::FlxPoint _this1 = this->velocity;
HXDLIN( 146)						Float Y = ((b * this->speed) * direction);
HXDLIN( 146)						{
HXLINE( 146)							 ::flixel::math::FlxPoint _g1 = _this1;
HXDLIN( 146)							_g1->set_x((_g1->x + ((a * this->speed) * direction)));
            						}
HXDLIN( 146)						{
HXLINE( 146)							 ::flixel::math::FlxPoint _g2 = _this1;
HXDLIN( 146)							_g2->set_y((_g2->y + Y));
            						}
            					}
HXLINE( 148)					this->speed = ::Math_obj::min(this->speed,limit);
HXLINE( 151)					if (hx::IsNotEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::ThrusterEngaged_dyn() )) {
HXLINE( 151)						this->locomotionStatus = ::util::mechanica::LocomotionStatus_obj::Walking_dyn();
            					}
            				}
            				else {
HXLINE( 155)					bool _hx_tmp9;
HXDLIN( 155)					if (hx::IsNotEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::Walking_dyn() )) {
HXLINE( 155)						_hx_tmp9 = hx::IsEq( this->locomotionStatus,::util::mechanica::LocomotionStatus_obj::Standing_dyn() );
            					}
            					else {
HXLINE( 155)						_hx_tmp9 = true;
            					}
HXDLIN( 155)					if (_hx_tmp9) {
HXLINE( 155)						this->speed = ::Math_obj::max((this->speed - (int)2),(int)0);
            					}
HXLINE( 156)					this->locomotionStatus = ::util::mechanica::LocomotionStatus_obj::Braking_dyn();
            				}
HXLINE( 160)				{
HXLINE( 160)					 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this2 = ::flixel::FlxG_obj::watch;
HXDLIN( 160)					 ::Dynamic value = ::math::MoreMath_obj::magnitude(this->velocity);
HXDLIN( 160)					 ::flixel::_hx_system::debug::watch::Watch _hx_tmp10 = ::flixel::FlxG_obj::game->debugger->watch;
HXDLIN( 160)					_hx_tmp10->add(HX_("magnitude:",6a,22,49,c2),::flixel::_hx_system::debug::watch::WatchEntryData_obj::QUICK(::Std_obj::string(value)));
            				}
HXLINE(  98)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("steer",11,72,0e,84)) ){
HXLINE( 166)				 ::Dynamic direction1 = ::Std_obj::parseInt(paramsXml->get(HX_("direction",3f,62,40,10)));
HXLINE( 167)				if (hx::IsNotEq( direction1,(int)0 )) {
HXLINE( 171)					{
HXLINE( 171)						 ::util::mechanica::Mechanica _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 171)						Float _g4 = _g3->angle;
HXDLIN( 171)						_g3->set_angle((_g4 + (this->legs->turningSpeed * direction1)));
            					}
HXLINE( 172)					this->speed--;
HXLINE( 173)					if ((this->angle < (int)0)) {
HXLINE( 175)						 ::util::mechanica::Mechanica _g5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 175)						_g5->set_angle((_g5->angle + (int)360));
            					}
HXLINE( 177)					if ((this->angle > (int)360)) {
HXLINE( 179)						 ::util::mechanica::Mechanica _g6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 179)						_g6->set_angle((_g6->angle - (int)360));
            					}
            				}
HXLINE( 164)				goto _hx_goto_8;
            			}
            			_hx_goto_8:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mechanica_obj,runInput,(void))

void Mechanica_obj::update(Float e){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_231_update)
HXLINE( 233)		this->processInput();
HXLINE( 235)		this->super::update(e);
HXLINE( 236)		::flixel::FlxG_obj::overlap(hx::ObjectPtr<OBJ_>(this),::Global_obj::colliders,null(),this->bump_dyn());
            	}


void Mechanica_obj::processInput(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_239_processInput)
HXLINE( 240)		if (hx::IsNull( this->controller )) {
HXLINE( 240)			return;
            		}
HXLINE( 241)		::Array< ::Dynamic> inputBuffer = this->controller->getBuffer();
HXLINE( 242)		{
HXLINE( 242)			int _g1 = (int)0;
HXDLIN( 242)			int _g = inputBuffer->length;
HXDLIN( 242)			while((_g1 < _g)){
HXLINE( 242)				_g1 = (_g1 + (int)1);
HXDLIN( 242)				int i = (_g1 - (int)1);
HXLINE( 244)				this->runInput(inputBuffer->__get(i).StaticCast<  ::Xml >());
            			}
            		}
HXLINE( 246)		this->concludeInput();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,processInput,(void))

void Mechanica_obj::concludeInput(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_250_concludeInput)
HXDLIN( 250)		this->animatedThisFrame = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,concludeInput,(void))

bool Mechanica_obj::buildFromParts(::String _head,::String _core,::String _arms,::String _legs,::String _thruster,::String _equip1,::String _equip2){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_255_buildFromParts)
HXLINE( 256)		::flixel::FlxG_obj::log->advanced(HX_("Building from parts...",b8,55,3d,d6),::Global_obj::logStyle,null());
HXLINE( 257)		bool returnBool = true;
HXLINE( 258)		if (returnBool) {
HXLINE( 258)			returnBool = this->buildPart(::util::mechanica::EquipType_obj::Head_dyn(),_head);
            		}
            		else {
HXLINE( 258)			returnBool = false;
            		}
HXLINE( 259)		if (returnBool) {
HXLINE( 259)			returnBool = this->buildPart(::util::mechanica::EquipType_obj::Core_dyn(),_core);
            		}
            		else {
HXLINE( 259)			returnBool = false;
            		}
HXLINE( 260)		if (returnBool) {
HXLINE( 260)			returnBool = this->buildPart(::util::mechanica::EquipType_obj::Arms_dyn(),_arms);
            		}
            		else {
HXLINE( 260)			returnBool = false;
            		}
HXLINE( 261)		if (returnBool) {
HXLINE( 261)			returnBool = this->buildPart(::util::mechanica::EquipType_obj::Legs_dyn(),_legs);
            		}
            		else {
HXLINE( 261)			returnBool = false;
            		}
HXLINE( 262)		if (returnBool) {
HXLINE( 262)			returnBool = this->buildPart(::util::mechanica::EquipType_obj::Thruster_dyn(),_thruster);
            		}
            		else {
HXLINE( 262)			returnBool = false;
            		}
HXLINE( 263)		if (hx::IsNotNull( _equip1 )) {
HXLINE( 265)			if (returnBool) {
HXLINE( 265)				returnBool = this->buildPart(::util::mechanica::EquipType_obj::Equipment1_dyn(),_equip1);
            			}
            			else {
HXLINE( 265)				returnBool = false;
            			}
            		}
HXLINE( 267)		if (hx::IsNotNull( _equip2 )) {
HXLINE( 269)			if (returnBool) {
HXLINE( 269)				returnBool = this->buildPart(::util::mechanica::EquipType_obj::Equipment2_dyn(),_equip2);
            			}
            			else {
HXLINE( 269)				returnBool = false;
            			}
            		}
HXLINE( 271)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN( 271)		 ::flixel::math::FlxPoint _hx_tmp1 = this->drag;
HXDLIN( 271)		Float _hx_tmp2 = this->legs->brakingForce;
HXDLIN( 271)		Float _hx_tmp3 = ::Math_obj::max((_hx_tmp2 - this->getLoad()),(int)25);
HXDLIN( 271)		_hx_tmp->set_x(_hx_tmp1->set_y(::Math_obj::min(_hx_tmp3,((Float)this->legs->topSpeed / (Float)(int)2))));
HXLINE( 272)		this->rearrangeChildren();
HXLINE( 273)		return returnBool;
            	}


HX_DEFINE_DYNAMIC_FUNC7(Mechanica_obj,buildFromParts,return )

void Mechanica_obj::rearrangeChildren(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_283_rearrangeChildren)
HXLINE( 284)		this->removeAll();
HXLINE( 286)		this->add(this->legs);
HXLINE( 287)		this->add(this->thruster);
HXLINE( 289)		this->add(this->arms);
HXLINE( 290)		this->add(this->core);
HXLINE( 291)		if (hx::IsNotNull( this->equip1 )) {
HXLINE( 293)			this->add(this->equip1);
            		}
HXLINE( 295)		if (hx::IsNotNull( this->equip2 )) {
HXLINE( 297)			this->add(this->equip2);
            		}
HXLINE( 299)		this->add(this->head);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,rearrangeChildren,(void))

bool Mechanica_obj::buildPart( ::util::mechanica::EquipType etype,::String part){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_302_buildPart)
HXLINE( 305)		 ::util::mechanica::Part partObj = ::util::PartFactory_obj::buildPart(part);
HXLINE( 307)		if (hx::IsNotNull( partObj )) {
HXLINE( 307)			return this->equip(etype,partObj);
            		}
            		else {
HXLINE( 307)			return false;
            		}
HXDLIN( 307)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mechanica_obj,buildPart,return )

void Mechanica_obj::enable(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_310_enable)
HXLINE( 311)		this->enabled = true;
HXLINE( 312)		this->loadGraphic(HX_("assets/images/misc/blank.png",57,37,0e,60),false,(int)32,(int)32,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,enable,(void))

void Mechanica_obj::disable(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_317_disable)
HXDLIN( 317)		this->enabled = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,disable,(void))

bool Mechanica_obj::isEnabled(){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_321_isEnabled)
HXDLIN( 321)		return this->enabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mechanica_obj,isEnabled,return )

bool Mechanica_obj::equip( ::util::mechanica::EquipType etype, ::Dynamic part){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_334_equip)
HXLINE( 335)		if (hx::IsNull( part )) {
HXLINE( 335)			return false;
            		}
HXLINE( 336)		 ::flixel::_hx_system::frontEnds::LogFrontEnd _hx_tmp = ::flixel::FlxG_obj::log;
HXDLIN( 336)		_hx_tmp->advanced((HX_("Equipping ",de,20,92,ad) + hx::TCast<  ::util::mechanica::Part >::cast(part)->desc),::Global_obj::logStyle,null());
HXLINE( 337)		switch((int)(_hx_getEnumValueIndex(etype))){
            			case (int)0: {
HXLINE( 341)				if (hx::IsNotNull( this->head )) {
HXLINE( 341)					this->remove(this->head);
            				}
HXLINE( 342)				this->head = ( ( ::util::mechanica::HeadUnit)(part) );
            			}
            			break;
            			case (int)1: {
HXLINE( 346)				if (hx::IsNotNull( this->core )) {
HXLINE( 346)					this->remove(this->core);
            				}
HXLINE( 347)				this->core = ( ( ::util::mechanica::CoreUnit)(part) );
            			}
            			break;
            			case (int)2: {
HXLINE( 351)				if (hx::IsNotNull( this->arms )) {
HXLINE( 351)					this->remove(this->arms);
            				}
HXLINE( 352)				this->arms = ( ( ::util::mechanica::ArmUnits)(part) );
            			}
            			break;
            			case (int)3: {
HXLINE( 356)				if (hx::IsNotNull( this->legs )) {
HXLINE( 356)					this->remove(this->legs);
            				}
HXLINE( 357)				this->legs = ( ( ::util::mechanica::LegUnits)(part) );
            			}
            			break;
            			case (int)4: {
HXLINE( 361)				if (hx::IsNotNull( this->thruster )) {
HXLINE( 361)					this->remove(this->thruster);
            				}
HXLINE( 362)				this->thruster = ( ( ::util::mechanica::ThrusterUnit)(part) );
            			}
            			break;
            			case (int)5: {
HXLINE( 366)				if (hx::IsNotNull( this->equip1 )) {
HXLINE( 366)					this->remove(this->equip1);
            				}
HXLINE( 367)				this->equip1 = ( ( ::util::mechanica::FirearmUnit)(part) );
HXLINE( 368)				this->equip1->setOffset((int)8,(int)0);
HXLINE( 369)				this->equip1->setup(hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)6: {
HXLINE( 373)				if (hx::IsNotNull( this->equip2 )) {
HXLINE( 373)					this->remove(this->equip2);
            				}
HXLINE( 374)				this->equip2 = ( ( ::util::mechanica::FirearmUnit)(part) );
HXLINE( 375)				this->equip2->setOffset((int)24,(int)0);
HXLINE( 376)				this->equip2->set_flipX(true);
HXLINE( 377)				this->equip2->setup(hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            		}
HXLINE( 382)		this->add(( ( ::flixel::addons::display::FlxNestedSprite)(part) ));
HXLINE( 383)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mechanica_obj,equip,return )

::String Mechanica_obj::makeToString(int make){
            	HX_STACKFRAME(&_hx_pos_701213084e7812bf_325_makeToString)
HXDLIN( 325)		if ((make == (int)0)) {
HXLINE( 328)			return HX_("HYSPD",96,02,ed,af);
            		}
            		else {
HXLINE( 330)			return HX_("HYSPD",96,02,ed,af);
            		}
HXLINE( 325)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mechanica_obj,makeToString,return )


hx::ObjectPtr< Mechanica_obj > Mechanica_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< Mechanica_obj > __this = new Mechanica_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< Mechanica_obj > Mechanica_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	Mechanica_obj *__this = (Mechanica_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mechanica_obj), true, "util.mechanica.Mechanica"));
	*(void **)__this = Mechanica_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

Mechanica_obj::Mechanica_obj()
{
}

void Mechanica_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mechanica);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_MEMBER_NAME(arms,"arms");
	HX_MARK_MEMBER_NAME(legs,"legs");
	HX_MARK_MEMBER_NAME(thruster,"thruster");
	HX_MARK_MEMBER_NAME(controller,"controller");
	HX_MARK_MEMBER_NAME(equip1,"equip1");
	HX_MARK_MEMBER_NAME(team,"team");
	HX_MARK_MEMBER_NAME(equip2,"equip2");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(locomotionStatus,"locomotionStatus");
	HX_MARK_MEMBER_NAME(animatedThisFrame,"animatedThisFrame");
	 ::flixel::addons::display::FlxNestedSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mechanica_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(core,"core");
	HX_VISIT_MEMBER_NAME(arms,"arms");
	HX_VISIT_MEMBER_NAME(legs,"legs");
	HX_VISIT_MEMBER_NAME(thruster,"thruster");
	HX_VISIT_MEMBER_NAME(controller,"controller");
	HX_VISIT_MEMBER_NAME(equip1,"equip1");
	HX_VISIT_MEMBER_NAME(team,"team");
	HX_VISIT_MEMBER_NAME(equip2,"equip2");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(locomotionStatus,"locomotionStatus");
	HX_VISIT_MEMBER_NAME(animatedThisFrame,"animatedThisFrame");
	 ::flixel::addons::display::FlxNestedSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mechanica_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"arms") ) { return hx::Val( arms ); }
		if (HX_FIELD_EQ(inName,"legs") ) { return hx::Val( legs ); }
		if (HX_FIELD_EQ(inName,"team") ) { return hx::Val( team ); }
		if (HX_FIELD_EQ(inName,"bump") ) { return hx::Val( bump_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"valid") ) { return hx::Val( valid_dyn() ); }
		if (HX_FIELD_EQ(inName,"equip") ) { return hx::Val( equip_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equip1") ) { return hx::Val( equip1 ); }
		if (HX_FIELD_EQ(inName,"equip2") ) { return hx::Val( equip2 ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"enable") ) { return hx::Val( enable_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"getLoad") ) { return hx::Val( getLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"disable") ) { return hx::Val( disable_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"thruster") ) { return hx::Val( thruster ); }
		if (HX_FIELD_EQ(inName,"struckBy") ) { return hx::Val( struckBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"runInput") ) { return hx::Val( runInput_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getWeight") ) { return hx::Val( getWeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"buildPart") ) { return hx::Val( buildPart_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEnabled") ) { return hx::Val( isEnabled_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"controller") ) { return hx::Val( controller ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"processInput") ) { return hx::Val( processInput_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"postCollision") ) { return hx::Val( postCollision_dyn() ); }
		if (HX_FIELD_EQ(inName,"concludeInput") ) { return hx::Val( concludeInput_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buildFromParts") ) { return hx::Val( buildFromParts_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"locomotionStatus") ) { return hx::Val( locomotionStatus ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"animatedThisFrame") ) { return hx::Val( animatedThisFrame ); }
		if (HX_FIELD_EQ(inName,"rearrangeChildren") ) { return hx::Val( rearrangeChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mechanica_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"makeToString") ) { outValue = makeToString_dyn(); return true; }
	}
	return false;
}

hx::Val Mechanica_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::util::mechanica::HeadUnit >(); return inValue; }
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::util::mechanica::CoreUnit >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arms") ) { arms=inValue.Cast<  ::util::mechanica::ArmUnits >(); return inValue; }
		if (HX_FIELD_EQ(inName,"legs") ) { legs=inValue.Cast<  ::util::mechanica::LegUnits >(); return inValue; }
		if (HX_FIELD_EQ(inName,"team") ) { team=inValue.Cast<  ::util::mechanica::MechGroup >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equip1") ) { equip1=inValue.Cast<  ::util::mechanica::FirearmUnit >(); return inValue; }
		if (HX_FIELD_EQ(inName,"equip2") ) { equip2=inValue.Cast<  ::util::mechanica::FirearmUnit >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"thruster") ) { thruster=inValue.Cast<  ::util::mechanica::ThrusterUnit >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"controller") ) { controller=inValue.Cast<  ::util::control::Controller >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"locomotionStatus") ) { locomotionStatus=inValue.Cast<  ::util::mechanica::LocomotionStatus >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"animatedThisFrame") ) { animatedThisFrame=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mechanica_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("arms","\x97","\x92","\x74","\x40"));
	outFields->push(HX_HCSTRING("legs","\xe5","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("thruster","\x05","\xdd","\x80","\x0e"));
	outFields->push(HX_HCSTRING("controller","\x9c","\x98","\xbe","\x04"));
	outFields->push(HX_HCSTRING("equip1","\x81","\x03","\xf9","\xbf"));
	outFields->push(HX_HCSTRING("team","\x9d","\xb8","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("equip2","\x82","\x03","\xf9","\xbf"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("locomotionStatus","\x77","\xb4","\x46","\x94"));
	outFields->push(HX_HCSTRING("animatedThisFrame","\xcc","\x8d","\x57","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mechanica_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Mechanica_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::util::mechanica::HeadUnit*/ ,(int)offsetof(Mechanica_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsObject /*::util::mechanica::CoreUnit*/ ,(int)offsetof(Mechanica_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*::util::mechanica::ArmUnits*/ ,(int)offsetof(Mechanica_obj,arms),HX_HCSTRING("arms","\x97","\x92","\x74","\x40")},
	{hx::fsObject /*::util::mechanica::LegUnits*/ ,(int)offsetof(Mechanica_obj,legs),HX_HCSTRING("legs","\xe5","\x08","\xb0","\x47")},
	{hx::fsObject /*::util::mechanica::ThrusterUnit*/ ,(int)offsetof(Mechanica_obj,thruster),HX_HCSTRING("thruster","\x05","\xdd","\x80","\x0e")},
	{hx::fsObject /*::util::control::Controller*/ ,(int)offsetof(Mechanica_obj,controller),HX_HCSTRING("controller","\x9c","\x98","\xbe","\x04")},
	{hx::fsObject /*::util::mechanica::FirearmUnit*/ ,(int)offsetof(Mechanica_obj,equip1),HX_HCSTRING("equip1","\x81","\x03","\xf9","\xbf")},
	{hx::fsObject /*::util::mechanica::MechGroup*/ ,(int)offsetof(Mechanica_obj,team),HX_HCSTRING("team","\x9d","\xb8","\xf9","\x4c")},
	{hx::fsObject /*::util::mechanica::FirearmUnit*/ ,(int)offsetof(Mechanica_obj,equip2),HX_HCSTRING("equip2","\x82","\x03","\xf9","\xbf")},
	{hx::fsBool,(int)offsetof(Mechanica_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsFloat,(int)offsetof(Mechanica_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::util::mechanica::LocomotionStatus*/ ,(int)offsetof(Mechanica_obj,locomotionStatus),HX_HCSTRING("locomotionStatus","\x77","\xb4","\x46","\x94")},
	{hx::fsBool,(int)offsetof(Mechanica_obj,animatedThisFrame),HX_HCSTRING("animatedThisFrame","\xcc","\x8d","\x57","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mechanica_obj_sStaticStorageInfo = 0;
#endif

static ::String Mechanica_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("arms","\x97","\x92","\x74","\x40"),
	HX_HCSTRING("legs","\xe5","\x08","\xb0","\x47"),
	HX_HCSTRING("thruster","\x05","\xdd","\x80","\x0e"),
	HX_HCSTRING("controller","\x9c","\x98","\xbe","\x04"),
	HX_HCSTRING("equip1","\x81","\x03","\xf9","\xbf"),
	HX_HCSTRING("team","\x9d","\xb8","\xf9","\x4c"),
	HX_HCSTRING("equip2","\x82","\x03","\xf9","\xbf"),
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("locomotionStatus","\x77","\xb4","\x46","\x94"),
	HX_HCSTRING("animatedThisFrame","\xcc","\x8d","\x57","\x78"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("getWeight","\xae","\xfa","\xfc","\x7d"),
	HX_HCSTRING("getLoad","\xdc","\x49","\x3a","\x1a"),
	HX_HCSTRING("valid","\xfc","\x74","\xb8","\x31"),
	HX_HCSTRING("bump","\xf6","\x0f","\x20","\x41"),
	HX_HCSTRING("struckBy","\x43","\x9f","\xb5","\xbd"),
	HX_HCSTRING("postCollision","\xf2","\x77","\xed","\x88"),
	HX_HCSTRING("runInput","\xbf","\xfc","\x52","\xc6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("processInput","\x1b","\x5f","\xd2","\xa5"),
	HX_HCSTRING("concludeInput","\x5f","\xff","\x6e","\x4b"),
	HX_HCSTRING("buildFromParts","\x48","\xaa","\x74","\xed"),
	HX_HCSTRING("rearrangeChildren","\x38","\x66","\x3d","\x45"),
	HX_HCSTRING("buildPart","\x41","\x1a","\x8e","\xea"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("disable","\xe8","\x69","\x58","\xb1"),
	HX_HCSTRING("isEnabled","\xb7","\x81","\x2f","\x82"),
	HX_HCSTRING("equip","\xb0","\xd6","\x82","\x72"),
	::String(null()) };

static void Mechanica_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mechanica_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mechanica_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mechanica_obj::__mClass,"__mClass");
};

#endif

hx::Class Mechanica_obj::__mClass;

static ::String Mechanica_obj_sStaticFields[] = {
	HX_HCSTRING("makeToString","\xba","\x64","\x47","\x7d"),
	::String(null())
};

void Mechanica_obj::__register()
{
	hx::Object *dummy = new Mechanica_obj;
	Mechanica_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.mechanica.Mechanica","\x80","\xb8","\xf6","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mechanica_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mechanica_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mechanica_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mechanica_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mechanica_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mechanica_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mechanica_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mechanica_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace mechanica
