// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_mechanica_EquipmentUnit
#include <util/mechanica/EquipmentUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_Mechanica
#include <util/mechanica/Mechanica.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_db764cf96668f100_127_new,"util.mechanica.EquipmentUnit","new",0x53fa1007,"util.mechanica.EquipmentUnit.new","util/mechanica/Part.hx",127,0x51e4a40c)
HX_LOCAL_STACK_FRAME(_hx_pos_db764cf96668f100_136_setup,"util.mechanica.EquipmentUnit","setup",0xb3a265e4,"util.mechanica.EquipmentUnit.setup","util/mechanica/Part.hx",136,0x51e4a40c)
HX_LOCAL_STACK_FRAME(_hx_pos_db764cf96668f100_140_fire,"util.mechanica.EquipmentUnit","fire",0x218d462f,"util.mechanica.EquipmentUnit.fire","util/mechanica/Part.hx",140,0x51e4a40c)
namespace util{
namespace mechanica{

void EquipmentUnit_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_db764cf96668f100_127_new)
HXLINE( 129)		this->twoHanded = false;
HXLINE( 132)		super::__construct(X,Y);
HXLINE( 133)		this->type = HX_("equip",b0,d6,82,72);
            	}

Dynamic EquipmentUnit_obj::__CreateEmpty() { return new EquipmentUnit_obj; }

void *EquipmentUnit_obj::_hx_vtable = 0;

Dynamic EquipmentUnit_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EquipmentUnit_obj > _hx_result = new EquipmentUnit_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool EquipmentUnit_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x109e64fb) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x109e64fb;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		if (inClassId<=(int)0x4ae160ee) {
			return inClassId==(int)0x2e105115 || inClassId==(int)0x4ae160ee;
		} else {
			return inClassId==(int)0x6706dc1b;
		}
	}
}

void EquipmentUnit_obj::setup( ::util::mechanica::Mechanica mechanica){
            	HX_STACKFRAME(&_hx_pos_db764cf96668f100_136_setup)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EquipmentUnit_obj,setup,(void))

void EquipmentUnit_obj::fire(Float p){
            	HX_STACKFRAME(&_hx_pos_db764cf96668f100_140_fire)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EquipmentUnit_obj,fire,(void))


hx::ObjectPtr< EquipmentUnit_obj > EquipmentUnit_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< EquipmentUnit_obj > __this = new EquipmentUnit_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< EquipmentUnit_obj > EquipmentUnit_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	EquipmentUnit_obj *__this = (EquipmentUnit_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EquipmentUnit_obj), true, "util.mechanica.EquipmentUnit"));
	*(void **)__this = EquipmentUnit_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

EquipmentUnit_obj::EquipmentUnit_obj()
{
}

hx::Val EquipmentUnit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fire") ) { return hx::Val( fire_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"twoHanded") ) { return hx::Val( twoHanded ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EquipmentUnit_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"twoHanded") ) { twoHanded=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EquipmentUnit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("twoHanded","\x3a","\x10","\x37","\x20"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EquipmentUnit_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(EquipmentUnit_obj,twoHanded),HX_HCSTRING("twoHanded","\x3a","\x10","\x37","\x20")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EquipmentUnit_obj_sStaticStorageInfo = 0;
#endif

static ::String EquipmentUnit_obj_sMemberFields[] = {
	HX_HCSTRING("twoHanded","\x3a","\x10","\x37","\x20"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("fire","\xb6","\xd3","\xbb","\x43"),
	::String(null()) };

static void EquipmentUnit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EquipmentUnit_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EquipmentUnit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EquipmentUnit_obj::__mClass,"__mClass");
};

#endif

hx::Class EquipmentUnit_obj::__mClass;

void EquipmentUnit_obj::__register()
{
	hx::Object *dummy = new EquipmentUnit_obj;
	EquipmentUnit_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.mechanica.EquipmentUnit","\x95","\x00","\x8a","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EquipmentUnit_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EquipmentUnit_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EquipmentUnit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EquipmentUnit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EquipmentUnit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EquipmentUnit_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace mechanica
