// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_mechanica_CoreUnit
#include <util/mechanica/CoreUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9965c730745393d8_69_new,"util.mechanica.CoreUnit","new",0xd476bcb2,"util.mechanica.CoreUnit.new","util/mechanica/Part.hx",69,0x51e4a40c)
namespace util{
namespace mechanica{

void CoreUnit_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_9965c730745393d8_69_new)
HXLINE(  70)		super::__construct(X,Y);
HXLINE(  71)		this->type = HX_("core",5f,bd,c4,41);
            	}

Dynamic CoreUnit_obj::__CreateEmpty() { return new CoreUnit_obj; }

void *CoreUnit_obj::_hx_vtable = 0;

Dynamic CoreUnit_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CoreUnit_obj > _hx_result = new CoreUnit_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CoreUnit_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		if (inClassId<=(int)0x4ae160ee) {
			return inClassId==(int)0x448c65fe || inClassId==(int)0x4ae160ee;
		} else {
			return inClassId==(int)0x6706dc1b;
		}
	}
}


hx::ObjectPtr< CoreUnit_obj > CoreUnit_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< CoreUnit_obj > __this = new CoreUnit_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< CoreUnit_obj > CoreUnit_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	CoreUnit_obj *__this = (CoreUnit_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CoreUnit_obj), true, "util.mechanica.CoreUnit"));
	*(void **)__this = CoreUnit_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

CoreUnit_obj::CoreUnit_obj()
{
}

hx::Val CoreUnit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"regenRate") ) { return hx::Val( regenRate ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"coolingRate") ) { return hx::Val( coolingRate ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CoreUnit_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"regenRate") ) { regenRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"coolingRate") ) { coolingRate=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CoreUnit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("coolingRate","\x39","\xc5","\x94","\x5c"));
	outFields->push(HX_HCSTRING("regenRate","\x3d","\x50","\x27","\x2a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CoreUnit_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(CoreUnit_obj,coolingRate),HX_HCSTRING("coolingRate","\x39","\xc5","\x94","\x5c")},
	{hx::fsFloat,(int)offsetof(CoreUnit_obj,regenRate),HX_HCSTRING("regenRate","\x3d","\x50","\x27","\x2a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CoreUnit_obj_sStaticStorageInfo = 0;
#endif

static ::String CoreUnit_obj_sMemberFields[] = {
	HX_HCSTRING("coolingRate","\x39","\xc5","\x94","\x5c"),
	HX_HCSTRING("regenRate","\x3d","\x50","\x27","\x2a"),
	::String(null()) };

static void CoreUnit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CoreUnit_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CoreUnit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CoreUnit_obj::__mClass,"__mClass");
};

#endif

hx::Class CoreUnit_obj::__mClass;

void CoreUnit_obj::__register()
{
	hx::Object *dummy = new CoreUnit_obj;
	CoreUnit_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.mechanica.CoreUnit","\xc0","\x3b","\x92","\x53");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CoreUnit_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CoreUnit_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CoreUnit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CoreUnit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CoreUnit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CoreUnit_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace mechanica
