// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_Mechanica
#include <util/mechanica/Mechanica.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b7ad42775836065f_20_new,"util.mechanica.Part","new",0x7e30e6a2,"util.mechanica.Part.new","util/mechanica/Part.hx",20,0x51e4a40c)
HX_LOCAL_STACK_FRAME(_hx_pos_b7ad42775836065f_45_fabricateInfo,"util.mechanica.Part","fabricateInfo",0x73d0409d,"util.mechanica.Part.fabricateInfo","util/mechanica/Part.hx",45,0x51e4a40c)
namespace util{
namespace mechanica{

void Part_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_b7ad42775836065f_20_new)
HXLINE(  38)		this->functional = true;
HXLINE(  37)		this->enUsage = ((Float)0);
HXLINE(  36)		this->armorRating = ((Float)0);
HXLINE(  34)		this->MSRP = (int)50;
HXLINE(  33)		this->make = HX_("Universal",6b,b1,69,4d);
HXLINE(  30)		this->number = HX_("N/A",00,59,3b,00);
HXLINE(  29)		this->tempCutoff = ((Float)0);
HXLINE(  27)		this->temp = ((Float)0);
HXLINE(  25)		this->desc = HX_("No notes",42,ab,63,e0);
HXLINE(  24)		this->weight = ((Float)0);
HXLINE(  41)		super::__construct(X,Y,null());
HXLINE(  42)		this->set_allowCollisions((int)0);
            	}

Dynamic Part_obj::__CreateEmpty() { return new Part_obj; }

void *Part_obj::_hx_vtable = 0;

Dynamic Part_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Part_obj > _hx_result = new Part_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Part_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x4ae160ee || inClassId==(int)0x6706dc1b;
	}
}

static ::util::mechanica::IPart_obj _hx_util_mechanica_Part__hx_util_mechanica_IPart= {
	( void (hx::Object::*)(::String,::String))&::util::mechanica::Part_obj::fabricateInfo,
};

void *Part_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x273bd7a1: return &_hx_util_mechanica_Part__hx_util_mechanica_IPart;
	}
	return super::_hx_getInterface(inHash);
}

void Part_obj::fabricateInfo(::String _number,::String _desc){
            	HX_STACKFRAME(&_hx_pos_b7ad42775836065f_45_fabricateInfo)
HXLINE(  46)		this->number = _number;
HXLINE(  47)		this->desc = _desc;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Part_obj,fabricateInfo,(void))


hx::ObjectPtr< Part_obj > Part_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< Part_obj > __this = new Part_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< Part_obj > Part_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	Part_obj *__this = (Part_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Part_obj), true, "util.mechanica.Part"));
	*(void **)__this = Part_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

Part_obj::Part_obj()
{
}

void Part_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Part);
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(weight,"weight");
	HX_MARK_MEMBER_NAME(desc,"desc");
	HX_MARK_MEMBER_NAME(temp,"temp");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(tempCutoff,"tempCutoff");
	HX_MARK_MEMBER_NAME(number,"number");
	HX_MARK_MEMBER_NAME(make,"make");
	HX_MARK_MEMBER_NAME(MSRP,"MSRP");
	HX_MARK_MEMBER_NAME(imageFile,"imageFile");
	HX_MARK_MEMBER_NAME(armorRating,"armorRating");
	HX_MARK_MEMBER_NAME(enUsage,"enUsage");
	HX_MARK_MEMBER_NAME(functional,"functional");
	 ::flixel::addons::display::FlxNestedSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Part_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(weight,"weight");
	HX_VISIT_MEMBER_NAME(desc,"desc");
	HX_VISIT_MEMBER_NAME(temp,"temp");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(tempCutoff,"tempCutoff");
	HX_VISIT_MEMBER_NAME(number,"number");
	HX_VISIT_MEMBER_NAME(make,"make");
	HX_VISIT_MEMBER_NAME(MSRP,"MSRP");
	HX_VISIT_MEMBER_NAME(imageFile,"imageFile");
	HX_VISIT_MEMBER_NAME(armorRating,"armorRating");
	HX_VISIT_MEMBER_NAME(enUsage,"enUsage");
	HX_VISIT_MEMBER_NAME(functional,"functional");
	 ::flixel::addons::display::FlxNestedSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Part_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"desc") ) { return hx::Val( desc ); }
		if (HX_FIELD_EQ(inName,"temp") ) { return hx::Val( temp ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"make") ) { return hx::Val( make ); }
		if (HX_FIELD_EQ(inName,"MSRP") ) { return hx::Val( MSRP ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"weight") ) { return hx::Val( weight ); }
		if (HX_FIELD_EQ(inName,"number") ) { return hx::Val( number ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enUsage") ) { return hx::Val( enUsage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"imageFile") ) { return hx::Val( imageFile ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tempCutoff") ) { return hx::Val( tempCutoff ); }
		if (HX_FIELD_EQ(inName,"functional") ) { return hx::Val( functional ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"armorRating") ) { return hx::Val( armorRating ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fabricateInfo") ) { return hx::Val( fabricateInfo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Part_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"desc") ) { desc=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"temp") ) { temp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"make") ) { make=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MSRP") ) { MSRP=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::util::mechanica::Mechanica >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weight") ) { weight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"number") ) { number=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enUsage") ) { enUsage=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"imageFile") ) { imageFile=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tempCutoff") ) { tempCutoff=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"functional") ) { functional=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"armorRating") ) { armorRating=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Part_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("weight","\x78","\x71","\xa6","\x01"));
	outFields->push(HX_HCSTRING("desc","\x51","\x5e","\x66","\x42"));
	outFields->push(HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("tempCutoff","\x61","\xa9","\xa7","\x5b"));
	outFields->push(HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1"));
	outFields->push(HX_HCSTRING("make","\xee","\x39","\x56","\x48"));
	outFields->push(HX_HCSTRING("MSRP","\xa4","\xb0","\x24","\x33"));
	outFields->push(HX_HCSTRING("imageFile","\x77","\x63","\xf0","\x25"));
	outFields->push(HX_HCSTRING("armorRating","\xfc","\xbf","\xc6","\x87"));
	outFields->push(HX_HCSTRING("enUsage","\xf8","\x57","\x96","\xa0"));
	outFields->push(HX_HCSTRING("functional","\x03","\xf6","\xa5","\xce"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Part_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::util::mechanica::Mechanica*/ ,(int)offsetof(Part_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsFloat,(int)offsetof(Part_obj,weight),HX_HCSTRING("weight","\x78","\x71","\xa6","\x01")},
	{hx::fsString,(int)offsetof(Part_obj,desc),HX_HCSTRING("desc","\x51","\x5e","\x66","\x42")},
	{hx::fsFloat,(int)offsetof(Part_obj,temp),HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c")},
	{hx::fsString,(int)offsetof(Part_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(Part_obj,tempCutoff),HX_HCSTRING("tempCutoff","\x61","\xa9","\xa7","\x5b")},
	{hx::fsString,(int)offsetof(Part_obj,number),HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1")},
	{hx::fsString,(int)offsetof(Part_obj,make),HX_HCSTRING("make","\xee","\x39","\x56","\x48")},
	{hx::fsInt,(int)offsetof(Part_obj,MSRP),HX_HCSTRING("MSRP","\xa4","\xb0","\x24","\x33")},
	{hx::fsString,(int)offsetof(Part_obj,imageFile),HX_HCSTRING("imageFile","\x77","\x63","\xf0","\x25")},
	{hx::fsFloat,(int)offsetof(Part_obj,armorRating),HX_HCSTRING("armorRating","\xfc","\xbf","\xc6","\x87")},
	{hx::fsFloat,(int)offsetof(Part_obj,enUsage),HX_HCSTRING("enUsage","\xf8","\x57","\x96","\xa0")},
	{hx::fsBool,(int)offsetof(Part_obj,functional),HX_HCSTRING("functional","\x03","\xf6","\xa5","\xce")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Part_obj_sStaticStorageInfo = 0;
#endif

static ::String Part_obj_sMemberFields[] = {
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("weight","\x78","\x71","\xa6","\x01"),
	HX_HCSTRING("desc","\x51","\x5e","\x66","\x42"),
	HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("tempCutoff","\x61","\xa9","\xa7","\x5b"),
	HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1"),
	HX_HCSTRING("make","\xee","\x39","\x56","\x48"),
	HX_HCSTRING("MSRP","\xa4","\xb0","\x24","\x33"),
	HX_HCSTRING("imageFile","\x77","\x63","\xf0","\x25"),
	HX_HCSTRING("armorRating","\xfc","\xbf","\xc6","\x87"),
	HX_HCSTRING("enUsage","\xf8","\x57","\x96","\xa0"),
	HX_HCSTRING("functional","\x03","\xf6","\xa5","\xce"),
	HX_HCSTRING("fabricateInfo","\xdb","\x03","\x24","\xc9"),
	::String(null()) };

static void Part_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Part_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Part_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Part_obj::__mClass,"__mClass");
};

#endif

hx::Class Part_obj::__mClass;

void Part_obj::__register()
{
	hx::Object *dummy = new Part_obj;
	Part_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.mechanica.Part","\xb0","\xad","\x94","\xdc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Part_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Part_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Part_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Part_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Part_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Part_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace mechanica
