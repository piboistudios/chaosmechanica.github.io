// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_mechanica_ArmUnits
#include <util/mechanica/ArmUnits.h>
#endif
#ifndef INCLUDED_util_mechanica_CarrierUnit
#include <util/mechanica/CarrierUnit.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
#ifndef INCLUDED_util_mechanica_Part
#include <util/mechanica/Part.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aec669ad6c170ed9_82_new,"util.mechanica.ArmUnits","new",0x7b9072a2,"util.mechanica.ArmUnits.new","util/mechanica/Part.hx",82,0x51e4a40c)
namespace util{
namespace mechanica{

void ArmUnits_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_aec669ad6c170ed9_82_new)
HXLINE(  83)		super::__construct(X,Y);
HXLINE(  84)		this->type = HX_("arms",97,92,74,40);
            	}

Dynamic ArmUnits_obj::__CreateEmpty() { return new ArmUnits_obj; }

void *ArmUnits_obj::_hx_vtable = 0;

Dynamic ArmUnits_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArmUnits_obj > _hx_result = new ArmUnits_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ArmUnits_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x293863ee || inClassId==(int)0x2e105115;
		}
	} else {
		if (inClassId<=(int)0x4ae160ee) {
			return inClassId==(int)0x4880bdc9 || inClassId==(int)0x4ae160ee;
		} else {
			return inClassId==(int)0x6706dc1b;
		}
	}
}


hx::ObjectPtr< ArmUnits_obj > ArmUnits_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< ArmUnits_obj > __this = new ArmUnits_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< ArmUnits_obj > ArmUnits_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	ArmUnits_obj *__this = (ArmUnits_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArmUnits_obj), true, "util.mechanica.ArmUnits"));
	*(void **)__this = ArmUnits_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

ArmUnits_obj::ArmUnits_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ArmUnits_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArmUnits_obj_sStaticStorageInfo = 0;
#endif

static void ArmUnits_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArmUnits_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArmUnits_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArmUnits_obj::__mClass,"__mClass");
};

#endif

hx::Class ArmUnits_obj::__mClass;

void ArmUnits_obj::__register()
{
	hx::Object *dummy = new ArmUnits_obj;
	ArmUnits_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.mechanica.ArmUnits","\xb0","\x39","\x3e","\x38");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArmUnits_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArmUnits_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArmUnits_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArmUnits_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArmUnits_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace mechanica
