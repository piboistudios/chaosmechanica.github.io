// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_lib_hxudp_UdpSocket
#include <lib/hxudp/UdpSocket.h>
#endif
#ifndef INCLUDED_util_control_Controller
#include <util/control/Controller.h>
#endif
#ifndef INCLUDED_util_control_TestNetworkController
#include <util/control/TestNetworkController.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb9588441d5f9a84_4_new,"util.control.TestNetworkController","new",0xf4488d4d,"util.control.TestNetworkController.new","util/control/TestNetworkController.hx",4,0xe8de39c5)
HX_LOCAL_STACK_FRAME(_hx_pos_fb9588441d5f9a84_7_populateBuffer,"util.control.TestNetworkController","populateBuffer",0x53d73bbd,"util.control.TestNetworkController.populateBuffer","util/control/TestNetworkController.hx",7,0xe8de39c5)
namespace util{
namespace control{

void TestNetworkController_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_fb9588441d5f9a84_4_new)
HXDLIN(   4)		super::__construct();
            	}

Dynamic TestNetworkController_obj::__CreateEmpty() { return new TestNetworkController_obj; }

void *TestNetworkController_obj::_hx_vtable = 0;

Dynamic TestNetworkController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestNetworkController_obj > _hx_result = new TestNetworkController_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestNetworkController_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x14f75cc1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x14f75cc1;
	} else {
		return inClassId==(int)0x2ccfcf73;
	}
}

void TestNetworkController_obj::populateBuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_fb9588441d5f9a84_7_populateBuffer)
HXLINE(   8)		this->super::populateBuffer();
HXLINE(   9)		if (::Global_obj::server) {
HXLINE(  11)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)80);
HXLINE(  12)			int dataLen = ::Global_obj::socket->receive(bytes);
HXLINE(  14)			::String inputStream =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,bytes,null(),null())->readString(dataLen);
HXLINE(  16)			::Array< ::Dynamic> _hx_tmp = this->buffer;
HXDLIN(  16)			_hx_tmp->push(::Xml_obj::parse(inputStream)->firstElement());
            		}
            	}



hx::ObjectPtr< TestNetworkController_obj > TestNetworkController_obj::__new() {
	hx::ObjectPtr< TestNetworkController_obj > __this = new TestNetworkController_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TestNetworkController_obj > TestNetworkController_obj::__alloc(hx::Ctx *_hx_ctx) {
	TestNetworkController_obj *__this = (TestNetworkController_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TestNetworkController_obj), true, "util.control.TestNetworkController"));
	*(void **)__this = TestNetworkController_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TestNetworkController_obj::TestNetworkController_obj()
{
}

hx::Val TestNetworkController_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"populateBuffer") ) { return hx::Val( populateBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestNetworkController_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestNetworkController_obj_sStaticStorageInfo = 0;
#endif

static ::String TestNetworkController_obj_sMemberFields[] = {
	HX_HCSTRING("populateBuffer","\x8a","\xfb","\x91","\x78"),
	::String(null()) };

static void TestNetworkController_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestNetworkController_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestNetworkController_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestNetworkController_obj::__mClass,"__mClass");
};

#endif

hx::Class TestNetworkController_obj::__mClass;

void TestNetworkController_obj::__register()
{
	hx::Object *dummy = new TestNetworkController_obj;
	TestNetworkController_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.control.TestNetworkController","\xdb","\xe2","\xb2","\xec");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestNetworkController_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestNetworkController_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestNetworkController_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestNetworkController_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestNetworkController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestNetworkController_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace control
