// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxVirtualPad
#include <flixel/ui/FlxVirtualPad.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_control_Controller
#include <util/control/Controller.h>
#endif
#ifndef INCLUDED_util_control_PlayerController
#include <util/control/PlayerController.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d5253f7ba6304495_6_new,"util.control.PlayerController","new",0x5669038c,"util.control.PlayerController.new","util/control/PlayerController.hx",6,0x6d7431a2)
HX_LOCAL_STACK_FRAME(_hx_pos_d5253f7ba6304495_25_populateBuffer,"util.control.PlayerController","populateBuffer",0x505a7fde,"util.control.PlayerController.populateBuffer","util/control/PlayerController.hx",25,0x6d7431a2)
static const int _hx_array_data_31ad8d9a_2[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_31ad8d9a_3[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_31ad8d9a_4[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_31ad8d9a_5[] = {
	(int)39,(int)68,
};
static const int _hx_array_data_31ad8d9a_6[] = {
	(int)32,(int)70,
};
static const int _hx_array_data_31ad8d9a_7[] = {
	(int)90,(int)74,
};
static const int _hx_array_data_31ad8d9a_8[] = {
	(int)75,(int)88,
};
static const int _hx_array_data_31ad8d9a_9[] = {
	(int)76,(int)67,
};
namespace util{
namespace control{

void PlayerController_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d5253f7ba6304495_6_new)
HXLINE(  18)		this->PRESSED = (int)2;
HXLINE(  15)		this->fire2Input = false;
HXLINE(  14)		this->fire1Input = false;
HXLINE(  13)		this->strafeInput = false;
HXLINE(  12)		this->boostInput = false;
HXLINE(  11)		this->rightInput = false;
HXLINE(  10)		this->leftInput = false;
HXLINE(   9)		this->upInput = false;
HXLINE(   8)		this->downInput = false;
HXLINE(  21)		super::__construct();
            	}

Dynamic PlayerController_obj::__CreateEmpty() { return new PlayerController_obj; }

void *PlayerController_obj::_hx_vtable = 0;

Dynamic PlayerController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayerController_obj > _hx_result = new PlayerController_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayerController_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2ccfcf73) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2ccfcf73;
	} else {
		return inClassId==(int)0x7fe98e1c;
	}
}

void PlayerController_obj::populateBuffer(){
            	HX_STACKFRAME(&_hx_pos_d5253f7ba6304495_25_populateBuffer)
HXLINE(  26)		this->super::populateBuffer();
HXLINE(  29)		this->upInput = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_2,2),(int)1);
HXLINE(  30)		this->downInput = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_3,2),(int)1);
HXLINE(  31)		this->leftInput = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_4,2),(int)1);
HXLINE(  32)		this->rightInput = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_5,2),(int)1);
HXLINE(  33)		this->boostInput = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_6,2),(int)1);
HXLINE(  34)		this->strafeInput = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_7,2),(int)1);
HXLINE(  35)		this->fire1Input = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_8,2),(int)1);
HXLINE(  36)		this->fire2Input = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_31ad8d9a_9,2),(int)1);
HXLINE(  41)		if (this->strafeInput) {
HXLINE(  41)			this->bufferAction(HX_("strafe",cf,0f,2a,11),null(),null());
            		}
HXLINE(  42)		if (this->fire1Input) {
HXLINE(  44)			this->bufferAction(HX_("fire1",bb,6b,9d,00),null(),null());
            		}
HXLINE(  46)		if (this->fire2Input) {
HXLINE(  48)			this->bufferAction(HX_("fire2",bc,6b,9d,00),null(),null());
            		}
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		if (this->upInput) {
HXLINE(  50)			_hx_tmp = this->downInput;
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  51)			this->upInput = (this->downInput = false);
            		}
HXLINE(  53)		bool _hx_tmp1;
HXDLIN(  53)		if (this->leftInput) {
HXLINE(  53)			_hx_tmp1 = this->rightInput;
            		}
            		else {
HXLINE(  53)			_hx_tmp1 = false;
            		}
HXDLIN(  53)		if (_hx_tmp1) {
HXLINE(  54)			this->leftInput = (this->rightInput = false);
            		}
HXLINE(  58)		bool _hx_tmp2;
HXDLIN(  58)		bool _hx_tmp3;
HXDLIN(  58)		bool _hx_tmp4;
HXDLIN(  58)		if (!(this->upInput)) {
HXLINE(  58)			_hx_tmp4 = this->downInput;
            		}
            		else {
HXLINE(  58)			_hx_tmp4 = true;
            		}
HXDLIN(  58)		if (!(_hx_tmp4)) {
HXLINE(  58)			_hx_tmp3 = this->leftInput;
            		}
            		else {
HXLINE(  58)			_hx_tmp3 = true;
            		}
HXDLIN(  58)		if (!(_hx_tmp3)) {
HXLINE(  58)			_hx_tmp2 = this->rightInput;
            		}
            		else {
HXLINE(  58)			_hx_tmp2 = true;
            		}
HXDLIN(  58)		if (_hx_tmp2) {
HXLINE(  60)			if (this->upInput) {
HXLINE(  60)				this->bufferAction(HX_("locomote",c2,a0,46,f0),HX_("direction",3f,62,40,10),HX_("-1",64,27,00,00))->set(HX_("axis",a1,1c,79,40),HX_("y",79,00,00,00));
            			}
            			else {
HXLINE(  61)				if (this->downInput) {
HXLINE(  61)					this->bufferAction(HX_("locomote",c2,a0,46,f0),HX_("direction",3f,62,40,10),HX_("1",31,00,00,00))->set(HX_("axis",a1,1c,79,40),HX_("y",79,00,00,00));
            				}
            			}
HXLINE(  62)			if (this->strafeInput) {
HXLINE(  64)				if (this->leftInput) {
HXLINE(  64)					this->bufferAction(HX_("locomote",c2,a0,46,f0),HX_("direction",3f,62,40,10),HX_("-1",64,27,00,00))->set(HX_("axis",a1,1c,79,40),HX_("x",78,00,00,00));
            				}
HXLINE(  65)				if (this->rightInput) {
HXLINE(  65)					this->bufferAction(HX_("locomote",c2,a0,46,f0),HX_("direction",3f,62,40,10),HX_("1",31,00,00,00))->set(HX_("axis",a1,1c,79,40),HX_("x",78,00,00,00));
            				}
            			}
            			else {
HXLINE(  70)				if (this->leftInput) {
HXLINE(  70)					this->bufferAction(HX_("steer",11,72,0e,84),HX_("direction",3f,62,40,10),HX_("-1",64,27,00,00));
            				}
            				else {
HXLINE(  71)					if (this->rightInput) {
HXLINE(  71)						this->bufferAction(HX_("steer",11,72,0e,84),HX_("direction",3f,62,40,10),HX_("1",31,00,00,00));
            					}
            				}
            			}
            		}
            		else {
HXLINE(  78)			this->bufferAction(HX_("locomote",c2,a0,46,f0),HX_("direction",3f,62,40,10),HX_("0",30,00,00,00));
HXLINE(  79)			this->bufferAction(HX_("steer",11,72,0e,84),HX_("direction",3f,62,40,10),HX_("0",30,00,00,00));
HXLINE(  80)			this->bufferAction(HX_("boost",23,27,f8,b6),HX_("mode",63,d3,60,48),HX_("shutoff",bb,11,25,ee));
            		}
HXLINE(  82)		if (this->boostInput) {
HXLINE(  82)			this->bufferAction(HX_("boost",23,27,f8,b6),HX_("mode",63,d3,60,48),HX_("fire",b6,d3,bb,43));
            		}
            		else {
HXLINE(  83)			this->bufferAction(HX_("boost",23,27,f8,b6),HX_("mode",63,d3,60,48),HX_("shutoff",bb,11,25,ee));
            		}
            	}



hx::ObjectPtr< PlayerController_obj > PlayerController_obj::__new() {
	hx::ObjectPtr< PlayerController_obj > __this = new PlayerController_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< PlayerController_obj > PlayerController_obj::__alloc(hx::Ctx *_hx_ctx) {
	PlayerController_obj *__this = (PlayerController_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayerController_obj), true, "util.control.PlayerController"));
	*(void **)__this = PlayerController_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlayerController_obj::PlayerController_obj()
{
}

void PlayerController_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayerController);
	HX_MARK_MEMBER_NAME(downInput,"downInput");
	HX_MARK_MEMBER_NAME(upInput,"upInput");
	HX_MARK_MEMBER_NAME(leftInput,"leftInput");
	HX_MARK_MEMBER_NAME(rightInput,"rightInput");
	HX_MARK_MEMBER_NAME(boostInput,"boostInput");
	HX_MARK_MEMBER_NAME(strafeInput,"strafeInput");
	HX_MARK_MEMBER_NAME(fire1Input,"fire1Input");
	HX_MARK_MEMBER_NAME(fire2Input,"fire2Input");
	HX_MARK_MEMBER_NAME(virtualPad,"virtualPad");
	HX_MARK_MEMBER_NAME(PRESSED,"PRESSED");
	 ::util::control::Controller_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayerController_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(downInput,"downInput");
	HX_VISIT_MEMBER_NAME(upInput,"upInput");
	HX_VISIT_MEMBER_NAME(leftInput,"leftInput");
	HX_VISIT_MEMBER_NAME(rightInput,"rightInput");
	HX_VISIT_MEMBER_NAME(boostInput,"boostInput");
	HX_VISIT_MEMBER_NAME(strafeInput,"strafeInput");
	HX_VISIT_MEMBER_NAME(fire1Input,"fire1Input");
	HX_VISIT_MEMBER_NAME(fire2Input,"fire2Input");
	HX_VISIT_MEMBER_NAME(virtualPad,"virtualPad");
	HX_VISIT_MEMBER_NAME(PRESSED,"PRESSED");
	 ::util::control::Controller_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayerController_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"upInput") ) { return hx::Val( upInput ); }
		if (HX_FIELD_EQ(inName,"PRESSED") ) { return hx::Val( PRESSED ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downInput") ) { return hx::Val( downInput ); }
		if (HX_FIELD_EQ(inName,"leftInput") ) { return hx::Val( leftInput ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightInput") ) { return hx::Val( rightInput ); }
		if (HX_FIELD_EQ(inName,"boostInput") ) { return hx::Val( boostInput ); }
		if (HX_FIELD_EQ(inName,"fire1Input") ) { return hx::Val( fire1Input ); }
		if (HX_FIELD_EQ(inName,"fire2Input") ) { return hx::Val( fire2Input ); }
		if (HX_FIELD_EQ(inName,"virtualPad") ) { return hx::Val( virtualPad ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strafeInput") ) { return hx::Val( strafeInput ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"populateBuffer") ) { return hx::Val( populateBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayerController_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"upInput") ) { upInput=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"PRESSED") ) { PRESSED=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downInput") ) { downInput=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftInput") ) { leftInput=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightInput") ) { rightInput=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boostInput") ) { boostInput=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fire1Input") ) { fire1Input=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fire2Input") ) { fire2Input=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"virtualPad") ) { virtualPad=inValue.Cast<  ::flixel::ui::FlxVirtualPad >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strafeInput") ) { strafeInput=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayerController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("downInput","\x48","\x98","\x33","\xd4"));
	outFields->push(HX_HCSTRING("upInput","\xaf","\xe3","\x92","\x1a"));
	outFields->push(HX_HCSTRING("leftInput","\x83","\xb2","\xfd","\xd2"));
	outFields->push(HX_HCSTRING("rightInput","\x8e","\xaa","\xe2","\xc0"));
	outFields->push(HX_HCSTRING("boostInput","\xe7","\x4d","\xe3","\x40"));
	outFields->push(HX_HCSTRING("strafeInput","\xbb","\x75","\x2a","\xe6"));
	outFields->push(HX_HCSTRING("fire1Input","\x4f","\x62","\xe6","\xeb"));
	outFields->push(HX_HCSTRING("fire2Input","\xae","\xbe","\x41","\x52"));
	outFields->push(HX_HCSTRING("virtualPad","\x08","\x84","\xc7","\x60"));
	outFields->push(HX_HCSTRING("PRESSED","\x82","\xa6","\xba","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayerController_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(PlayerController_obj,downInput),HX_HCSTRING("downInput","\x48","\x98","\x33","\xd4")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,upInput),HX_HCSTRING("upInput","\xaf","\xe3","\x92","\x1a")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,leftInput),HX_HCSTRING("leftInput","\x83","\xb2","\xfd","\xd2")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,rightInput),HX_HCSTRING("rightInput","\x8e","\xaa","\xe2","\xc0")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,boostInput),HX_HCSTRING("boostInput","\xe7","\x4d","\xe3","\x40")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,strafeInput),HX_HCSTRING("strafeInput","\xbb","\x75","\x2a","\xe6")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,fire1Input),HX_HCSTRING("fire1Input","\x4f","\x62","\xe6","\xeb")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,fire2Input),HX_HCSTRING("fire2Input","\xae","\xbe","\x41","\x52")},
	{hx::fsObject /*::flixel::ui::FlxVirtualPad*/ ,(int)offsetof(PlayerController_obj,virtualPad),HX_HCSTRING("virtualPad","\x08","\x84","\xc7","\x60")},
	{hx::fsInt,(int)offsetof(PlayerController_obj,PRESSED),HX_HCSTRING("PRESSED","\x82","\xa6","\xba","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayerController_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayerController_obj_sMemberFields[] = {
	HX_HCSTRING("downInput","\x48","\x98","\x33","\xd4"),
	HX_HCSTRING("upInput","\xaf","\xe3","\x92","\x1a"),
	HX_HCSTRING("leftInput","\x83","\xb2","\xfd","\xd2"),
	HX_HCSTRING("rightInput","\x8e","\xaa","\xe2","\xc0"),
	HX_HCSTRING("boostInput","\xe7","\x4d","\xe3","\x40"),
	HX_HCSTRING("strafeInput","\xbb","\x75","\x2a","\xe6"),
	HX_HCSTRING("fire1Input","\x4f","\x62","\xe6","\xeb"),
	HX_HCSTRING("fire2Input","\xae","\xbe","\x41","\x52"),
	HX_HCSTRING("virtualPad","\x08","\x84","\xc7","\x60"),
	HX_HCSTRING("PRESSED","\x82","\xa6","\xba","\xb9"),
	HX_HCSTRING("populateBuffer","\x8a","\xfb","\x91","\x78"),
	::String(null()) };

static void PlayerController_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayerController_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayerController_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayerController_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayerController_obj::__mClass;

void PlayerController_obj::__register()
{
	hx::Object *dummy = new PlayerController_obj;
	PlayerController_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.control.PlayerController","\x9a","\x8d","\xad","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayerController_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayerController_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayerController_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayerController_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayerController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayerController_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace control
