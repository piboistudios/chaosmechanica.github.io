// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_util_control_Controller
#include <util/control/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bda06cece05dd168_8_new,"util.control.Controller","new",0xb8b9608b,"util.control.Controller.new","util/control/Controller.hx",8,0x0fd8d703)
HX_LOCAL_STACK_FRAME(_hx_pos_bda06cece05dd168_12_initializeBuffer,"util.control.Controller","initializeBuffer",0xa911af65,"util.control.Controller.initializeBuffer","util/control/Controller.hx",12,0x0fd8d703)
HX_LOCAL_STACK_FRAME(_hx_pos_bda06cece05dd168_15_getBuffer,"util.control.Controller","getBuffer",0xedf7c8a1,"util.control.Controller.getBuffer","util/control/Controller.hx",15,0x0fd8d703)
HX_LOCAL_STACK_FRAME(_hx_pos_bda06cece05dd168_20_bufferAction,"util.control.Controller","bufferAction",0xde05bf4b,"util.control.Controller.bufferAction","util/control/Controller.hx",20,0x0fd8d703)
HX_LOCAL_STACK_FRAME(_hx_pos_bda06cece05dd168_32_populateBuffer,"util.control.Controller","populateBuffer",0xb91dd53f,"util.control.Controller.populateBuffer","util/control/Controller.hx",32,0x0fd8d703)
namespace util{
namespace control{

void Controller_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bda06cece05dd168_8_new)
HXDLIN(   8)		this->initializeBuffer();
            	}

Dynamic Controller_obj::__CreateEmpty() { return new Controller_obj; }

void *Controller_obj::_hx_vtable = 0;

Dynamic Controller_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Controller_obj > _hx_result = new Controller_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Controller_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ccfcf73;
}

void Controller_obj::initializeBuffer(){
            	HX_STACKFRAME(&_hx_pos_bda06cece05dd168_12_initializeBuffer)
HXDLIN(  12)		this->buffer = ::Array_obj< ::Dynamic>::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controller_obj,initializeBuffer,(void))

::Array< ::Dynamic> Controller_obj::getBuffer(){
            	HX_STACKFRAME(&_hx_pos_bda06cece05dd168_15_getBuffer)
HXLINE(  16)		this->populateBuffer();
HXLINE(  17)		return this->buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controller_obj,getBuffer,return )

 ::Xml Controller_obj::bufferAction(::String value1,::String value2,::String value3){
            	HX_STACKFRAME(&_hx_pos_bda06cece05dd168_20_bufferAction)
HXLINE(  21)		 ::Xml xml = ::Xml_obj::createElement(HX_("mechanica_input",68,5e,2d,80));
HXLINE(  22)		xml->set(HX_("action",b6,3b,46,16),value1);
HXLINE(  23)		bool _hx_tmp;
HXDLIN(  23)		if (hx::IsNotNull( value3 )) {
HXLINE(  23)			_hx_tmp = hx::IsNotNull( value2 );
            		}
            		else {
HXLINE(  23)			_hx_tmp = false;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  23)			xml->set(value2,value3);
            		}
HXLINE(  25)		this->buffer->push(xml);
HXLINE(  27)		return xml;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controller_obj,bufferAction,return )

void Controller_obj::populateBuffer(){
            	HX_STACKFRAME(&_hx_pos_bda06cece05dd168_32_populateBuffer)
HXDLIN(  32)		this->initializeBuffer();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controller_obj,populateBuffer,(void))


hx::ObjectPtr< Controller_obj > Controller_obj::__new() {
	hx::ObjectPtr< Controller_obj > __this = new Controller_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Controller_obj > Controller_obj::__alloc(hx::Ctx *_hx_ctx) {
	Controller_obj *__this = (Controller_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Controller_obj), true, "util.control.Controller"));
	*(void **)__this = Controller_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Controller_obj::Controller_obj()
{
}

void Controller_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controller);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_END_CLASS();
}

void Controller_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
}

hx::Val Controller_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getBuffer") ) { return hx::Val( getBuffer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bufferAction") ) { return hx::Val( bufferAction_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"populateBuffer") ) { return hx::Val( populateBuffer_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initializeBuffer") ) { return hx::Val( initializeBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Controller_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controller_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Controller_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Controller_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Controller_obj_sStaticStorageInfo = 0;
#endif

static ::String Controller_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("initializeBuffer","\x70","\x3e","\x94","\x4a"),
	HX_HCSTRING("getBuffer","\x36","\x46","\xeb","\x4c"),
	HX_HCSTRING("bufferAction","\xd6","\x2c","\x1b","\x1b"),
	HX_HCSTRING("populateBuffer","\x8a","\xfb","\x91","\x78"),
	::String(null()) };

static void Controller_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Controller_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Controller_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Controller_obj::__mClass,"__mClass");
};

#endif

hx::Class Controller_obj::__mClass;

void Controller_obj::__register()
{
	hx::Object *dummy = new Controller_obj;
	Controller_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("util.control.Controller","\x19","\xbf","\xad","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Controller_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Controller_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Controller_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Controller_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controller_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controller_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace control
