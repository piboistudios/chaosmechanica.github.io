// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_cdb_Index
#include <cdb/Index.h>
#endif
#ifndef INCLUDED_cdb_IndexId
#include <cdb/IndexId.h>
#endif
#ifndef INCLUDED_dat_Data
#include <dat/Data.h>
#endif
#ifndef INCLUDED_dat__Data_Part_Impl_
#include <dat/_Data/Part_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_util_control_Controller
#include <util/control/Controller.h>
#endif
#ifndef INCLUDED_util_control_PlayerController
#include <util/control/PlayerController.h>
#endif
#ifndef INCLUDED_util_mechanica_Mechanica
#include <util/mechanica/Mechanica.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_10_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",10,0xa27fc9dd)
static const ::String _hx_array_data_6c4d5f81_2[] = {
	HX_("standardBrainCase",89,59,7d,f2),HX_("standardLocomote",1f,99,85,0d),HX_("standardKernel",da,8c,83,89),HX_("standardThruster",62,d5,bf,2b),HX_("standardPistol",94,79,94,d7),HX_("standardRifle",8b,28,b6,a3),HX_("standardCarrier",3b,68,26,e6),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_34_setMechanica,"Player","setMechanica",0x6e3f8068,"Player.setMechanica","Player.hx",34,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_47_getMechanica,"Player","getMechanica",0x59465cf4,"Player.getMechanica","Player.hx",47,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_50_addPart,"Player","addPart",0xb089f0c7,"Player.addPart","Player.hx",50,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_62_removePart,"Player","removePart",0x275fa224,"Player.removePart","Player.hx",62,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_75_getPartsOfType,"Player","getPartsOfType",0x4ca93608,"Player.getPartsOfType","Player.hx",75,0xa27fc9dd)

void Player_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_10_new)
HXLINE(  15)		this->current = (int)0;
HXLINE(  19)		::Array< ::String > pList = ::Array_obj< ::String >::fromData( _hx_array_data_6c4d5f81_2,7);
HXLINE(  22)		this->controller =  ::util::control::PlayerController_obj::__alloc( HX_CTX );
HXLINE(  23)		this->mechanica = ::Array_obj< ::Dynamic>::__new();
HXLINE(  24)		this->setMechanica((int)1);
HXLINE(  25)		this->partList = ::Array_obj< ::Dynamic>::__new();
HXLINE(  26)		{
HXLINE(  26)			int _g1 = (int)0;
HXDLIN(  26)			int _g = pList->length;
HXDLIN(  26)			while((_g1 < _g)){
HXLINE(  26)				_g1 = (_g1 + (int)1);
HXDLIN(  26)				int i = (_g1 - (int)1);
HXLINE(  29)				this->addPart(pList->__get(i));
            			}
            		}
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c4d5f81;
}

bool Player_obj::setMechanica(int slot){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_34_setMechanica)
HXLINE(  35)		if ((slot > (int)3)) {
HXLINE(  35)			return false;
            		}
HXLINE(  36)		slot = (slot - (int)1);
HXLINE(  37)		this->current = slot;
HXLINE(  38)		if (hx::IsNull( this->mechanica->__get(this->current).StaticCast<  ::util::mechanica::Mechanica >() )) {
HXLINE(  40)			::Array< ::Dynamic> _hx_tmp = this->mechanica;
HXDLIN(  40)			int _hx_tmp1 = this->current;
HXDLIN(  40)			_hx_tmp[_hx_tmp1] =  ::util::mechanica::Mechanica_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  41)			this->mechanica->__get(this->current).StaticCast<  ::util::mechanica::Mechanica >()->loadGraphic(HX_("assets/images/misc/blank.png",57,37,0e,60),null(),null(),null(),null(),null());
            		}
HXLINE(  43)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setMechanica,return )

 ::util::mechanica::Mechanica Player_obj::getMechanica(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_47_getMechanica)
HXDLIN(  47)		return this->mechanica->__get(this->current).StaticCast<  ::util::mechanica::Mechanica >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getMechanica,return )

bool Player_obj::addPart(::String _part){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_50_addPart)
HXLINE(  53)		if (::Global_obj::partExists(_part)) {
HXLINE(  56)			::Array< ::Dynamic> _hx_tmp = this->partList;
HXDLIN(  56)			_hx_tmp->push( ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,_part, ::Dynamic(::dat::Data_obj::part->resolve(_part,null())->__Field(HX_("desc",51,5e,66,42),hx::paccDynamic))));
HXLINE(  57)			return true;
            		}
HXLINE(  59)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,addPart,return )

bool Player_obj::removePart(::String _part){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_62_removePart)
HXLINE(  64)		{
HXLINE(  64)			int _g1 = (int)0;
HXDLIN(  64)			int _g = this->partList->length;
HXDLIN(  64)			while((_g1 < _g)){
HXLINE(  64)				_g1 = (_g1 + (int)1);
HXDLIN(  64)				int i = (_g1 - (int)1);
HXLINE(  66)				bool _hx_tmp;
HXDLIN(  66)				bool _hx_tmp1;
HXDLIN(  66)				if ((this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >()->name != _part)) {
HXLINE(  66)					_hx_tmp1 = (this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >()->label == _part);
            				}
            				else {
HXLINE(  66)					_hx_tmp1 = true;
            				}
HXDLIN(  66)				if (!(_hx_tmp1)) {
HXLINE(  66)					::String _hx_tmp2 = _part.substr((int)0,(int)15);
HXDLIN(  66)					_hx_tmp = (_hx_tmp2 == this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >()->label);
            				}
            				else {
HXLINE(  66)					_hx_tmp = true;
            				}
HXDLIN(  66)				if (_hx_tmp) {
HXLINE(  68)					::Array< ::Dynamic> _hx_tmp3 = this->partList;
HXDLIN(  68)					_hx_tmp3->remove(this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >());
HXLINE(  69)					return true;
            				}
            			}
            		}
HXLINE(  72)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,removePart,return )

::Array< ::Dynamic> Player_obj::getPartsOfType(int type){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_75_getPartsOfType)
HXLINE(  76)		::Array< ::Dynamic> returnList = ::Array_obj< ::Dynamic>::__new();
HXLINE(  77)		{
HXLINE(  77)			int _g1 = (int)0;
HXDLIN(  77)			int _g = this->partList->length;
HXDLIN(  77)			while((_g1 < _g)){
HXLINE(  77)				_g1 = (_g1 + (int)1);
HXDLIN(  77)				int i = (_g1 - (int)1);
HXLINE(  80)				 ::Dynamic part = ::dat::Data_obj::part->resolve(this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >()->name,null());
HXLINE(  81)				int partType = ( (int)(::dat::_Data::Part_Impl__obj::get_categoricalData(part)->__Field(HX_("partType",4d,78,c0,5e),hx::paccDynamic)) );
HXLINE(  82)				if ((partType == type)) {
HXLINE(  84)					returnList->push( ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >()->name,this->partList->__get(i).StaticCast<  ::flixel::addons::ui::StrNameLabel >()->label));
            				}
            			}
            		}
HXLINE(  87)		return returnList;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,getPartsOfType,return )


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(controller,"controller");
	HX_MARK_MEMBER_NAME(partList,"partList");
	HX_MARK_MEMBER_NAME(mechanica,"mechanica");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(controller,"controller");
	HX_VISIT_MEMBER_NAME(partList,"partList");
	HX_VISIT_MEMBER_NAME(mechanica,"mechanica");
	HX_VISIT_MEMBER_NAME(current,"current");
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current ); }
		if (HX_FIELD_EQ(inName,"addPart") ) { return hx::Val( addPart_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"partList") ) { return hx::Val( partList ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mechanica") ) { return hx::Val( mechanica ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"controller") ) { return hx::Val( controller ); }
		if (HX_FIELD_EQ(inName,"removePart") ) { return hx::Val( removePart_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setMechanica") ) { return hx::Val( setMechanica_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMechanica") ) { return hx::Val( getMechanica_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getPartsOfType") ) { return hx::Val( getPartsOfType_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"partList") ) { partList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mechanica") ) { mechanica=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"controller") ) { controller=inValue.Cast<  ::util::control::PlayerController >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("controller","\x9c","\x98","\xbe","\x04"));
	outFields->push(HX_HCSTRING("partList","\xf1","\xa1","\x6a","\x59"));
	outFields->push(HX_HCSTRING("mechanica","\x5d","\xef","\x7e","\x2e"));
	outFields->push(HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::util::control::PlayerController*/ ,(int)offsetof(Player_obj,controller),HX_HCSTRING("controller","\x9c","\x98","\xbe","\x04")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Player_obj,partList),HX_HCSTRING("partList","\xf1","\xa1","\x6a","\x59")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Player_obj,mechanica),HX_HCSTRING("mechanica","\x5d","\xef","\x7e","\x2e")},
	{hx::fsInt,(int)offsetof(Player_obj,current),HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("controller","\x9c","\x98","\xbe","\x04"),
	HX_HCSTRING("partList","\xf1","\xa1","\x6a","\x59"),
	HX_HCSTRING("mechanica","\x5d","\xef","\x7e","\x2e"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("setMechanica","\x5b","\xaf","\xce","\x52"),
	HX_HCSTRING("getMechanica","\xe7","\x8b","\xd5","\x3d"),
	HX_HCSTRING("addPart","\xb4","\x26","\x8f","\x86"),
	HX_HCSTRING("removePart","\x57","\x1e","\x71","\xc7"),
	HX_HCSTRING("getPartsOfType","\xbb","\x47","\x98","\xd6"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

