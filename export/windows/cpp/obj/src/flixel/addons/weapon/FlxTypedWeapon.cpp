// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxBullet
#include <flixel/addons/weapon/FlxBullet.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxTypedWeapon
#include <flixel/addons/weapon/FlxTypedWeapon.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxWeaponFireFrom
#include <flixel/addons/weapon/FlxWeaponFireFrom.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxWeaponFireMode
#include <flixel/addons/weapon/FlxWeaponFireMode.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxWeaponSpeedMode
#include <flixel/addons/weapon/FlxWeaponSpeedMode.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxAngle
#include <flixel/math/FlxAngle.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVelocity
#include <flixel/math/FlxVelocity.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxBounds
#include <flixel/util/helpers/FlxBounds.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_41_new,"flixel.addons.weapon.FlxTypedWeapon","new",0x5d75ec0f,"flixel.addons.weapon.FlxTypedWeapon.new","flixel/addons/weapon/FlxWeapon.hx",41,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_201_runFire,"flixel.addons.weapon.FlxTypedWeapon","runFire",0xfbe407d0,"flixel.addons.weapon.FlxTypedWeapon.runFire","flixel/addons/weapon/FlxWeapon.hx",201,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_179_runFire,"flixel.addons.weapon.FlxTypedWeapon","runFire",0xfbe407d0,"flixel.addons.weapon.FlxTypedWeapon.runFire","flixel/addons/weapon/FlxWeapon.hx",179,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_300_rotatePoints,"flixel.addons.weapon.FlxTypedWeapon","rotatePoints",0xf1a6f94f,"flixel.addons.weapon.FlxTypedWeapon.rotatePoints","flixel/addons/weapon/FlxWeapon.hx",300,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_319_fireFromParentFacing,"flixel.addons.weapon.FlxTypedWeapon","fireFromParentFacing",0x3c1f27b5,"flixel.addons.weapon.FlxTypedWeapon.fireFromParentFacing","flixel/addons/weapon/FlxWeapon.hx",319,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_330_fireAtMouse,"flixel.addons.weapon.FlxTypedWeapon","fireAtMouse",0x3fb919cb,"flixel.addons.weapon.FlxTypedWeapon.fireAtMouse","flixel/addons/weapon/FlxWeapon.hx",330,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_360_fireAtPosition,"flixel.addons.weapon.FlxTypedWeapon","fireAtPosition",0xcd83e8c3,"flixel.addons.weapon.FlxTypedWeapon.fireAtPosition","flixel/addons/weapon/FlxWeapon.hx",360,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_371_fireAtTarget,"flixel.addons.weapon.FlxTypedWeapon","fireAtTarget",0x3d1c20eb,"flixel.addons.weapon.FlxTypedWeapon.fireAtTarget","flixel/addons/weapon/FlxWeapon.hx",371,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_382_fireFromAngle,"flixel.addons.weapon.FlxTypedWeapon","fireFromAngle",0xe4de3fe2,"flixel.addons.weapon.FlxTypedWeapon.fireFromAngle","flixel/addons/weapon/FlxWeapon.hx",382,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_392_fireFromParentAngle,"flixel.addons.weapon.FlxTypedWeapon","fireFromParentAngle",0x347fa798,"flixel.addons.weapon.FlxTypedWeapon.fireFromParentAngle","flixel/addons/weapon/FlxWeapon.hx",392,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_402_setPreFireCallback,"flixel.addons.weapon.FlxTypedWeapon","setPreFireCallback",0xf3bdd80d,"flixel.addons.weapon.FlxTypedWeapon.setPreFireCallback","flixel/addons/weapon/FlxWeapon.hx",402,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_414_setPostFireCallback,"flixel.addons.weapon.FlxTypedWeapon","setPostFireCallback",0x49abb58c,"flixel.addons.weapon.FlxTypedWeapon.setPostFireCallback","flixel/addons/weapon/FlxWeapon.hx",414,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_428_bulletsOverlap,"flixel.addons.weapon.FlxTypedWeapon","bulletsOverlap",0x91440847,"flixel.addons.weapon.FlxTypedWeapon.bulletsOverlap","flixel/addons/weapon/FlxWeapon.hx",428,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_436_shouldBulletHit,"flixel.addons.weapon.FlxTypedWeapon","shouldBulletHit",0x018740ad,"flixel.addons.weapon.FlxTypedWeapon.shouldBulletHit","flixel/addons/weapon/FlxWeapon.hx",436,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_454_onBulletHit,"flixel.addons.weapon.FlxTypedWeapon","onBulletHit",0x2cec86c1,"flixel.addons.weapon.FlxTypedWeapon.onBulletHit","flixel/addons/weapon/FlxWeapon.hx",454,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_458_internalFireAtPoint,"flixel.addons.weapon.FlxTypedWeapon","internalFireAtPoint",0x71d12eb9,"flixel.addons.weapon.FlxTypedWeapon.internalFireAtPoint","flixel/addons/weapon/FlxWeapon.hx",458,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_482_internalFireFromAngle,"flixel.addons.weapon.FlxTypedWeapon","internalFireFromAngle",0x4c292d65,"flixel.addons.weapon.FlxTypedWeapon.internalFireFromAngle","flixel/addons/weapon/FlxWeapon.hx",482,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_508_set_fireFrom,"flixel.addons.weapon.FlxTypedWeapon","set_fireFrom",0xc968062e,"flixel.addons.weapon.FlxTypedWeapon.set_fireFrom","flixel/addons/weapon/FlxWeapon.hx",508,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_44_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",44,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_45_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",45,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_46_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",46,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_47_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",47,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_48_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",48,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_49_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",49,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_50_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",50,0x017a22ba)
HX_LOCAL_STACK_FRAME(_hx_pos_677dead5a8b2c2ec_51_boot,"flixel.addons.weapon.FlxTypedWeapon","boot",0x61d1a1a3,"flixel.addons.weapon.FlxTypedWeapon.boot","flixel/addons/weapon/FlxWeapon.hx",51,0x017a22ba)
namespace flixel{
namespace addons{
namespace weapon{

void FlxTypedWeapon_obj::__construct(::String name, ::Dynamic bulletFactory, ::flixel::addons::weapon::FlxWeaponFireFrom fireFrom, ::flixel::addons::weapon::FlxWeaponSpeedMode speedMode){
            	HX_GC_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_41_new)
HXLINE( 144)		this->angleOffset = ((Float)0);
HXLINE( 137)		this->lastFired = (int)0;
HXLINE( 117)		this->rotateBulletTowardsTarget = false;
HXLINE( 112)		this->bulletElasticity = ((Float)0);
HXLINE(  70)		this->fireRate = (int)0;
HXLINE(  64)		this->nextFire = (int)0;
HXLINE( 159)		this->group =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 160)		Float Width = ::flixel::FlxG_obj::width;
HXDLIN( 160)		Float Height = ::flixel::FlxG_obj::height;
HXDLIN( 160)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 160)		_this->x = (int)0;
HXDLIN( 160)		_this->y = (int)0;
HXDLIN( 160)		_this->width = Width;
HXDLIN( 160)		_this->height = Height;
HXDLIN( 160)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 160)		rect->_inPool = false;
HXDLIN( 160)		this->bounds = rect;
HXLINE( 161)		this->bulletLifeSpan =  ::flixel::util::helpers::FlxBounds_obj::__alloc( HX_CTX ,((Float)0.0),(int)0);
HXLINE( 163)		this->name = name;
HXLINE( 164)		this->bulletFactory = bulletFactory;
HXLINE( 165)		{
HXLINE( 165)			if ((_hx_getEnumValueIndex(fireFrom) == (int)0)) {
HXLINE( 165)				 ::Dynamic angleOffset = fireFrom->_hx_getObject(3);
HXDLIN( 165)				 ::flixel::FlxSprite parent = fireFrom->_hx_getObject(0).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 165)				{
HXLINE( 165)					this->parent = parent;
HXDLIN( 165)					if (hx::IsNotNull( angleOffset )) {
HXLINE( 165)						this->angleOffset = angleOffset;
            					}
            				}
            			}
            			else {
HXLINE( 165)				this->parent = null();
            			}
HXDLIN( 165)			this->fireFrom = fireFrom;
            		}
HXLINE( 166)		this->speedMode = speedMode;
            	}

Dynamic FlxTypedWeapon_obj::__CreateEmpty() { return new FlxTypedWeapon_obj; }

void *FlxTypedWeapon_obj::_hx_vtable = 0;

Dynamic FlxTypedWeapon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedWeapon_obj > _hx_result = new FlxTypedWeapon_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxTypedWeapon_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x56dc43e7;
}

bool FlxTypedWeapon_obj::runFire( ::flixel::addons::weapon::FlxWeaponFireMode Mode){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::flixel::addons::weapon::FlxTypedWeapon,a1) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_201_runFire)
HXLINE( 201)			return f(a1);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_179_runFire)
HXLINE( 180)		bool _hx_tmp;
HXDLIN( 180)		if ((this->fireRate > (int)0)) {
HXLINE( 180)			_hx_tmp = (::flixel::FlxG_obj::game->ticks < this->nextFire);
            		}
            		else {
HXLINE( 180)			_hx_tmp = false;
            		}
HXDLIN( 180)		if (_hx_tmp) {
HXLINE( 182)			return false;
            		}
HXLINE( 185)		if (hx::IsNotNull( this->onPreFireCallback )) {
HXLINE( 187)			this->onPreFireCallback();
            		}
HXLINE( 191)		if (hx::IsNotNull( this->onPreFireSound )) {
HXLINE( 193)			this->onPreFireSound->play(null(),null(),null());
            		}
HXLINE( 197)		this->lastFired = ::flixel::FlxG_obj::game->ticks;
HXLINE( 198)		int _hx_tmp1 = ::flixel::FlxG_obj::game->ticks;
HXDLIN( 198)		this->nextFire = (_hx_tmp1 + ::Std_obj::_hx_int(((Float)this->fireRate / (Float)::flixel::FlxG_obj::timeScale)));
HXLINE( 201)		 ::Dynamic f = this->bulletFactory;
HXDLIN( 201)		 ::flixel::addons::weapon::FlxTypedWeapon a1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 201)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 201)		this->currentBullet = this->group->recycle(null(),_hx_tmp2,null(),null());
HXLINE( 202)		if (hx::IsNull( this->currentBullet )) {
HXLINE( 204)			return false;
            		}
HXLINE( 208)		( ( ::flixel::FlxObject)(this->currentBullet) )->velocity->set_x((int)0);
HXLINE( 209)		( ( ::flixel::FlxObject)(this->currentBullet) )->velocity->set_y((int)0);
HXLINE( 211)		{
HXLINE( 211)			 ::flixel::addons::weapon::FlxWeaponFireFrom _g = this->fireFrom;
HXDLIN( 211)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 213)					 ::Dynamic angleOffset = _g->_hx_getObject(3);
HXDLIN( 213)					 ::Dynamic useParentDirection = _g->_hx_getObject(2);
HXDLIN( 213)					 ::flixel::util::helpers::FlxBounds offset = _g->_hx_getObject(1).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXDLIN( 213)					 ::flixel::FlxSprite parent = _g->_hx_getObject(0).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 213)					{
HXLINE( 217)						Float actualOffset = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(offset->min) )->x,( ( ::flixel::math::FlxPoint)(offset->max) )->x,null());
HXLINE( 216)						 ::flixel::math::FlxPoint actualOffset1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,actualOffset,::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(offset->min) )->y,( ( ::flixel::math::FlxPoint)(offset->max) )->y,null()));
HXLINE( 219)						if (useParentDirection) {
HXLINE( 222)							actualOffset1 = this->rotatePoints(actualOffset1,parent->origin,parent->angle);
HXLINE( 225)							{
HXLINE( 225)								Float X = ((Float)( ( ::flixel::FlxObject)(this->currentBullet) )->get_width() / (Float)(int)2);
HXDLIN( 225)								Float Y = ((Float)( ( ::flixel::FlxObject)(this->currentBullet) )->get_height() / (Float)(int)2);
HXDLIN( 225)								{
HXLINE( 225)									 ::flixel::math::FlxPoint _g1 = actualOffset1;
HXDLIN( 225)									_g1->set_x((_g1->x - X));
            								}
HXDLIN( 225)								{
HXLINE( 225)									 ::flixel::math::FlxPoint _g2 = actualOffset1;
HXDLIN( 225)									_g2->set_y((_g2->y - Y));
            								}
            							}
HXLINE( 226)							{
HXLINE( 226)								Float Y1 = parent->offset->y;
HXDLIN( 226)								{
HXLINE( 226)									 ::flixel::math::FlxPoint _g3 = actualOffset1;
HXDLIN( 226)									_g3->set_x((_g3->x - parent->offset->x));
            								}
HXDLIN( 226)								{
HXLINE( 226)									 ::flixel::math::FlxPoint _g4 = actualOffset1;
HXDLIN( 226)									_g4->set_y((_g4->y - Y1));
            								}
            							}
            						}
HXLINE( 229)						 ::flixel::math::FlxPoint _hx_tmp3 = ( ( ::flixel::FlxObject)(this->currentBullet) )->last;
HXDLIN( 229)						 ::Dynamic _hx_tmp4 = this->currentBullet;
HXDLIN( 229)						_hx_tmp3->set_x(( ( ::flixel::FlxObject)(_hx_tmp4) )->set_x((parent->x + actualOffset1->x)));
HXLINE( 230)						 ::flixel::math::FlxPoint _hx_tmp5 = ( ( ::flixel::FlxObject)(this->currentBullet) )->last;
HXDLIN( 230)						 ::Dynamic _hx_tmp6 = this->currentBullet;
HXDLIN( 230)						_hx_tmp5->set_y(( ( ::flixel::FlxObject)(_hx_tmp6) )->set_y((parent->y + actualOffset1->y)));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 232)					 ::flixel::util::helpers::FlxBounds position = _g->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXDLIN( 232)					{
HXLINE( 233)						 ::flixel::math::FlxPoint _hx_tmp7 = ( ( ::flixel::FlxObject)(this->currentBullet) )->last;
HXDLIN( 233)						 ::Dynamic _hx_tmp8 = this->currentBullet;
HXDLIN( 233)						_hx_tmp7->set_x(( ( ::flixel::FlxObject)(_hx_tmp8) )->set_x(::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(position->min) )->x,( ( ::flixel::math::FlxPoint)(position->max) )->x,null())));
HXLINE( 234)						 ::flixel::math::FlxPoint _hx_tmp9 = ( ( ::flixel::FlxObject)(this->currentBullet) )->last;
HXDLIN( 234)						 ::Dynamic _hx_tmp10 = this->currentBullet;
HXDLIN( 234)						_hx_tmp9->set_y(( ( ::flixel::FlxObject)(_hx_tmp10) )->set_y(::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(position->min) )->y,( ( ::flixel::math::FlxPoint)(position->max) )->y,null())));
            					}
            				}
            				break;
            			}
            		}
HXLINE( 237)		( ( ::flixel::FlxBasic)(this->currentBullet) )->set_exists(true);
HXLINE( 238)		( ( ::flixel::addons::weapon::FlxBullet)(this->currentBullet) )->bounds = this->bounds;
HXLINE( 239)		( ( ::flixel::FlxObject)(this->currentBullet) )->elasticity = this->bulletElasticity;
HXLINE( 240)		( ( ::flixel::addons::weapon::FlxBullet)(this->currentBullet) )->lifespan = ::flixel::FlxG_obj::random->_hx_float(this->bulletLifeSpan->min,this->bulletLifeSpan->max,null());
HXLINE( 242)		switch((int)(_hx_getEnumValueIndex(Mode))){
            			case (int)0: {
HXLINE( 244)				Float y = Mode->_hx_getFloat(1);
HXDLIN( 244)				Float x = Mode->_hx_getFloat(0);
HXLINE( 245)				 ::Dynamic _hx_tmp11 = this->currentBullet;
HXDLIN( 245)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(x,y);
HXDLIN( 245)				point->_inPool = false;
HXDLIN( 245)				 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 245)				point1->_weak = true;
HXDLIN( 245)				this->internalFireAtPoint(_hx_tmp11,point1);
            			}
            			break;
            			case (int)1: {
HXLINE( 247)				 ::flixel::FlxSprite target = Mode->_hx_getObject(0).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 248)				 ::Dynamic _hx_tmp12 = this->currentBullet;
HXDLIN( 248)				 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 248)				point2->_inPool = false;
HXDLIN( 248)				 ::flixel::math::FlxPoint point3 = point2;
HXDLIN( 248)				point3->_weak = true;
HXDLIN( 248)				this->internalFireAtPoint(_hx_tmp12,target->getPosition(point3));
            			}
            			break;
            			case (int)2: {
HXLINE( 250)				 ::flixel::util::helpers::FlxBounds angle = Mode->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXLINE( 251)				 ::Dynamic _hx_tmp13 = this->currentBullet;
HXDLIN( 251)				this->internalFireFromAngle(_hx_tmp13,::flixel::FlxG_obj::random->_hx_float(angle->min,angle->max,null()));
            			}
            			break;
            			case (int)3: {
HXLINE( 253)				 ::flixel::util::helpers::FlxBounds angle1 = Mode->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXLINE( 254)				 ::Dynamic _hx_tmp14 = this->currentBullet;
HXDLIN( 254)				Float _hx_tmp15 = this->parent->angle;
HXDLIN( 254)				this->internalFireFromAngle(_hx_tmp14,(_hx_tmp15 + ::flixel::FlxG_obj::random->_hx_float(angle1->min,angle1->max,null())));
            			}
            			break;
            			case (int)4: {
HXLINE( 256)				 ::flixel::util::helpers::FlxBounds angle2 = Mode->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXLINE( 257)				 ::Dynamic _hx_tmp16 = this->currentBullet;
HXDLIN( 257)				Float _hx_tmp17 = ::flixel::math::FlxAngle_obj::angleFromFacing(this->parent->facing,true);
HXDLIN( 257)				this->internalFireFromAngle(_hx_tmp16,(_hx_tmp17 + ::flixel::FlxG_obj::random->_hx_float(angle2->min,angle2->max,null())));
            			}
            			break;
            			case (int)5: {
HXLINE( 266)				 ::Dynamic _hx_tmp18 = this->currentBullet;
HXDLIN( 266)				 ::flixel::input::mouse::FlxMouse _hx_tmp19 = ::flixel::FlxG_obj::mouse;
HXDLIN( 266)				 ::flixel::math::FlxPoint point4 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 266)				point4->_inPool = false;
HXDLIN( 266)				 ::flixel::math::FlxPoint point5 = point4;
HXDLIN( 266)				point5->_weak = true;
HXDLIN( 266)				this->internalFireAtPoint(_hx_tmp18,_hx_tmp19->getPosition(point5));
            			}
            			break;
            		}
HXLINE( 270)		if (hx::IsNotNull( ( ( ::flixel::animation::FlxAnimation)(::haxe::IMap_obj::get(( ( ::flixel::FlxSprite)(this->currentBullet) )->animation->_animations,HX_("fire",b6,d3,bb,43))) ) )) {
HXLINE( 272)			( ( ::flixel::FlxSprite)(this->currentBullet) )->animation->play(HX_("fire",b6,d3,bb,43),null(),null(),null());
            		}
HXLINE( 276)		if (hx::IsNotNull( this->onPostFireCallback )) {
HXLINE( 278)			this->onPostFireCallback();
            		}
HXLINE( 282)		if (hx::IsNotNull( this->onPostFireSound )) {
HXLINE( 284)			this->onPostFireSound->play(null(),null(),null());
            		}
HXLINE( 288)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedWeapon_obj,runFire,return )

 ::flixel::math::FlxPoint FlxTypedWeapon_obj::rotatePoints( ::flixel::math::FlxPoint point, ::flixel::math::FlxPoint origin,Float angle){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_300_rotatePoints)
HXLINE( 301)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 301)		point1->_inPool = false;
HXDLIN( 301)		 ::flixel::math::FlxPoint point2 = point1;
HXDLIN( 301)		point2->_weak = true;
HXDLIN( 301)		 ::flixel::math::FlxPoint returnedPoint = point2;
HXLINE( 303)		Float inBetweenAngle = (origin->angleBetween(point) - (int)90);
HXLINE( 304)		inBetweenAngle = (angle + inBetweenAngle);
HXLINE( 305)		Float inBetweenDistance = origin->distanceTo(point);
HXLINE( 307)		returnedPoint->set_x((::Math_obj::cos(((Float)(inBetweenAngle * ::Math_obj::PI) / (Float)(int)180)) * inBetweenDistance));
HXLINE( 308)		returnedPoint->set_y((::Math_obj::sin(((Float)(inBetweenAngle * ::Math_obj::PI) / (Float)(int)180)) * inBetweenDistance));
HXLINE( 309)		Float Y = origin->y;
HXDLIN( 309)		{
HXLINE( 309)			 ::flixel::math::FlxPoint _g = returnedPoint;
HXDLIN( 309)			_g->set_x((_g->x + origin->x));
            		}
HXDLIN( 309)		{
HXLINE( 309)			 ::flixel::math::FlxPoint _g1 = returnedPoint;
HXDLIN( 309)			_g1->set_y((_g1->y + Y));
            		}
HXDLIN( 309)		return returnedPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedWeapon_obj,rotatePoints,return )

bool FlxTypedWeapon_obj::fireFromParentFacing( ::flixel::util::helpers::FlxBounds angleNoise){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_319_fireFromParentFacing)
HXDLIN( 319)		return this->runFire(::flixel::addons::weapon::FlxWeaponFireMode_obj::FIRE_FROM_PARENT_FACING(angleNoise));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedWeapon_obj,fireFromParentFacing,return )

bool FlxTypedWeapon_obj::fireAtMouse(){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_330_fireAtMouse)
HXDLIN( 330)		return this->runFire(::flixel::addons::weapon::FlxWeaponFireMode_obj::FIRE_AT_MOUSE_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedWeapon_obj,fireAtMouse,return )

bool FlxTypedWeapon_obj::fireAtPosition(int X,int Y){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_360_fireAtPosition)
HXDLIN( 360)		return this->runFire(::flixel::addons::weapon::FlxWeaponFireMode_obj::FIRE_AT_POSITION(X,Y));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,fireAtPosition,return )

bool FlxTypedWeapon_obj::fireAtTarget( ::flixel::FlxSprite Target){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_371_fireAtTarget)
HXDLIN( 371)		return this->runFire(::flixel::addons::weapon::FlxWeaponFireMode_obj::FIRE_AT_TARGET(Target));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedWeapon_obj,fireAtTarget,return )

bool FlxTypedWeapon_obj::fireFromAngle( ::flixel::util::helpers::FlxBounds angle){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_382_fireFromAngle)
HXDLIN( 382)		return this->runFire(::flixel::addons::weapon::FlxWeaponFireMode_obj::FIRE_FROM_ANGLE(angle));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedWeapon_obj,fireFromAngle,return )

bool FlxTypedWeapon_obj::fireFromParentAngle( ::flixel::util::helpers::FlxBounds angle){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_392_fireFromParentAngle)
HXDLIN( 392)		return this->runFire(::flixel::addons::weapon::FlxWeaponFireMode_obj::FIRE_FROM_PARENT_ANGLE(angle));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedWeapon_obj,fireFromParentAngle,return )

void FlxTypedWeapon_obj::setPreFireCallback( ::Dynamic Callback, ::flixel::_hx_system::FlxSound Sound){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_402_setPreFireCallback)
HXLINE( 403)		this->onPreFireCallback = Callback;
HXLINE( 404)		this->onPreFireSound = Sound;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,setPreFireCallback,(void))

void FlxTypedWeapon_obj::setPostFireCallback( ::Dynamic Callback, ::flixel::_hx_system::FlxSound Sound){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_414_setPostFireCallback)
HXLINE( 415)		this->onPostFireCallback = Callback;
HXLINE( 416)		this->onPostFireSound = Sound;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,setPostFireCallback,(void))

void FlxTypedWeapon_obj::bulletsOverlap( ::flixel::FlxBasic ObjectOrGroup, ::Dynamic NotifyCallBack,hx::Null< bool >  __o_SkipParent){
bool SkipParent = __o_SkipParent.Default(true);
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_428_bulletsOverlap)
HXDLIN( 428)		bool _hx_tmp;
HXDLIN( 428)		if (hx::IsNotNull( this->group )) {
HXDLIN( 428)			_hx_tmp = (this->group->length > (int)0);
            		}
            		else {
HXDLIN( 428)			_hx_tmp = false;
            		}
HXDLIN( 428)		if (_hx_tmp) {
HXLINE( 430)			this->skipParentCollision = SkipParent;
HXLINE( 431)			 ::Dynamic _hx_tmp1;
HXDLIN( 431)			if (hx::IsNotNull( NotifyCallBack )) {
HXLINE( 431)				_hx_tmp1 = NotifyCallBack;
            			}
            			else {
HXLINE( 431)				_hx_tmp1 = this->onBulletHit_dyn();
            			}
HXDLIN( 431)			::flixel::FlxG_obj::overlap(ObjectOrGroup,this->group,_hx_tmp1,this->shouldBulletHit_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedWeapon_obj,bulletsOverlap,(void))

bool FlxTypedWeapon_obj::shouldBulletHit( ::flixel::FlxObject Object, ::flixel::FlxObject Bullet){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_436_shouldBulletHit)
HXLINE( 437)		bool _hx_tmp;
HXDLIN( 437)		if (hx::IsEq( this->parent,Object )) {
HXLINE( 437)			_hx_tmp = this->skipParentCollision;
            		}
            		else {
HXLINE( 437)			_hx_tmp = false;
            		}
HXDLIN( 437)		if (_hx_tmp) {
HXLINE( 439)			return false;
            		}
HXLINE( 442)		if (::Std_obj::is(Object,hx::ClassOf< ::flixel::tile::FlxTilemap >())) {
HXLINE( 444)			return hx::TCast<  ::flixel::tile::FlxTilemap >::cast(Object)->overlapsWithCallback(Bullet,null(),null(),null());
            		}
            		else {
HXLINE( 448)			return true;
            		}
HXLINE( 442)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,shouldBulletHit,return )

void FlxTypedWeapon_obj::onBulletHit( ::flixel::FlxObject Object, ::flixel::FlxObject Bullet){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_454_onBulletHit)
HXDLIN( 454)		Bullet->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,onBulletHit,(void))

void FlxTypedWeapon_obj::internalFireAtPoint( ::Dynamic bullet, ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_458_internalFireAtPoint)
HXLINE( 459)		{
HXLINE( 459)			 ::flixel::addons::weapon::FlxWeaponSpeedMode _g = this->speedMode;
HXDLIN( 459)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 461)					 ::flixel::util::helpers::FlxBounds speed = _g->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXLINE( 462)					::flixel::math::FlxVelocity_obj::moveTowardsPoint(( ( ::flixel::FlxSprite)(bullet) ),point,::flixel::FlxG_obj::random->_hx_float(speed->min,speed->max,null()),null());
            				}
            				break;
            				case (int)1: {
HXLINE( 464)					 ::flixel::util::helpers::FlxBounds maxSpeed = _g->_hx_getObject(1).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXDLIN( 464)					 ::flixel::util::helpers::FlxBounds acceleration = _g->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXLINE( 468)					Float _hx_tmp = ::flixel::FlxG_obj::random->_hx_float(acceleration->min,acceleration->max,null());
HXLINE( 465)					::flixel::math::FlxVelocity_obj::accelerateTowardsPoint(( ( ::flixel::FlxSprite)(bullet) ),point,_hx_tmp,::flixel::FlxG_obj::random->_hx_float(maxSpeed->min,maxSpeed->max,null()));
            				}
            				break;
            			}
            		}
HXLINE( 473)		if (this->rotateBulletTowardsTarget) {
HXLINE( 475)			Float _hx_tmp1 = this->angleOffset;
HXDLIN( 475)			( ( ::flixel::FlxSprite)(bullet) )->set_angle((_hx_tmp1 + ::flixel::math::FlxAngle_obj::angleBetweenPoint(( ( ::flixel::FlxSprite)(bullet) ),point,true)));
            		}
HXLINE( 478)		if (point->_weak) {
HXLINE( 478)			point->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,internalFireAtPoint,(void))

void FlxTypedWeapon_obj::internalFireFromAngle( ::Dynamic bullet,Float degrees){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_482_internalFireFromAngle)
HXLINE( 483)		Float radians = (degrees * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 484)		{
HXLINE( 484)			 ::flixel::addons::weapon::FlxWeaponSpeedMode _g = this->speedMode;
HXDLIN( 484)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 486)					 ::flixel::util::helpers::FlxBounds speed = _g->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXDLIN( 486)					{
HXLINE( 488)						Float Angle = (radians * ((Float)(int)180 / (Float)::Math_obj::PI));
HXDLIN( 488)						Float Speed = ::flixel::FlxG_obj::random->_hx_float(speed->min,speed->max,null());
HXDLIN( 488)						Float a = (Angle * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 488)						Float X = (::Math_obj::cos(a) * Speed);
HXDLIN( 488)						Float Y = (::Math_obj::sin(a) * Speed);
HXDLIN( 488)						 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 488)						point->_inPool = false;
HXDLIN( 488)						 ::flixel::math::FlxPoint velocity = point;
HXLINE( 489)						( ( ::flixel::FlxObject)(bullet) )->velocity->set_x(velocity->x);
HXLINE( 490)						( ( ::flixel::FlxObject)(bullet) )->velocity->set_y(velocity->y);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 492)					 ::flixel::util::helpers::FlxBounds maxSpeed = _g->_hx_getObject(1).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXDLIN( 492)					 ::flixel::util::helpers::FlxBounds acceleration = _g->_hx_getObject(0).StaticCast<  ::flixel::util::helpers::FlxBounds >();
HXLINE( 493)					{
HXLINE( 493)						Float acceleration1 = ::flixel::FlxG_obj::random->_hx_float(acceleration->min,acceleration->max,null());
HXDLIN( 493)						Float maxSpeed1 = ::flixel::FlxG_obj::random->_hx_float(maxSpeed->min,maxSpeed->max,null());
HXDLIN( 493)						Float sinA = ::Math_obj::sin(radians);
HXDLIN( 493)						Float cosA = ::Math_obj::cos(radians);
HXDLIN( 493)						( ( ::flixel::FlxObject)(bullet) )->velocity->set((int)0,(int)0);
HXDLIN( 493)						 ::flixel::math::FlxPoint bullet1 = ( ( ::flixel::FlxObject)(bullet) )->acceleration;
HXDLIN( 493)						bullet1->set((cosA * acceleration1),(sinA * acceleration1));
HXDLIN( 493)						 ::flixel::math::FlxPoint bullet2 = ( ( ::flixel::FlxObject)(bullet) )->maxVelocity;
HXDLIN( 493)						Float _hx_tmp = ::Math_obj::abs((cosA * maxSpeed1));
HXDLIN( 493)						bullet2->set(_hx_tmp,::Math_obj::abs((sinA * maxSpeed1)));
            					}
            				}
            				break;
            			}
            		}
HXLINE( 501)		if (this->rotateBulletTowardsTarget) {
HXLINE( 503)			Float _hx_tmp1 = this->angleOffset;
HXDLIN( 503)			( ( ::flixel::FlxSprite)(bullet) )->set_angle((_hx_tmp1 + (radians * ((Float)(int)180 / (Float)::Math_obj::PI))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedWeapon_obj,internalFireFromAngle,(void))

 ::flixel::addons::weapon::FlxWeaponFireFrom FlxTypedWeapon_obj::set_fireFrom( ::flixel::addons::weapon::FlxWeaponFireFrom v){
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_508_set_fireFrom)
HXLINE( 509)		if ((_hx_getEnumValueIndex(v) == (int)0)) {
HXLINE( 511)			 ::Dynamic angleOffset = v->_hx_getObject(3);
HXDLIN( 511)			 ::flixel::FlxSprite parent = v->_hx_getObject(0).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 511)			{
HXLINE( 512)				this->parent = parent;
HXLINE( 513)				if (hx::IsNotNull( angleOffset )) {
HXLINE( 514)					this->angleOffset = angleOffset;
            				}
            			}
            		}
            		else {
HXLINE( 517)			this->parent = null();
            		}
HXLINE( 519)		return (this->fireFrom = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedWeapon_obj,set_fireFrom,return )

int FlxTypedWeapon_obj::BULLET_UP;

int FlxTypedWeapon_obj::BULLET_DOWN;

int FlxTypedWeapon_obj::BULLET_LEFT;

int FlxTypedWeapon_obj::BULLET_RIGHT;

int FlxTypedWeapon_obj::BULLET_NORTH_EAST;

int FlxTypedWeapon_obj::BULLET_NORTH_WEST;

int FlxTypedWeapon_obj::BULLET_SOUTH_EAST;

int FlxTypedWeapon_obj::BULLET_SOUTH_WEST;


hx::ObjectPtr< FlxTypedWeapon_obj > FlxTypedWeapon_obj::__new(::String name, ::Dynamic bulletFactory, ::flixel::addons::weapon::FlxWeaponFireFrom fireFrom, ::flixel::addons::weapon::FlxWeaponSpeedMode speedMode) {
	hx::ObjectPtr< FlxTypedWeapon_obj > __this = new FlxTypedWeapon_obj();
	__this->__construct(name,bulletFactory,fireFrom,speedMode);
	return __this;
}

hx::ObjectPtr< FlxTypedWeapon_obj > FlxTypedWeapon_obj::__alloc(hx::Ctx *_hx_ctx,::String name, ::Dynamic bulletFactory, ::flixel::addons::weapon::FlxWeaponFireFrom fireFrom, ::flixel::addons::weapon::FlxWeaponSpeedMode speedMode) {
	FlxTypedWeapon_obj *__this = (FlxTypedWeapon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedWeapon_obj), true, "flixel.addons.weapon.FlxTypedWeapon"));
	*(void **)__this = FlxTypedWeapon_obj::_hx_vtable;
	__this->__construct(name,bulletFactory,fireFrom,speedMode);
	return __this;
}

FlxTypedWeapon_obj::FlxTypedWeapon_obj()
{
}

void FlxTypedWeapon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedWeapon);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(group,"group");
	HX_MARK_MEMBER_NAME(nextFire,"nextFire");
	HX_MARK_MEMBER_NAME(fireRate,"fireRate");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(useParentDirection,"useParentDirection");
	HX_MARK_MEMBER_NAME(firePosition,"firePosition");
	HX_MARK_MEMBER_NAME(positionOffset,"positionOffset");
	HX_MARK_MEMBER_NAME(fireFrom,"fireFrom");
	HX_MARK_MEMBER_NAME(speedMode,"speedMode");
	HX_MARK_MEMBER_NAME(bulletLifeSpan,"bulletLifeSpan");
	HX_MARK_MEMBER_NAME(bulletElasticity,"bulletElasticity");
	HX_MARK_MEMBER_NAME(rotateBulletTowardsTarget,"rotateBulletTowardsTarget");
	HX_MARK_MEMBER_NAME(currentBullet,"currentBullet");
	HX_MARK_MEMBER_NAME(onPreFireCallback,"onPreFireCallback");
	HX_MARK_MEMBER_NAME(onPostFireCallback,"onPostFireCallback");
	HX_MARK_MEMBER_NAME(onPreFireSound,"onPreFireSound");
	HX_MARK_MEMBER_NAME(onPostFireSound,"onPostFireSound");
	HX_MARK_MEMBER_NAME(bulletFactory,"bulletFactory");
	HX_MARK_MEMBER_NAME(lastFired,"lastFired");
	HX_MARK_MEMBER_NAME(skipParentCollision,"skipParentCollision");
	HX_MARK_MEMBER_NAME(angleOffset,"angleOffset");
	HX_MARK_END_CLASS();
}

void FlxTypedWeapon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(group,"group");
	HX_VISIT_MEMBER_NAME(nextFire,"nextFire");
	HX_VISIT_MEMBER_NAME(fireRate,"fireRate");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(useParentDirection,"useParentDirection");
	HX_VISIT_MEMBER_NAME(firePosition,"firePosition");
	HX_VISIT_MEMBER_NAME(positionOffset,"positionOffset");
	HX_VISIT_MEMBER_NAME(fireFrom,"fireFrom");
	HX_VISIT_MEMBER_NAME(speedMode,"speedMode");
	HX_VISIT_MEMBER_NAME(bulletLifeSpan,"bulletLifeSpan");
	HX_VISIT_MEMBER_NAME(bulletElasticity,"bulletElasticity");
	HX_VISIT_MEMBER_NAME(rotateBulletTowardsTarget,"rotateBulletTowardsTarget");
	HX_VISIT_MEMBER_NAME(currentBullet,"currentBullet");
	HX_VISIT_MEMBER_NAME(onPreFireCallback,"onPreFireCallback");
	HX_VISIT_MEMBER_NAME(onPostFireCallback,"onPostFireCallback");
	HX_VISIT_MEMBER_NAME(onPreFireSound,"onPreFireSound");
	HX_VISIT_MEMBER_NAME(onPostFireSound,"onPostFireSound");
	HX_VISIT_MEMBER_NAME(bulletFactory,"bulletFactory");
	HX_VISIT_MEMBER_NAME(lastFired,"lastFired");
	HX_VISIT_MEMBER_NAME(skipParentCollision,"skipParentCollision");
	HX_VISIT_MEMBER_NAME(angleOffset,"angleOffset");
}

hx::Val FlxTypedWeapon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"group") ) { return hx::Val( group ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"runFire") ) { return hx::Val( runFire_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextFire") ) { return hx::Val( nextFire ); }
		if (HX_FIELD_EQ(inName,"fireRate") ) { return hx::Val( fireRate ); }
		if (HX_FIELD_EQ(inName,"fireFrom") ) { return hx::Val( fireFrom ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"speedMode") ) { return hx::Val( speedMode ); }
		if (HX_FIELD_EQ(inName,"lastFired") ) { return hx::Val( lastFired ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"angleOffset") ) { return hx::Val( angleOffset ); }
		if (HX_FIELD_EQ(inName,"fireAtMouse") ) { return hx::Val( fireAtMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"onBulletHit") ) { return hx::Val( onBulletHit_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"firePosition") ) { return hx::Val( firePosition ); }
		if (HX_FIELD_EQ(inName,"rotatePoints") ) { return hx::Val( rotatePoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"fireAtTarget") ) { return hx::Val( fireAtTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fireFrom") ) { return hx::Val( set_fireFrom_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentBullet") ) { return hx::Val( currentBullet ); }
		if (HX_FIELD_EQ(inName,"bulletFactory") ) { return hx::Val( bulletFactory ); }
		if (HX_FIELD_EQ(inName,"fireFromAngle") ) { return hx::Val( fireFromAngle_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"positionOffset") ) { return hx::Val( positionOffset ); }
		if (HX_FIELD_EQ(inName,"bulletLifeSpan") ) { return hx::Val( bulletLifeSpan ); }
		if (HX_FIELD_EQ(inName,"onPreFireSound") ) { return hx::Val( onPreFireSound ); }
		if (HX_FIELD_EQ(inName,"fireAtPosition") ) { return hx::Val( fireAtPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"bulletsOverlap") ) { return hx::Val( bulletsOverlap_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onPostFireSound") ) { return hx::Val( onPostFireSound ); }
		if (HX_FIELD_EQ(inName,"shouldBulletHit") ) { return hx::Val( shouldBulletHit_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bulletElasticity") ) { return hx::Val( bulletElasticity ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onPreFireCallback") ) { return hx::Val( onPreFireCallback ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useParentDirection") ) { return hx::Val( useParentDirection ); }
		if (HX_FIELD_EQ(inName,"onPostFireCallback") ) { return hx::Val( onPostFireCallback ); }
		if (HX_FIELD_EQ(inName,"setPreFireCallback") ) { return hx::Val( setPreFireCallback_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"skipParentCollision") ) { return hx::Val( skipParentCollision ); }
		if (HX_FIELD_EQ(inName,"fireFromParentAngle") ) { return hx::Val( fireFromParentAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPostFireCallback") ) { return hx::Val( setPostFireCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"internalFireAtPoint") ) { return hx::Val( internalFireAtPoint_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fireFromParentFacing") ) { return hx::Val( fireFromParentFacing_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"internalFireFromAngle") ) { return hx::Val( internalFireFromAngle_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"rotateBulletTowardsTarget") ) { return hx::Val( rotateBulletTowardsTarget ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTypedWeapon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"group") ) { group=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextFire") ) { nextFire=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fireRate") ) { fireRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fireFrom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fireFrom(inValue.Cast<  ::flixel::addons::weapon::FlxWeaponFireFrom >()) );fireFrom=inValue.Cast<  ::flixel::addons::weapon::FlxWeaponFireFrom >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"speedMode") ) { speedMode=inValue.Cast<  ::flixel::addons::weapon::FlxWeaponSpeedMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFired") ) { lastFired=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"angleOffset") ) { angleOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"firePosition") ) { firePosition=inValue.Cast<  ::flixel::util::helpers::FlxBounds >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentBullet") ) { currentBullet=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bulletFactory") ) { bulletFactory=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"positionOffset") ) { positionOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bulletLifeSpan") ) { bulletLifeSpan=inValue.Cast<  ::flixel::util::helpers::FlxBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPreFireSound") ) { onPreFireSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onPostFireSound") ) { onPostFireSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bulletElasticity") ) { bulletElasticity=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onPreFireCallback") ) { onPreFireCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useParentDirection") ) { useParentDirection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPostFireCallback") ) { onPostFireCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"skipParentCollision") ) { skipParentCollision=inValue.Cast< bool >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"rotateBulletTowardsTarget") ) { rotateBulletTowardsTarget=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedWeapon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"));
	outFields->push(HX_HCSTRING("nextFire","\x49","\x7a","\x88","\xef"));
	outFields->push(HX_HCSTRING("fireRate","\xb6","\x65","\x0c","\xcb"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("useParentDirection","\x2e","\x0b","\x24","\x57"));
	outFields->push(HX_HCSTRING("firePosition","\x7f","\xd6","\x93","\x8c"));
	outFields->push(HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5"));
	outFields->push(HX_HCSTRING("fireFrom","\x40","\xb8","\x2a","\xc3"));
	outFields->push(HX_HCSTRING("speedMode","\x8a","\x66","\xd3","\x59"));
	outFields->push(HX_HCSTRING("bulletLifeSpan","\x48","\xa6","\x08","\x25"));
	outFields->push(HX_HCSTRING("bulletElasticity","\x5b","\xe0","\x77","\x7f"));
	outFields->push(HX_HCSTRING("rotateBulletTowardsTarget","\x90","\x36","\x53","\x67"));
	outFields->push(HX_HCSTRING("currentBullet","\x5b","\x13","\xed","\xb7"));
	outFields->push(HX_HCSTRING("onPreFireSound","\x55","\x38","\x64","\x4c"));
	outFields->push(HX_HCSTRING("onPostFireSound","\x1a","\x2c","\xac","\xb1"));
	outFields->push(HX_HCSTRING("lastFired","\xb8","\x99","\x4a","\x4d"));
	outFields->push(HX_HCSTRING("skipParentCollision","\x29","\xa6","\xa2","\x20"));
	outFields->push(HX_HCSTRING("angleOffset","\xc6","\x6f","\x7b","\x71"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedWeapon_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FlxTypedWeapon_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(FlxTypedWeapon_obj,group),HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99")},
	{hx::fsInt,(int)offsetof(FlxTypedWeapon_obj,nextFire),HX_HCSTRING("nextFire","\x49","\x7a","\x88","\xef")},
	{hx::fsInt,(int)offsetof(FlxTypedWeapon_obj,fireRate),HX_HCSTRING("fireRate","\xb6","\x65","\x0c","\xcb")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxTypedWeapon_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxTypedWeapon_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(FlxTypedWeapon_obj,useParentDirection),HX_HCSTRING("useParentDirection","\x2e","\x0b","\x24","\x57")},
	{hx::fsObject /*::flixel::util::helpers::FlxBounds*/ ,(int)offsetof(FlxTypedWeapon_obj,firePosition),HX_HCSTRING("firePosition","\x7f","\xd6","\x93","\x8c")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTypedWeapon_obj,positionOffset),HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5")},
	{hx::fsObject /*::flixel::addons::weapon::FlxWeaponFireFrom*/ ,(int)offsetof(FlxTypedWeapon_obj,fireFrom),HX_HCSTRING("fireFrom","\x40","\xb8","\x2a","\xc3")},
	{hx::fsObject /*::flixel::addons::weapon::FlxWeaponSpeedMode*/ ,(int)offsetof(FlxTypedWeapon_obj,speedMode),HX_HCSTRING("speedMode","\x8a","\x66","\xd3","\x59")},
	{hx::fsObject /*::flixel::util::helpers::FlxBounds*/ ,(int)offsetof(FlxTypedWeapon_obj,bulletLifeSpan),HX_HCSTRING("bulletLifeSpan","\x48","\xa6","\x08","\x25")},
	{hx::fsFloat,(int)offsetof(FlxTypedWeapon_obj,bulletElasticity),HX_HCSTRING("bulletElasticity","\x5b","\xe0","\x77","\x7f")},
	{hx::fsBool,(int)offsetof(FlxTypedWeapon_obj,rotateBulletTowardsTarget),HX_HCSTRING("rotateBulletTowardsTarget","\x90","\x36","\x53","\x67")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedWeapon_obj,currentBullet),HX_HCSTRING("currentBullet","\x5b","\x13","\xed","\xb7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedWeapon_obj,onPreFireCallback),HX_HCSTRING("onPreFireCallback","\xff","\x65","\xde","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedWeapon_obj,onPostFireCallback),HX_HCSTRING("onPostFireCallback","\x5a","\x5b","\x07","\x2e")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxTypedWeapon_obj,onPreFireSound),HX_HCSTRING("onPreFireSound","\x55","\x38","\x64","\x4c")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxTypedWeapon_obj,onPostFireSound),HX_HCSTRING("onPostFireSound","\x1a","\x2c","\xac","\xb1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedWeapon_obj,bulletFactory),HX_HCSTRING("bulletFactory","\xa8","\x5e","\xb0","\xd6")},
	{hx::fsInt,(int)offsetof(FlxTypedWeapon_obj,lastFired),HX_HCSTRING("lastFired","\xb8","\x99","\x4a","\x4d")},
	{hx::fsBool,(int)offsetof(FlxTypedWeapon_obj,skipParentCollision),HX_HCSTRING("skipParentCollision","\x29","\xa6","\xa2","\x20")},
	{hx::fsFloat,(int)offsetof(FlxTypedWeapon_obj,angleOffset),HX_HCSTRING("angleOffset","\xc6","\x6f","\x7b","\x71")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxTypedWeapon_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_UP,HX_HCSTRING("BULLET_UP","\x78","\xf7","\xef","\x0d")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_DOWN,HX_HCSTRING("BULLET_DOWN","\xbf","\xae","\x39","\x58")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_LEFT,HX_HCSTRING("BULLET_LEFT","\x64","\xbe","\x7b","\x5d")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_RIGHT,HX_HCSTRING("BULLET_RIGHT","\xbf","\xe6","\xd7","\xe5")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_NORTH_EAST,HX_HCSTRING("BULLET_NORTH_EAST","\x34","\x6f","\x31","\x6f")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_NORTH_WEST,HX_HCSTRING("BULLET_NORTH_WEST","\x66","\x4f","\x1a","\x7b")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_SOUTH_EAST,HX_HCSTRING("BULLET_SOUTH_EAST","\xec","\x1c","\x3d","\xdc")},
	{hx::fsInt,(void *) &FlxTypedWeapon_obj::BULLET_SOUTH_WEST,HX_HCSTRING("BULLET_SOUTH_WEST","\x1e","\xfd","\x25","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTypedWeapon_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"),
	HX_HCSTRING("nextFire","\x49","\x7a","\x88","\xef"),
	HX_HCSTRING("fireRate","\xb6","\x65","\x0c","\xcb"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("useParentDirection","\x2e","\x0b","\x24","\x57"),
	HX_HCSTRING("firePosition","\x7f","\xd6","\x93","\x8c"),
	HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5"),
	HX_HCSTRING("fireFrom","\x40","\xb8","\x2a","\xc3"),
	HX_HCSTRING("speedMode","\x8a","\x66","\xd3","\x59"),
	HX_HCSTRING("bulletLifeSpan","\x48","\xa6","\x08","\x25"),
	HX_HCSTRING("bulletElasticity","\x5b","\xe0","\x77","\x7f"),
	HX_HCSTRING("rotateBulletTowardsTarget","\x90","\x36","\x53","\x67"),
	HX_HCSTRING("currentBullet","\x5b","\x13","\xed","\xb7"),
	HX_HCSTRING("onPreFireCallback","\xff","\x65","\xde","\x2b"),
	HX_HCSTRING("onPostFireCallback","\x5a","\x5b","\x07","\x2e"),
	HX_HCSTRING("onPreFireSound","\x55","\x38","\x64","\x4c"),
	HX_HCSTRING("onPostFireSound","\x1a","\x2c","\xac","\xb1"),
	HX_HCSTRING("bulletFactory","\xa8","\x5e","\xb0","\xd6"),
	HX_HCSTRING("lastFired","\xb8","\x99","\x4a","\x4d"),
	HX_HCSTRING("skipParentCollision","\x29","\xa6","\xa2","\x20"),
	HX_HCSTRING("angleOffset","\xc6","\x6f","\x7b","\x71"),
	HX_HCSTRING("runFire","\xa1","\xe8","\xf8","\xd0"),
	HX_HCSTRING("rotatePoints","\xde","\x82","\x7c","\xb5"),
	HX_HCSTRING("fireFromParentFacing","\x44","\x58","\xff","\x62"),
	HX_HCSTRING("fireAtMouse","\x1c","\x37","\x7d","\x47"),
	HX_HCSTRING("fireAtPosition","\x12","\x34","\xfa","\x58"),
	HX_HCSTRING("fireAtTarget","\x7a","\xaa","\xf1","\x00"),
	HX_HCSTRING("fireFromAngle","\x73","\x13","\xe1","\x7b"),
	HX_HCSTRING("fireFromParentAngle","\xe9","\xfd","\x8a","\xb7"),
	HX_HCSTRING("setPreFireCallback","\xdc","\x76","\x5d","\xfc"),
	HX_HCSTRING("setPostFireCallback","\xdd","\x0b","\xb7","\xcc"),
	HX_HCSTRING("bulletsOverlap","\x96","\x53","\xba","\x1c"),
	HX_HCSTRING("shouldBulletHit","\x7e","\xda","\x92","\x7d"),
	HX_HCSTRING("onBulletHit","\x12","\xa4","\xb0","\x34"),
	HX_HCSTRING("internalFireAtPoint","\x0a","\x85","\xdc","\xf4"),
	HX_HCSTRING("internalFireFromAngle","\xf6","\x79","\x73","\x29"),
	HX_HCSTRING("set_fireFrom","\xbd","\x8f","\x3d","\x8d"),
	::String(null()) };

static void FlxTypedWeapon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_UP,"BULLET_UP");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_DOWN,"BULLET_DOWN");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_LEFT,"BULLET_LEFT");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_RIGHT,"BULLET_RIGHT");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_NORTH_EAST,"BULLET_NORTH_EAST");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_NORTH_WEST,"BULLET_NORTH_WEST");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_SOUTH_EAST,"BULLET_SOUTH_EAST");
	HX_MARK_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_SOUTH_WEST,"BULLET_SOUTH_WEST");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedWeapon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_UP,"BULLET_UP");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_DOWN,"BULLET_DOWN");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_LEFT,"BULLET_LEFT");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_RIGHT,"BULLET_RIGHT");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_NORTH_EAST,"BULLET_NORTH_EAST");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_NORTH_WEST,"BULLET_NORTH_WEST");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_SOUTH_EAST,"BULLET_SOUTH_EAST");
	HX_VISIT_MEMBER_NAME(FlxTypedWeapon_obj::BULLET_SOUTH_WEST,"BULLET_SOUTH_WEST");
};

#endif

hx::Class FlxTypedWeapon_obj::__mClass;

static ::String FlxTypedWeapon_obj_sStaticFields[] = {
	HX_HCSTRING("BULLET_UP","\x78","\xf7","\xef","\x0d"),
	HX_HCSTRING("BULLET_DOWN","\xbf","\xae","\x39","\x58"),
	HX_HCSTRING("BULLET_LEFT","\x64","\xbe","\x7b","\x5d"),
	HX_HCSTRING("BULLET_RIGHT","\xbf","\xe6","\xd7","\xe5"),
	HX_HCSTRING("BULLET_NORTH_EAST","\x34","\x6f","\x31","\x6f"),
	HX_HCSTRING("BULLET_NORTH_WEST","\x66","\x4f","\x1a","\x7b"),
	HX_HCSTRING("BULLET_SOUTH_EAST","\xec","\x1c","\x3d","\xdc"),
	HX_HCSTRING("BULLET_SOUTH_WEST","\x1e","\xfd","\x25","\xe8"),
	::String(null())
};

void FlxTypedWeapon_obj::__register()
{
	hx::Object *dummy = new FlxTypedWeapon_obj;
	FlxTypedWeapon_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.weapon.FlxTypedWeapon","\x9d","\x38","\xd5","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedWeapon_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTypedWeapon_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedWeapon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedWeapon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedWeapon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedWeapon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedWeapon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTypedWeapon_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_44_boot)
HXDLIN(  44)		BULLET_UP = (int)-90;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_45_boot)
HXDLIN(  45)		BULLET_DOWN = (int)90;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_46_boot)
HXDLIN(  46)		BULLET_LEFT = (int)180;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_47_boot)
HXDLIN(  47)		BULLET_RIGHT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_48_boot)
HXDLIN(  48)		BULLET_NORTH_EAST = (int)-45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_49_boot)
HXDLIN(  49)		BULLET_NORTH_WEST = (int)-135;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_50_boot)
HXDLIN(  50)		BULLET_SOUTH_EAST = (int)45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_677dead5a8b2c2ec_51_boot)
HXDLIN(  51)		BULLET_SOUTH_WEST = (int)135;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace weapon
