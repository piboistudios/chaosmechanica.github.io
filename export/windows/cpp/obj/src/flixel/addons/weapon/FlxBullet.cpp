// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_weapon_FlxBullet
#include <flixel/addons/weapon/FlxBullet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f0c5bdc82ed0dfb5_14_new,"flixel.addons.weapon.FlxBullet","new",0xec1cce5d,"flixel.addons.weapon.FlxBullet.new","flixel/addons/weapon/FlxBullet.hx",14,0xb8c7cb14)
HX_LOCAL_STACK_FRAME(_hx_pos_f0c5bdc82ed0dfb5_32_update,"flixel.addons.weapon.FlxBullet","update",0x0a73a42c,"flixel.addons.weapon.FlxBullet.update","flixel/addons/weapon/FlxBullet.hx",32,0xb8c7cb14)
namespace flixel{
namespace addons{
namespace weapon{

void FlxBullet_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f0c5bdc82ed0dfb5_14_new)
HXLINE(  17)		this->accelerates = false;
HXLINE(  27)		super::__construct((int)0,(int)0,null());
HXLINE(  28)		this->set_exists(false);
            	}

Dynamic FlxBullet_obj::__CreateEmpty() { return new FlxBullet_obj; }

void *FlxBullet_obj::_hx_vtable = 0;

Dynamic FlxBullet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBullet_obj > _hx_result = new FlxBullet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxBullet_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x051614e1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x051614e1;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void FlxBullet_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f0c5bdc82ed0dfb5_32_update)
HXLINE(  33)		if ((this->lifespan > (int)0)) {
HXLINE(  35)			 ::flixel::addons::weapon::FlxBullet _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  35)			_hx_tmp->lifespan = (_hx_tmp->lifespan - elapsed);
HXLINE(  37)			if ((this->lifespan <= (int)0)) {
HXLINE(  39)				this->kill();
            			}
            		}
HXLINE(  43)		int _hx_tmp1 = ::Math_obj::floor(this->x);
HXDLIN(  43)		if (!(::flixel::math::FlxMath_obj::pointInFlxRect(_hx_tmp1,::Math_obj::floor(this->y),this->bounds))) {
HXLINE(  45)			this->kill();
            		}
HXLINE(  48)		this->super::update(elapsed);
            	}



hx::ObjectPtr< FlxBullet_obj > FlxBullet_obj::__new() {
	hx::ObjectPtr< FlxBullet_obj > __this = new FlxBullet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxBullet_obj > FlxBullet_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxBullet_obj *__this = (FlxBullet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBullet_obj), true, "flixel.addons.weapon.FlxBullet"));
	*(void **)__this = FlxBullet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxBullet_obj::FlxBullet_obj()
{
}

void FlxBullet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBullet);
	HX_MARK_MEMBER_NAME(accelerates,"accelerates");
	HX_MARK_MEMBER_NAME(xAcceleration,"xAcceleration");
	HX_MARK_MEMBER_NAME(yAcceleration,"yAcceleration");
	HX_MARK_MEMBER_NAME(lifespan,"lifespan");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBullet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(accelerates,"accelerates");
	HX_VISIT_MEMBER_NAME(xAcceleration,"xAcceleration");
	HX_VISIT_MEMBER_NAME(yAcceleration,"yAcceleration");
	HX_VISIT_MEMBER_NAME(lifespan,"lifespan");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBullet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifespan") ) { return hx::Val( lifespan ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"accelerates") ) { return hx::Val( accelerates ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"xAcceleration") ) { return hx::Val( xAcceleration ); }
		if (HX_FIELD_EQ(inName,"yAcceleration") ) { return hx::Val( yAcceleration ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxBullet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifespan") ) { lifespan=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"accelerates") ) { accelerates=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"xAcceleration") ) { xAcceleration=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yAcceleration") ) { yAcceleration=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBullet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("accelerates","\xf6","\x5c","\x93","\x26"));
	outFields->push(HX_HCSTRING("xAcceleration","\xd8","\x20","\xae","\x14"));
	outFields->push(HX_HCSTRING("yAcceleration","\x59","\x9e","\x6e","\x5a"));
	outFields->push(HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBullet_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxBullet_obj,accelerates),HX_HCSTRING("accelerates","\xf6","\x5c","\x93","\x26")},
	{hx::fsInt,(int)offsetof(FlxBullet_obj,xAcceleration),HX_HCSTRING("xAcceleration","\xd8","\x20","\xae","\x14")},
	{hx::fsInt,(int)offsetof(FlxBullet_obj,yAcceleration),HX_HCSTRING("yAcceleration","\x59","\x9e","\x6e","\x5a")},
	{hx::fsFloat,(int)offsetof(FlxBullet_obj,lifespan),HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxBullet_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxBullet_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBullet_obj_sMemberFields[] = {
	HX_HCSTRING("accelerates","\xf6","\x5c","\x93","\x26"),
	HX_HCSTRING("xAcceleration","\xd8","\x20","\xae","\x14"),
	HX_HCSTRING("yAcceleration","\x59","\x9e","\x6e","\x5a"),
	HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FlxBullet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBullet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBullet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBullet_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBullet_obj::__mClass;

void FlxBullet_obj::__register()
{
	hx::Object *dummy = new FlxBullet_obj;
	FlxBullet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.weapon.FlxBullet","\xeb","\x5b","\xed","\x8c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBullet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBullet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBullet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBullet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBullet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBullet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace weapon
