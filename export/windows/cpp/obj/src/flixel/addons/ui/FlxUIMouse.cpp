// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_ui_FlxUIMouse
#include <flixel/addons/ui/FlxUIMouse.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5b237ea215abb15a_12_new,"flixel.addons.ui.FlxUIMouse","new",0x9b51d282,"flixel.addons.ui.FlxUIMouse.new","flixel/addons/ui/FlxUIMouse.hx",12,0xe71578ad)
HX_LOCAL_STACK_FRAME(_hx_pos_5b237ea215abb15a_27_update,"flixel.addons.ui.FlxUIMouse","update",0xc7ae0527,"flixel.addons.ui.FlxUIMouse.update","flixel/addons/ui/FlxUIMouse.hx",27,0xe71578ad)
namespace flixel{
namespace addons{
namespace ui{

void FlxUIMouse_obj::__construct( ::openfl::_legacy::display::Sprite CursorContainer){
            	HX_STACKFRAME(&_hx_pos_5b237ea215abb15a_12_new)
HXLINE(  15)		this->updateGlobalScreenPosition = true;
HXLINE(  19)		super::__construct(CursorContainer);
            	}

Dynamic FlxUIMouse_obj::__CreateEmpty() { return new FlxUIMouse_obj; }

void *FlxUIMouse_obj::_hx_vtable = 0;

Dynamic FlxUIMouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUIMouse_obj > _hx_result = new FlxUIMouse_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxUIMouse_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1191d8aa) {
		if (inClassId<=(int)0x0fe7efd5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0fe7efd5;
		} else {
			return inClassId==(int)0x1191d8aa;
		}
	} else {
		return inClassId==(int)0x23988866;
	}
}

void FlxUIMouse_obj::update(){
            	HX_STACKFRAME(&_hx_pos_5b237ea215abb15a_27_update)
HXLINE(  28)		int oldScreenX = this->_globalScreenX;
HXLINE(  29)		int oldScreenY = this->_globalScreenY;
HXLINE(  31)		this->super::update();
HXLINE(  33)		if (!(this->updateGlobalScreenPosition)) {
HXLINE(  35)			this->_globalScreenX = oldScreenX;
HXLINE(  36)			this->_globalScreenY = oldScreenY;
            		}
            	}



hx::ObjectPtr< FlxUIMouse_obj > FlxUIMouse_obj::__new( ::openfl::_legacy::display::Sprite CursorContainer) {
	hx::ObjectPtr< FlxUIMouse_obj > __this = new FlxUIMouse_obj();
	__this->__construct(CursorContainer);
	return __this;
}

hx::ObjectPtr< FlxUIMouse_obj > FlxUIMouse_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_legacy::display::Sprite CursorContainer) {
	FlxUIMouse_obj *__this = (FlxUIMouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUIMouse_obj), true, "flixel.addons.ui.FlxUIMouse"));
	*(void **)__this = FlxUIMouse_obj::_hx_vtable;
	__this->__construct(CursorContainer);
	return __this;
}

FlxUIMouse_obj::FlxUIMouse_obj()
{
}

hx::Val FlxUIMouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"updateGlobalScreenPosition") ) { return hx::Val( updateGlobalScreenPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUIMouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 26:
		if (HX_FIELD_EQ(inName,"updateGlobalScreenPosition") ) { updateGlobalScreenPosition=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUIMouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("updateGlobalScreenPosition","\xa1","\xbd","\x1d","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUIMouse_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxUIMouse_obj,updateGlobalScreenPosition),HX_HCSTRING("updateGlobalScreenPosition","\xa1","\xbd","\x1d","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUIMouse_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUIMouse_obj_sMemberFields[] = {
	HX_HCSTRING("updateGlobalScreenPosition","\xa1","\xbd","\x1d","\xd0"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FlxUIMouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUIMouse_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUIMouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUIMouse_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUIMouse_obj::__mClass;

void FlxUIMouse_obj::__register()
{
	hx::Object *dummy = new FlxUIMouse_obj;
	FlxUIMouse_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUIMouse","\x90","\x29","\x1a","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUIMouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUIMouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUIMouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUIMouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUIMouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUIMouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
