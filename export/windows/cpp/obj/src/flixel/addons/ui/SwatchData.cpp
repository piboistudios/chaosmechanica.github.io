// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_SwatchData
#include <flixel/addons/ui/SwatchData.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9efea113f2a4e97e_78_new,"flixel.addons.ui.SwatchData","new",0x34c16e49,"flixel.addons.ui.SwatchData.new","flixel/addons/ui/SwatchData.hx",78,0x0478b2c6)
static const int _hx_array_data_9e7095d7_1[] = {
	(int)-1,(int)-7829368,(int)-12303292,(int)-16777216,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_21_setColor,"flixel.addons.ui.SwatchData","setColor",0x29d12fd8,"flixel.addons.ui.SwatchData.setColor","flixel/addons/ui/SwatchData.hx",21,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_27_getColor,"flixel.addons.ui.SwatchData","getColor",0x7b73d664,"flixel.addons.ui.SwatchData.getColor","flixel/addons/ui/SwatchData.hx",27,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_37_get_hilight,"flixel.addons.ui.SwatchData","get_hilight",0xcfb34135,"flixel.addons.ui.SwatchData.get_hilight","flixel/addons/ui/SwatchData.hx",37,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_39_set_hilight,"flixel.addons.ui.SwatchData","set_hilight",0xda204841,"flixel.addons.ui.SwatchData.set_hilight","flixel/addons/ui/SwatchData.hx",39,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_46_get_midtone,"flixel.addons.ui.SwatchData","get_midtone",0x0bb55efa,"flixel.addons.ui.SwatchData.get_midtone","flixel/addons/ui/SwatchData.hx",46,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_48_set_midtone,"flixel.addons.ui.SwatchData","set_midtone",0x16226606,"flixel.addons.ui.SwatchData.set_midtone","flixel/addons/ui/SwatchData.hx",48,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_55_get_shadowMid,"flixel.addons.ui.SwatchData","get_shadowMid",0x46e77c88,"flixel.addons.ui.SwatchData.get_shadowMid","flixel/addons/ui/SwatchData.hx",55,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_57_set_shadowMid,"flixel.addons.ui.SwatchData","set_shadowMid",0x8bed5e94,"flixel.addons.ui.SwatchData.set_shadowMid","flixel/addons/ui/SwatchData.hx",57,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_64_get_shadowDark,"flixel.addons.ui.SwatchData","get_shadowDark",0xbdac8976,"flixel.addons.ui.SwatchData.get_shadowDark","flixel/addons/ui/SwatchData.hx",64,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_66_set_shadowDark,"flixel.addons.ui.SwatchData","set_shadowDark",0xddcc71ea,"flixel.addons.ui.SwatchData.set_shadowDark","flixel/addons/ui/SwatchData.hx",66,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_72_destroy,"flixel.addons.ui.SwatchData","destroy",0xa4e37363,"flixel.addons.ui.SwatchData.destroy","flixel/addons/ui/SwatchData.hx",72,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_87_copy,"flixel.addons.ui.SwatchData","copy",0xed4149ac,"flixel.addons.ui.SwatchData.copy","flixel/addons/ui/SwatchData.hx",87,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_93_toString,"flixel.addons.ui.SwatchData","toString",0x09af2623,"flixel.addons.ui.SwatchData.toString","flixel/addons/ui/SwatchData.hx",93,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_113_getRawDifference,"flixel.addons.ui.SwatchData","getRawDifference",0xcf5cb606,"flixel.addons.ui.SwatchData.getRawDifference","flixel/addons/ui/SwatchData.hx",113,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_168_doColorsEqual,"flixel.addons.ui.SwatchData","doColorsEqual",0xbc967d42,"flixel.addons.ui.SwatchData.doColorsEqual","flixel/addons/ui/SwatchData.hx",168,0x0478b2c6)
HX_LOCAL_STACK_FRAME(_hx_pos_9efea113f2a4e97e_195_getRGBdelta,"flixel.addons.ui.SwatchData","getRGBdelta",0x561e6b6a,"flixel.addons.ui.SwatchData.getRGBdelta","flixel/addons/ui/SwatchData.hx",195,0x0478b2c6)
namespace flixel{
namespace addons{
namespace ui{

void SwatchData_obj::__construct(::String Name,::Array< int > Colors){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_78_new)
HXLINE(  79)		if (hx::IsNull( Colors )) {
HXLINE(  80)			Colors = ::Array_obj< int >::fromData( _hx_array_data_9e7095d7_1,4);
            		}
HXLINE(  82)		this->name = Name;
HXLINE(  83)		this->colors = Colors;
            	}

Dynamic SwatchData_obj::__CreateEmpty() { return new SwatchData_obj; }

void *SwatchData_obj::_hx_vtable = 0;

Dynamic SwatchData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SwatchData_obj > _hx_result = new SwatchData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SwatchData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x270242d9;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_ui_SwatchData__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::addons::ui::SwatchData_obj::destroy,
};

void *SwatchData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_ui_SwatchData__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int SwatchData_obj::setColor(int i,int Value){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_21_setColor)
HXLINE(  22)		if (hx::IsNull( this->colors )) {
HXLINE(  22)			this->colors = ::Array_obj< int >::__new(0);
            		}
HXLINE(  23)		this->colors[i] = Value;
HXLINE(  24)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SwatchData_obj,setColor,return )

int SwatchData_obj::getColor(int i){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_27_getColor)
HXLINE(  28)		if ((this->colors->length >= i)) {
HXLINE(  29)			return this->colors->__get(i);
            		}
HXLINE(  31)		return (int)-16777216;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SwatchData_obj,getColor,return )

int SwatchData_obj::get_hilight(){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_37_get_hilight)
HXDLIN(  37)		return this->getColor((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,get_hilight,return )

int SwatchData_obj::set_hilight(int Value){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_39_set_hilight)
HXLINE(  40)		if (hx::IsNull( this->colors )) {
HXLINE(  40)			this->colors = ::Array_obj< int >::__new(0);
            		}
HXLINE(  41)		this->colors[(int)0] = Value;
HXLINE(  42)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SwatchData_obj,set_hilight,return )

int SwatchData_obj::get_midtone(){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_46_get_midtone)
HXDLIN(  46)		return this->getColor((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,get_midtone,return )

int SwatchData_obj::set_midtone(int Value){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_48_set_midtone)
HXLINE(  49)		if (hx::IsNull( this->colors )) {
HXLINE(  49)			this->colors = ::Array_obj< int >::__new(0);
            		}
HXLINE(  50)		this->colors[(int)1] = Value;
HXLINE(  51)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SwatchData_obj,set_midtone,return )

int SwatchData_obj::get_shadowMid(){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_55_get_shadowMid)
HXDLIN(  55)		return this->getColor((int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,get_shadowMid,return )

int SwatchData_obj::set_shadowMid(int Value){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_57_set_shadowMid)
HXLINE(  58)		if (hx::IsNull( this->colors )) {
HXLINE(  58)			this->colors = ::Array_obj< int >::__new(0);
            		}
HXLINE(  59)		this->colors[(int)2] = Value;
HXLINE(  60)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SwatchData_obj,set_shadowMid,return )

int SwatchData_obj::get_shadowDark(){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_64_get_shadowDark)
HXDLIN(  64)		return this->getColor((int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,get_shadowDark,return )

int SwatchData_obj::set_shadowDark(int Value){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_66_set_shadowDark)
HXLINE(  67)		if (hx::IsNull( this->colors )) {
HXLINE(  67)			this->colors = ::Array_obj< int >::__new(0);
            		}
HXLINE(  68)		this->colors[(int)3] = Value;
HXLINE(  69)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SwatchData_obj,set_shadowDark,return )

void SwatchData_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_72_destroy)
HXLINE(  73)		::flixel::util::FlxArrayUtil_obj::clearArray(this->colors,null());
HXLINE(  74)		this->colors = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,destroy,(void))

 ::flixel::addons::ui::SwatchData SwatchData_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_9efea113f2a4e97e_87_copy)
HXLINE(  88)		::Array< int > colorsCopy;
HXDLIN(  88)		if (hx::IsNotNull( this->colors )) {
HXLINE(  88)			colorsCopy = this->colors->copy();
            		}
            		else {
HXLINE(  88)			colorsCopy = null();
            		}
HXLINE(  89)		return  ::flixel::addons::ui::SwatchData_obj::__alloc( HX_CTX ,this->name,colorsCopy);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,copy,return )

::String SwatchData_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_93_toString)
HXLINE(  94)		::String str = HX_("(",28,00,00,00);
HXLINE(  95)		int i = (int)0;
HXLINE(  96)		if (hx::IsNotNull( this->colors )) {
HXLINE(  97)			int _g = (int)0;
HXDLIN(  97)			::Array< int > _g1 = this->colors;
HXDLIN(  97)			while((_g < _g1->length)){
HXLINE(  97)				int colorInt = _g1->__get(_g);
HXDLIN(  97)				_g = (_g + (int)1);
HXLINE(  98)				::String str1 = (HX_("",00,00,00,00) + ::StringTools_obj::hex(((int)((int)colorInt >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN(  98)				::String str2 = (str1 + ::StringTools_obj::hex(((int)((int)colorInt >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN(  98)				str = (str + (HX_("#",23,00,00,00) + (str2 + ::StringTools_obj::hex(((int)colorInt & (int)(int)255),(int)2))));
HXLINE(  99)				if ((i != (this->colors->length - (int)1))) {
HXLINE( 100)					str = (str + HX_(",",2c,00,00,00));
            				}
HXLINE( 102)				i = (i + (int)1);
            			}
            		}
            		else {
HXLINE( 105)			str = (str + HX_("null",87,9e,0e,49));
            		}
HXLINE( 107)		str = (str + ((HX_(",name=",e6,6f,38,2e) + this->name) + HX_(")",29,00,00,00)));
HXLINE( 108)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SwatchData_obj,toString,return )

int SwatchData_obj::getRawDifference( ::flixel::addons::ui::SwatchData other,::Array< int > otherColors, ::Dynamic __o_IgnoreInvisible){
 ::Dynamic IgnoreInvisible = __o_IgnoreInvisible.Default(false);
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_113_getRawDifference)
HXLINE( 114)		::Array< int > listA = this->colors;
HXLINE( 115)		if (hx::IsNotNull( this->colors )) {
HXLINE( 116)			listA = this->colors;
            		}
            		else {
HXLINE( 118)			listA = ::Array_obj< int >::__new(0);
            		}
HXLINE( 121)		::Array< int > listB = null();
HXLINE( 122)		if (hx::IsNotNull( other )) {
HXLINE( 123)			listB = other->colors;
            		}
            		else {
HXLINE( 125)			if (hx::IsNotNull( otherColors )) {
HXLINE( 126)				listB = otherColors;
            			}
            			else {
HXLINE( 128)				listB = ::Array_obj< int >::__new(0);
            			}
            		}
HXLINE( 132)		::Array< int > bigList;
HXLINE( 133)		::Array< int > smallList;
HXLINE( 135)		if ((listA->length < listB->length)) {
HXLINE( 136)			bigList = listB;
HXLINE( 137)			smallList = listA;
            		}
            		else {
HXLINE( 139)			bigList = listA;
HXLINE( 140)			smallList = listB;
            		}
HXLINE( 143)		int totalDiff = (int)0;
HXLINE( 144)		{
HXLINE( 144)			int _g1 = (int)0;
HXDLIN( 144)			int _g = smallList->length;
HXDLIN( 144)			while((_g1 < _g)){
HXLINE( 144)				_g1 = (_g1 + (int)1);
HXDLIN( 144)				int i = (_g1 - (int)1);
HXLINE( 146)				bool ignore = false;
HXLINE( 147)				bool _hx_tmp;
HXDLIN( 147)				if (IgnoreInvisible) {
HXLINE( 147)					if ((bigList->__get(i) != (int)0)) {
HXLINE( 147)						_hx_tmp = (smallList->__get(i) == (int)0);
            					}
            					else {
HXLINE( 147)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 147)					_hx_tmp = false;
            				}
HXDLIN( 147)				if (_hx_tmp) {
HXLINE( 149)					if ((listA->__get(i) == (int)0)) {
HXLINE( 151)						ignore = true;
            					}
            				}
HXLINE( 154)				if (!(ignore)) {
HXLINE( 156)					totalDiff = (totalDiff + this->getRGBdelta(bigList->__get(i),smallList->__get(i)));
            				}
            			}
            		}
HXLINE( 160)		int lengthDiff = (bigList->length - smallList->length);
HXLINE( 161)		if ((lengthDiff != (int)0)) {
HXLINE( 162)			totalDiff = (totalDiff + ((int)765 * lengthDiff));
            		}
HXLINE( 165)		return totalDiff;
            	}


HX_DEFINE_DYNAMIC_FUNC3(SwatchData_obj,getRawDifference,return )

bool SwatchData_obj::doColorsEqual( ::flixel::addons::ui::SwatchData other,::Array< int > otherColors){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_168_doColorsEqual)
HXLINE( 169)		::Array< int > otherArray = null();
HXLINE( 170)		if (hx::IsNotNull( other )) {
HXLINE( 171)			otherArray = other->colors;
            		}
            		else {
HXLINE( 173)			if (hx::IsNotNull( otherColors )) {
HXLINE( 174)				otherArray = otherColors;
            			}
            		}
HXLINE( 178)		if (hx::IsNull( otherArray )) {
HXLINE( 179)			return hx::IsNull( this->colors );
            		}
            		else {
HXLINE( 180)			if (hx::IsNull( this->colors )) {
HXLINE( 181)				return hx::IsNull( otherArray );
            			}
            		}
HXLINE( 184)		if ((otherArray->length != this->colors->length)) {
HXLINE( 185)			return false;
            		}
HXLINE( 187)		{
HXLINE( 187)			int _g1 = (int)0;
HXDLIN( 187)			int _g = this->colors->length;
HXDLIN( 187)			while((_g1 < _g)){
HXLINE( 187)				_g1 = (_g1 + (int)1);
HXDLIN( 187)				int i = (_g1 - (int)1);
HXLINE( 188)				int _hx_tmp = this->colors->__get(i);
HXDLIN( 188)				if ((_hx_tmp != otherArray->__get(i))) {
HXLINE( 189)					return false;
            				}
            			}
            		}
HXLINE( 192)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SwatchData_obj,doColorsEqual,return )

int SwatchData_obj::getRGBdelta(int a,int b){
            	HX_STACKFRAME(&_hx_pos_9efea113f2a4e97e_195_getRGBdelta)
HXLINE( 196)		int ra = ((int)((int)a >> (int)(int)16) & (int)(int)255);
HXLINE( 197)		int ga = ((int)((int)a >> (int)(int)8) & (int)(int)255);
HXLINE( 198)		int ba = ((int)a & (int)(int)255);
HXLINE( 200)		int rb = ((int)((int)b >> (int)(int)16) & (int)(int)255);
HXLINE( 201)		int gb = ((int)((int)b >> (int)(int)8) & (int)(int)255);
HXLINE( 202)		int bb = ((int)b & (int)(int)255);
HXLINE( 204)		Float _hx_tmp = ::Math_obj::abs((ra - rb));
HXDLIN( 204)		Float _hx_tmp1 = (_hx_tmp + ::Math_obj::abs((ga - gb)));
HXDLIN( 204)		return ::Std_obj::_hx_int((_hx_tmp1 + ::Math_obj::abs((ba - bb))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(SwatchData_obj,getRGBdelta,return )


hx::ObjectPtr< SwatchData_obj > SwatchData_obj::__new(::String Name,::Array< int > Colors) {
	hx::ObjectPtr< SwatchData_obj > __this = new SwatchData_obj();
	__this->__construct(Name,Colors);
	return __this;
}

hx::ObjectPtr< SwatchData_obj > SwatchData_obj::__alloc(hx::Ctx *_hx_ctx,::String Name,::Array< int > Colors) {
	SwatchData_obj *__this = (SwatchData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SwatchData_obj), true, "flixel.addons.ui.SwatchData"));
	*(void **)__this = SwatchData_obj::_hx_vtable;
	__this->__construct(Name,Colors);
	return __this;
}

SwatchData_obj::SwatchData_obj()
{
}

void SwatchData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SwatchData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(colors,"colors");
	HX_MARK_END_CLASS();
}

void SwatchData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(colors,"colors");
}

hx::Val SwatchData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { return hx::Val( colors ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hilight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_hilight() ); }
		if (HX_FIELD_EQ(inName,"midtone") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_midtone() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColor") ) { return hx::Val( getColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shadowMid") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shadowMid() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shadowDark") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shadowDark() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_hilight") ) { return hx::Val( get_hilight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hilight") ) { return hx::Val( set_hilight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_midtone") ) { return hx::Val( get_midtone_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_midtone") ) { return hx::Val( set_midtone_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRGBdelta") ) { return hx::Val( getRGBdelta_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_shadowMid") ) { return hx::Val( get_shadowMid_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shadowMid") ) { return hx::Val( set_shadowMid_dyn() ); }
		if (HX_FIELD_EQ(inName,"doColorsEqual") ) { return hx::Val( doColorsEqual_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_shadowDark") ) { return hx::Val( get_shadowDark_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shadowDark") ) { return hx::Val( set_shadowDark_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getRawDifference") ) { return hx::Val( getRawDifference_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SwatchData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { colors=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hilight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_hilight(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"midtone") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_midtone(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shadowMid") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shadowMid(inValue.Cast< int >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shadowDark") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shadowDark(inValue.Cast< int >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SwatchData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("colors","\xb0","\xc5","\x86","\xc6"));
	outFields->push(HX_HCSTRING("hilight","\x35","\xb2","\x2d","\x55"));
	outFields->push(HX_HCSTRING("midtone","\xfa","\xcf","\x2f","\x91"));
	outFields->push(HX_HCSTRING("shadowMid","\x88","\x2d","\xa0","\xf4"));
	outFields->push(HX_HCSTRING("shadowDark","\x76","\xb8","\x8e","\x11"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SwatchData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(SwatchData_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(SwatchData_obj,colors),HX_HCSTRING("colors","\xb0","\xc5","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SwatchData_obj_sStaticStorageInfo = 0;
#endif

static ::String SwatchData_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("colors","\xb0","\xc5","\x86","\xc6"),
	HX_HCSTRING("setColor","\x61","\xda","\x90","\x58"),
	HX_HCSTRING("getColor","\xed","\x80","\x33","\xaa"),
	HX_HCSTRING("get_hilight","\x4c","\x12","\x28","\xdb"),
	HX_HCSTRING("set_hilight","\x58","\x19","\x95","\xe5"),
	HX_HCSTRING("get_midtone","\x11","\x30","\x2a","\x17"),
	HX_HCSTRING("set_midtone","\x1d","\x37","\x97","\x21"),
	HX_HCSTRING("get_shadowMid","\x5f","\x01","\x04","\xb6"),
	HX_HCSTRING("set_shadowMid","\x6b","\xe3","\x09","\xfb"),
	HX_HCSTRING("get_shadowDark","\xbf","\x40","\x84","\x87"),
	HX_HCSTRING("set_shadowDark","\x33","\x29","\xa4","\xa7"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("getRawDifference","\x8f","\x91","\x07","\x88"),
	HX_HCSTRING("doColorsEqual","\x19","\x02","\xb3","\x2b"),
	HX_HCSTRING("getRGBdelta","\x81","\x3c","\x93","\x61"),
	::String(null()) };

static void SwatchData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SwatchData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SwatchData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SwatchData_obj::__mClass,"__mClass");
};

#endif

hx::Class SwatchData_obj::__mClass;

void SwatchData_obj::__register()
{
	hx::Object *dummy = new SwatchData_obj;
	SwatchData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.SwatchData","\xd7","\x95","\x70","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SwatchData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SwatchData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SwatchData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SwatchData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SwatchData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SwatchData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
