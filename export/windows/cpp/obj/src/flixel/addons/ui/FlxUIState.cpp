// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICursor
#include <flixel/addons/ui/FlxUICursor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISubState
#include <flixel/addons/ui/FlxUISubState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltip
#include <flixel/addons/ui/FlxUITooltip.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_060bddf2a47172f7_32_new,"flixel.addons.ui.FlxUIState","new",0xd1a4986e,"flixel.addons.ui.FlxUIState.new","flixel/addons/ui/FlxUIState.hx",32,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_91_set_reload_ui_on_asset_change,"flixel.addons.ui.FlxUIState","set_reload_ui_on_asset_change",0xa225ec2b,"flixel.addons.ui.FlxUIState.set_reload_ui_on_asset_change","flixel/addons/ui/FlxUIState.hx",91,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_99_create,"flixel.addons.ui.FlxUIState","create",0x98ac9bae,"flixel.addons.ui.FlxUIState.create","flixel/addons/ui/FlxUIState.hx",99,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_214_update,"flixel.addons.ui.FlxUIState","update",0xa3a2babb,"flixel.addons.ui.FlxUIState.update","flixel/addons/ui/FlxUIState.hx",214,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_234_cleanup,"flixel.addons.ui.FlxUIState","cleanup",0x9832f332,"flixel.addons.ui.FlxUIState.cleanup","flixel/addons/ui/FlxUIState.hx",234,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_239__cleanupUIVars,"flixel.addons.ui.FlxUIState","_cleanupUIVars",0x162e4237,"flixel.addons.ui.FlxUIState._cleanupUIVars","flixel/addons/ui/FlxUIState.hx",239,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_251_setUIVariable,"flixel.addons.ui.FlxUIState","setUIVariable",0x525b6c60,"flixel.addons.ui.FlxUIState.setUIVariable","flixel/addons/ui/FlxUIState.hx",251,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_264_resizeScreen,"flixel.addons.ui.FlxUIState","resizeScreen",0x61d3beb2,"flixel.addons.ui.FlxUIState.resizeScreen","flixel/addons/ui/FlxUIState.hx",264,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_273_openSubState,"flixel.addons.ui.FlxUIState","openSubState",0x6db12c8d,"flixel.addons.ui.FlxUIState.openSubState","flixel/addons/ui/FlxUIState.hx",273,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_285_closeSubState,"flixel.addons.ui.FlxUIState","closeSubState",0x6976bdd7,"flixel.addons.ui.FlxUIState.closeSubState","flixel/addons/ui/FlxUIState.hx",285,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_297_onResize,"flixel.addons.ui.FlxUIState","onResize",0x4e0195a5,"flixel.addons.ui.FlxUIState.onResize","flixel/addons/ui/FlxUIState.hx",297,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_306_onShowTooltip,"flixel.addons.ui.FlxUIState","onShowTooltip",0x0f570c35,"flixel.addons.ui.FlxUIState.onShowTooltip","flixel/addons/ui/FlxUIState.hx",306,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_310_destroy,"flixel.addons.ui.FlxUIState","destroy",0x11771408,"flixel.addons.ui.FlxUIState.destroy","flixel/addons/ui/FlxUIState.hx",310,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_329_forceFocus,"flixel.addons.ui.FlxUIState","forceFocus",0x1df8bf9f,"flixel.addons.ui.FlxUIState.forceFocus","flixel/addons/ui/FlxUIState.hx",329,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_344_onCursorEvent,"flixel.addons.ui.FlxUIState","onCursorEvent",0xc6d4e413,"flixel.addons.ui.FlxUIState.onCursorEvent","flixel/addons/ui/FlxUIState.hx",344,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_347_getEvent,"flixel.addons.ui.FlxUIState","getEvent",0x3b751cd6,"flixel.addons.ui.FlxUIState.getEvent","flixel/addons/ui/FlxUIState.hx",347,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_353_getRequest,"flixel.addons.ui.FlxUIState","getRequest",0x1680db0b,"flixel.addons.ui.FlxUIState.getRequest","flixel/addons/ui/FlxUIState.hx",353,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_356_getText,"flixel.addons.ui.FlxUIState","getText",0x0c6d6371,"flixel.addons.ui.FlxUIState.getText","flixel/addons/ui/FlxUIState.hx",356,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_372_createCursor,"flixel.addons.ui.FlxUIState","createCursor",0x97a69524,"flixel.addons.ui.FlxUIState.createCursor","flixel/addons/ui/FlxUIState.hx",372,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_378_createUI,"flixel.addons.ui.FlxUIState","createUI",0x91cdad82,"flixel.addons.ui.FlxUIState.createUI","flixel/addons/ui/FlxUIState.hx",378,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_388_loadUIFromData,"flixel.addons.ui.FlxUIState","loadUIFromData",0x503ddb80,"flixel.addons.ui.FlxUIState.loadUIFromData","flixel/addons/ui/FlxUIState.hx",388,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_391_reloadUI,"flixel.addons.ui.FlxUIState","reloadUI",0x9eb72b1f,"flixel.addons.ui.FlxUIState.reloadUI","flixel/addons/ui/FlxUIState.hx",391,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_66_boot,"flixel.addons.ui.FlxUIState","boot",0x9679c864,"flixel.addons.ui.FlxUIState.boot","flixel/addons/ui/FlxUIState.hx",66,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_71_boot,"flixel.addons.ui.FlxUIState","boot",0x9679c864,"flixel.addons.ui.FlxUIState.boot","flixel/addons/ui/FlxUIState.hx",71,0xa272d441)
namespace flixel{
namespace addons{
namespace ui{

void FlxUIState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_32_new)
HXLINE(  88)		this->getTextFallback = null();
HXLINE(  86)		this->_reload_countdown = (int)0;
HXLINE(  85)		this->_reload = false;
HXLINE(  83)		this->reload_ui_on_resize = false;
HXLINE(  58)		this->_liveFilePath = HX_("",00,00,00,00);
HXLINE(  50)		this->_xml_id = HX_("",00,00,00,00);
HXLINE(  42)		this->_cursorHidden = false;
HXLINE(  41)		this->hideCursorOnSubstate = false;
HXLINE(  40)		this->cursor = null();
HXLINE(  32)		super::__construct(TransIn,TransOut);
            	}

Dynamic FlxUIState_obj::__CreateEmpty() { return new FlxUIState_obj; }

void *FlxUIState_obj::_hx_vtable = 0;

Dynamic FlxUIState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUIState_obj > _hx_result = new FlxUIState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxUIState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3634c52c) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x2335d9a7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x3634c52c;
		}
	} else {
		return inClassId==(int)0x55c33fb8 || inClassId==(int)0x743878ee;
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getEvent_52bebde6,
	(  ::Dynamic (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getRequest_93d97691,
};

static ::flixel::addons::ui::interfaces::IFlxUIState_obj _hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IFlxUIState= {
	( void (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getEvent,
	(  ::Dynamic (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getRequest,
	( void (hx::Object::*)(bool,::Dynamic))&::flixel::addons::ui::FlxUIState_obj::forceFocus,
};

 ::Dynamic FlxUIState_obj::getRequest_93d97691(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params) {
			return getRequest(name,sender,data,params);
}

void FlxUIState_obj::getEvent_52bebde6(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params) {
			getEvent(name,sender,data,params);
}
void *FlxUIState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IEventGetter;
		case (int)0x0bdac137: return &_hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IFlxUIState;
	}
	return super::_hx_getInterface(inHash);
}

bool FlxUIState_obj::set_reload_ui_on_asset_change(bool b){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_91_set_reload_ui_on_asset_change)
HXLINE(  93)		if (b) {
HXLINE(  93)			::openfl::_legacy::Assets_obj::addEventListener(::openfl::_legacy::events::Event_obj::CHANGE,this->reloadUI_dyn(),null(),null(),null());
            		}
            		else {
HXLINE(  94)			::openfl::_legacy::Assets_obj::removeEventListener(::openfl::_legacy::events::Event_obj::CHANGE,this->reloadUI_dyn(),null());
            		}
HXLINE(  95)		return (this->reload_ui_on_asset_change = b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,set_reload_ui_on_asset_change,return )

void FlxUIState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_99_create)
HXLINE( 100)		if (hx::IsNotNull( ::flixel::addons::ui::FlxUIState_obj::static_tongue )) {
HXLINE( 102)			this->_tongue = ::flixel::addons::ui::FlxUIState_obj::static_tongue;
            		}
HXLINE( 106)		bool _hx_tmp;
HXDLIN( 106)		if (hx::IsNotNull( ::flixel::addons::ui::FlxUIState_obj::static_liveFilePath )) {
HXLINE( 106)			_hx_tmp = (::flixel::addons::ui::FlxUIState_obj::static_liveFilePath != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 106)			_hx_tmp = false;
            		}
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 108)			this->_liveFilePath = ::flixel::addons::ui::FlxUIState_obj::static_liveFilePath;
            		}
HXLINE( 113)		if ((this->_makeCursor == true)) {
HXLINE( 115)			this->cursor = this->createCursor();
            		}
HXLINE( 119)		this->tooltips =  ::flixel::addons::ui::FlxUITooltipManager_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 121)		 ::haxe::xml::Fast liveFile = null();
HXLINE( 124)		bool _hx_tmp1;
HXDLIN( 124)		if (hx::IsNotNull( this->_liveFilePath )) {
HXLINE( 124)			_hx_tmp1 = (this->_liveFilePath != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 124)			_hx_tmp1 = false;
            		}
HXDLIN( 124)		if (_hx_tmp1) {
HXLINE( 126)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE( 128)				liveFile = ::flixel::addons::ui::U_obj::readFast(::flixel::addons::ui::U_obj::fixSlash((this->_liveFilePath + this->_xml_id)));
HXLINE( 129)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 129)				::String _hx_tmp3 = (HX_("liveFile = ",db,e2,06,d5) + ::Std_obj::string(liveFile));
HXDLIN( 129)				_hx_tmp2(_hx_tmp3,hx::SourceInfo(HX_("FlxUIState.hx",93,7e,4b,70),129,HX_("flixel.addons.ui.FlxUIState",7c,89,c0,87),HX_("create",fc,66,0f,7c)));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String msg = _hx_e;
HXLINE( 133)					::flixel::FlxG_obj::log->advanced(msg,::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 134)					::haxe::Log_obj::trace(msg,hx::SourceInfo(HX_("FlxUIState.hx",93,7e,4b,70),134,HX_("flixel.addons.ui.FlxUIState",7c,89,c0,87),HX_("create",fc,66,0f,7c)));
HXLINE( 135)					liveFile = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 138)		this->_ui = this->createUI(null(),hx::ObjectPtr<OBJ_>(this),null(),this->_tongue,this->_liveFilePath);
HXLINE( 142)		this->add(this->_ui);
HXLINE( 144)		if (hx::IsNotNull( this->getTextFallback )) {
HXLINE( 146)			this->_ui->getTextFallback = this->getTextFallback;
            		}
HXLINE( 149)		bool _hx_tmp4;
HXDLIN( 149)		if (hx::IsNotNull( this->_xml_id )) {
HXLINE( 149)			_hx_tmp4 = (this->_xml_id != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 149)			_hx_tmp4 = false;
            		}
HXDLIN( 149)		if (_hx_tmp4) {
HXLINE( 151)			 ::haxe::xml::Fast data = null();
HXLINE( 152)			::String errorMsg = HX_("",00,00,00,00);
HXLINE( 154)			if (hx::IsNull( liveFile )) {
HXLINE( 156)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 158)					data = ( ( ::haxe::xml::Fast)(::flixel::addons::ui::U_obj::xml(this->_xml_id,null(),null(),null())) );
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE( 162)						errorMsg = msg1;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 164)				if (hx::IsNull( data )) {
HXLINE( 166)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE( 168)						data = ( ( ::haxe::xml::Fast)(::flixel::addons::ui::U_obj::xml(this->_xml_id,HX_("xml",d7,6d,5b,00),true,HX_("",00,00,00,00))) );
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg2 = _hx_e;
HXLINE( 172)							errorMsg = (errorMsg + (HX_(", ",74,26,00,00) + msg2));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE( 177)			if (hx::IsNull( data )) {
HXLINE( 179)				if (hx::IsNotNull( liveFile )) {
HXLINE( 181)					this->loadUIFromData(liveFile);
            				}
            				else {
HXLINE( 185)					::flixel::FlxG_obj::log->advanced(((HX_("FlxUISubState: Could not load _xml_id \"",93,ad,c0,63) + this->_xml_id) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            				}
            			}
            			else {
HXLINE( 190)				this->loadUIFromData(data);
            			}
            		}
            		else {
HXLINE( 195)			this->loadUIFromData(null());
            		}
HXLINE( 199)		bool _hx_tmp5;
HXDLIN( 199)		if (hx::IsNotNull( this->cursor )) {
HXLINE( 199)			_hx_tmp5 = hx::IsNotNull( this->_ui );
            		}
            		else {
HXLINE( 199)			_hx_tmp5 = false;
            		}
HXDLIN( 199)		if (_hx_tmp5) {
HXLINE( 200)			this->add(this->cursor);
HXLINE( 201)			this->cursor->addWidgetsFromUI(this->_ui);
HXLINE( 202)			this->cursor->findVisibleLocation((int)0,null(),null());
            		}
HXLINE( 206)		this->tooltips->init();
HXLINE( 208)		this->super::create();
HXLINE( 210)		this->cleanup();
            	}


void FlxUIState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_214_update)
HXLINE( 215)		this->super::update(elapsed);
HXLINE( 216)		if (hx::IsNotNull( this->tooltips )) {
HXLINE( 218)			this->tooltips->update(elapsed);
            		}
HXLINE( 220)		if (this->_reload) {
HXLINE( 221)			if ((this->_reload_countdown > (int)0)) {
HXLINE( 222)				this->_reload_countdown--;
HXLINE( 223)				if ((this->_reload_countdown == (int)0)) {
HXLINE( 224)					this->reloadUI(null());
            				}
            			}
            		}
            	}


void FlxUIState_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_234_cleanup)
HXDLIN( 234)		this->_ui->cleanup();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIState_obj,cleanup,(void))

void FlxUIState_obj::_cleanupUIVars(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_239__cleanupUIVars)
HXDLIN( 239)		if (hx::IsNotNull( this->_ui_vars )) {
HXLINE( 241)			{
HXLINE( 241)				 ::Dynamic key = this->_ui_vars->keys();
HXDLIN( 241)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 241)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 243)					this->_ui_vars->remove(key1);
            				}
            			}
HXLINE( 245)			this->_ui_vars = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIState_obj,_cleanupUIVars,(void))

void FlxUIState_obj::setUIVariable(::String key,::String value){
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_251_setUIVariable)
HXDLIN( 251)		if (hx::IsNotNull( this->_ui )) {
HXLINE( 254)			this->_ui->setVariable(key,value);
            		}
            		else {
HXLINE( 259)			if (hx::IsNull( this->_ui_vars )) {
HXLINE( 259)				this->_ui_vars =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 260)			this->_ui_vars->set(key,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,setUIVariable,(void))

void FlxUIState_obj::resizeScreen(hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float width = __o_width.Default(800);
Float height = __o_height.Default(600);
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_264_resizeScreen)
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,resizeScreen,(void))

void FlxUIState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_273_openSubState)
HXLINE( 275)		bool _hx_tmp;
HXDLIN( 275)		bool _hx_tmp1;
HXDLIN( 275)		if (hx::IsNotNull( this->cursor )) {
HXLINE( 275)			_hx_tmp1 = this->hideCursorOnSubstate;
            		}
            		else {
HXLINE( 275)			_hx_tmp1 = false;
            		}
HXDLIN( 275)		if (_hx_tmp1) {
HXLINE( 275)			_hx_tmp = (this->cursor->visible == true);
            		}
            		else {
HXLINE( 275)			_hx_tmp = false;
            		}
HXDLIN( 275)		if (_hx_tmp) {
HXLINE( 277)			this->_cursorHidden = true;
HXLINE( 278)			this->cursor->set_visible(false);
            		}
HXLINE( 281)		this->super::openSubState(SubState);
            	}


void FlxUIState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_285_closeSubState)
HXLINE( 287)		bool _hx_tmp;
HXDLIN( 287)		bool _hx_tmp1;
HXDLIN( 287)		if (hx::IsNotNull( this->cursor )) {
HXLINE( 287)			_hx_tmp1 = this->hideCursorOnSubstate;
            		}
            		else {
HXLINE( 287)			_hx_tmp1 = false;
            		}
HXDLIN( 287)		if (_hx_tmp1) {
HXLINE( 287)			_hx_tmp = this->_cursorHidden;
            		}
            		else {
HXLINE( 287)			_hx_tmp = false;
            		}
HXDLIN( 287)		if (_hx_tmp) {
HXLINE( 289)			this->_cursorHidden = false;
HXLINE( 290)			this->cursor->set_visible(true);
            		}
HXLINE( 293)		this->super::closeSubState();
            	}


void FlxUIState_obj::onResize(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_297_onResize)
HXDLIN( 297)		if (this->reload_ui_on_resize) {
HXLINE( 298)			::flixel::FlxG_obj::scaleMode->onMeasure(Width,Height);
HXLINE( 299)			this->_reload_countdown = (int)1;
HXLINE( 300)			this->_reload = true;
            		}
            	}


void FlxUIState_obj::onShowTooltip( ::flixel::addons::ui::FlxUITooltip t){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_306_onShowTooltip)
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,onShowTooltip,(void))

void FlxUIState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_310_destroy)
HXLINE( 311)		this->destroyed = true;
HXLINE( 313)		if (hx::IsNotNull( this->_ui )) {
HXLINE( 314)			this->_ui->destroy();
HXLINE( 315)			this->remove(this->_ui,true);
HXLINE( 316)			this->_ui = null();
            		}
HXLINE( 319)		if (hx::IsNotNull( this->tooltips )) {
HXLINE( 321)			this->tooltips->destroy();
HXLINE( 322)			this->tooltips = null();
            		}
HXLINE( 325)		this->super::destroy();
            	}


void FlxUIState_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_329_forceFocus)
HXDLIN( 329)		if (hx::IsNotNull( this->_ui )) {
HXLINE( 331)			if (b) {
HXLINE( 333)				this->_ui->set_focus(thing);
            			}
            			else {
HXLINE( 337)				this->_ui->set_focus(null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,forceFocus,(void))

void FlxUIState_obj::onCursorEvent(::String code,::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_344_onCursorEvent)
HXDLIN( 344)		this->getEvent(code,target,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,onCursorEvent,(void))

void FlxUIState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_347_getEvent)
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUIState_obj,getEvent,(void))

 ::Dynamic FlxUIState_obj::getRequest(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_353_getRequest)
HXDLIN( 353)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUIState_obj,getRequest,return )

::String FlxUIState_obj::getText(::String Flag,::String __o_Context,hx::Null< bool >  __o_Safe){
::String Context = __o_Context.Default(HX_HCSTRING("ui","\x54","\x66","\x00","\x00"));
bool Safe = __o_Safe.Default(true);
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_356_getText)
HXLINE( 357)		if (hx::IsNotNull( this->_tongue )) {
HXLINE( 358)			return ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_tongue,Flag,Context,Safe);
            		}
HXLINE( 360)		if (hx::IsNotNull( this->getTextFallback )) {
HXLINE( 361)			return ( (::String)(this->getTextFallback(Flag,Context,Safe)) );
            		}
HXLINE( 363)		return Flag;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUIState_obj,getText,return )

 ::flixel::addons::ui::FlxUICursor FlxUIState_obj::createCursor(){
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_372_createCursor)
HXDLIN( 372)		return  ::flixel::addons::ui::FlxUICursor_obj::__alloc( HX_CTX ,this->onCursorEvent_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIState_obj,createCursor,return )

 ::flixel::addons::ui::FlxUI FlxUIState_obj::createUI( ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_){
::String liveFilePath_ = __o_liveFilePath_.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_378_createUI)
HXLINE( 379)		 ::flixel::addons::ui::FlxUI flxui =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,ptr,superIndex_,tongue_,liveFilePath_,this->_ui_vars);
HXLINE( 380)		this->_cleanupUIVars();
HXLINE( 381)		return flxui;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUIState_obj,createUI,return )

void FlxUIState_obj::loadUIFromData( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_388_loadUIFromData)
HXDLIN( 388)		this->_ui->load(data);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,loadUIFromData,(void))

void FlxUIState_obj::reloadUI( ::openfl::_legacy::events::Event e){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_391_reloadUI)
HXLINE( 392)		if (hx::IsNotNull( this->_ui )) {
HXLINE( 393)			this->remove(this->_ui,true);
HXLINE( 394)			this->_ui->destroy();
HXLINE( 395)			this->_ui = null();
            		}
HXLINE( 398)		this->_ui = this->createUI(null(),hx::ObjectPtr<OBJ_>(this),null(),this->_tongue,null());
HXLINE( 399)		this->add(this->_ui);
HXLINE( 401)		 ::haxe::xml::Fast data = ( ( ::haxe::xml::Fast)(::flixel::addons::ui::U_obj::xml(this->_xml_id,null(),null(),null())) );
HXLINE( 402)		if (hx::IsNotNull( data )) {
HXLINE( 404)			this->loadUIFromData(data);
            		}
HXLINE( 407)		this->_reload = false;
HXLINE( 408)		this->_reload_countdown = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,reloadUI,(void))

::Dynamic FlxUIState_obj::static_tongue;

::String FlxUIState_obj::static_liveFilePath;


hx::ObjectPtr< FlxUIState_obj > FlxUIState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	hx::ObjectPtr< FlxUIState_obj > __this = new FlxUIState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

hx::ObjectPtr< FlxUIState_obj > FlxUIState_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FlxUIState_obj *__this = (FlxUIState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUIState_obj), true, "flixel.addons.ui.FlxUIState"));
	*(void **)__this = FlxUIState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FlxUIState_obj::FlxUIState_obj()
{
}

void FlxUIState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUIState);
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(hideCursorOnSubstate,"hideCursorOnSubstate");
	HX_MARK_MEMBER_NAME(_cursorHidden,"_cursorHidden");
	HX_MARK_MEMBER_NAME(tooltips,"tooltips");
	HX_MARK_MEMBER_NAME(_xml_id,"_xml_id");
	HX_MARK_MEMBER_NAME(_liveFilePath,"_liveFilePath");
	HX_MARK_MEMBER_NAME(_makeCursor,"_makeCursor");
	HX_MARK_MEMBER_NAME(_ui_vars,"_ui_vars");
	HX_MARK_MEMBER_NAME(_ui,"_ui");
	HX_MARK_MEMBER_NAME(_tongue,"_tongue");
	HX_MARK_MEMBER_NAME(reload_ui_on_asset_change,"reload_ui_on_asset_change");
	HX_MARK_MEMBER_NAME(reload_ui_on_resize,"reload_ui_on_resize");
	HX_MARK_MEMBER_NAME(_reload,"_reload");
	HX_MARK_MEMBER_NAME(_reload_countdown,"_reload_countdown");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	 ::flixel::addons::transition::FlxTransitionableState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUIState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(hideCursorOnSubstate,"hideCursorOnSubstate");
	HX_VISIT_MEMBER_NAME(_cursorHidden,"_cursorHidden");
	HX_VISIT_MEMBER_NAME(tooltips,"tooltips");
	HX_VISIT_MEMBER_NAME(_xml_id,"_xml_id");
	HX_VISIT_MEMBER_NAME(_liveFilePath,"_liveFilePath");
	HX_VISIT_MEMBER_NAME(_makeCursor,"_makeCursor");
	HX_VISIT_MEMBER_NAME(_ui_vars,"_ui_vars");
	HX_VISIT_MEMBER_NAME(_ui,"_ui");
	HX_VISIT_MEMBER_NAME(_tongue,"_tongue");
	HX_VISIT_MEMBER_NAME(reload_ui_on_asset_change,"reload_ui_on_asset_change");
	HX_VISIT_MEMBER_NAME(reload_ui_on_resize,"reload_ui_on_resize");
	HX_VISIT_MEMBER_NAME(_reload,"_reload");
	HX_VISIT_MEMBER_NAME(_reload_countdown,"_reload_countdown");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	 ::flixel::addons::transition::FlxTransitionableState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUIState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ui") ) { return hx::Val( _ui ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { return hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_xml_id") ) { return hx::Val( _xml_id ); }
		if (HX_FIELD_EQ(inName,"_tongue") ) { return hx::Val( _tongue ); }
		if (HX_FIELD_EQ(inName,"_reload") ) { return hx::Val( _reload ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tooltips") ) { return hx::Val( tooltips ); }
		if (HX_FIELD_EQ(inName,"_ui_vars") ) { return hx::Val( _ui_vars ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return hx::Val( createUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadUI") ) { return hx::Val( reloadUI_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return hx::Val( destroyed ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { return hx::Val( forceFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRequest") ) { return hx::Val( getRequest_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_makeCursor") ) { return hx::Val( _makeCursor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeScreen") ) { return hx::Val( resizeScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCursor") ) { return hx::Val( createCursor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_cursorHidden") ) { return hx::Val( _cursorHidden ); }
		if (HX_FIELD_EQ(inName,"_liveFilePath") ) { return hx::Val( _liveFilePath ); }
		if (HX_FIELD_EQ(inName,"setUIVariable") ) { return hx::Val( setUIVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"onShowTooltip") ) { return hx::Val( onShowTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCursorEvent") ) { return hx::Val( onCursorEvent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cleanupUIVars") ) { return hx::Val( _cleanupUIVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadUIFromData") ) { return hx::Val( loadUIFromData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return hx::Val( getTextFallback ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_reload_countdown") ) { return hx::Val( _reload_countdown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"reload_ui_on_resize") ) { return hx::Val( reload_ui_on_resize ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"hideCursorOnSubstate") ) { return hx::Val( hideCursorOnSubstate ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"reload_ui_on_asset_change") ) { return hx::Val( reload_ui_on_asset_change ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"set_reload_ui_on_asset_change") ) { return hx::Val( set_reload_ui_on_asset_change_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUIState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"static_tongue") ) { outValue = ( static_tongue ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"static_liveFilePath") ) { outValue = ( static_liveFilePath ); return true; }
	}
	return false;
}

hx::Val FlxUIState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ui") ) { _ui=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::flixel::addons::ui::FlxUICursor >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_xml_id") ) { _xml_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tongue") ) { _tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reload") ) { _reload=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tooltips") ) { tooltips=inValue.Cast<  ::flixel::addons::ui::FlxUITooltipManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ui_vars") ) { _ui_vars=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_makeCursor") ) { _makeCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_cursorHidden") ) { _cursorHidden=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_liveFilePath") ) { _liveFilePath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_reload_countdown") ) { _reload_countdown=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"reload_ui_on_resize") ) { reload_ui_on_resize=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"hideCursorOnSubstate") ) { hideCursorOnSubstate=inValue.Cast< bool >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"reload_ui_on_asset_change") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_reload_ui_on_asset_change(inValue.Cast< bool >()) );reload_ui_on_asset_change=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxUIState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"static_tongue") ) { static_tongue=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"static_liveFilePath") ) { static_liveFilePath=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void FlxUIState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"));
	outFields->push(HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e"));
	outFields->push(HX_HCSTRING("hideCursorOnSubstate","\x28","\x20","\x2f","\xe3"));
	outFields->push(HX_HCSTRING("_cursorHidden","\xbf","\x59","\x51","\x6b"));
	outFields->push(HX_HCSTRING("tooltips","\x10","\xb6","\x8a","\xd0"));
	outFields->push(HX_HCSTRING("_xml_id","\x22","\x16","\xa3","\x73"));
	outFields->push(HX_HCSTRING("_liveFilePath","\x2c","\x08","\x44","\x93"));
	outFields->push(HX_HCSTRING("_makeCursor","\x83","\x30","\x42","\x63"));
	outFields->push(HX_HCSTRING("_ui_vars","\x38","\xca","\xda","\x37"));
	outFields->push(HX_HCSTRING("_ui","\x73","\x7c","\x48","\x00"));
	outFields->push(HX_HCSTRING("_tongue","\x63","\x57","\x5b","\x02"));
	outFields->push(HX_HCSTRING("reload_ui_on_asset_change","\xba","\xde","\x31","\x01"));
	outFields->push(HX_HCSTRING("reload_ui_on_resize","\x4f","\xeb","\x1e","\x44"));
	outFields->push(HX_HCSTRING("_reload","\xf8","\x64","\x56","\x72"));
	outFields->push(HX_HCSTRING("_reload_countdown","\x6a","\x17","\x8b","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUIState_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxUIState_obj,destroyed),HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4")},
	{hx::fsObject /*::flixel::addons::ui::FlxUICursor*/ ,(int)offsetof(FlxUIState_obj,cursor),HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e")},
	{hx::fsBool,(int)offsetof(FlxUIState_obj,hideCursorOnSubstate),HX_HCSTRING("hideCursorOnSubstate","\x28","\x20","\x2f","\xe3")},
	{hx::fsBool,(int)offsetof(FlxUIState_obj,_cursorHidden),HX_HCSTRING("_cursorHidden","\xbf","\x59","\x51","\x6b")},
	{hx::fsObject /*::flixel::addons::ui::FlxUITooltipManager*/ ,(int)offsetof(FlxUIState_obj,tooltips),HX_HCSTRING("tooltips","\x10","\xb6","\x8a","\xd0")},
	{hx::fsString,(int)offsetof(FlxUIState_obj,_xml_id),HX_HCSTRING("_xml_id","\x22","\x16","\xa3","\x73")},
	{hx::fsString,(int)offsetof(FlxUIState_obj,_liveFilePath),HX_HCSTRING("_liveFilePath","\x2c","\x08","\x44","\x93")},
	{hx::fsBool,(int)offsetof(FlxUIState_obj,_makeCursor),HX_HCSTRING("_makeCursor","\x83","\x30","\x42","\x63")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUIState_obj,_ui_vars),HX_HCSTRING("_ui_vars","\x38","\xca","\xda","\x37")},
	{hx::fsObject /*::flixel::addons::ui::FlxUI*/ ,(int)offsetof(FlxUIState_obj,_ui),HX_HCSTRING("_ui","\x73","\x7c","\x48","\x00")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IFireTongue*/ ,(int)offsetof(FlxUIState_obj,_tongue),HX_HCSTRING("_tongue","\x63","\x57","\x5b","\x02")},
	{hx::fsBool,(int)offsetof(FlxUIState_obj,reload_ui_on_asset_change),HX_HCSTRING("reload_ui_on_asset_change","\xba","\xde","\x31","\x01")},
	{hx::fsBool,(int)offsetof(FlxUIState_obj,reload_ui_on_resize),HX_HCSTRING("reload_ui_on_resize","\x4f","\xeb","\x1e","\x44")},
	{hx::fsBool,(int)offsetof(FlxUIState_obj,_reload),HX_HCSTRING("_reload","\xf8","\x64","\x56","\x72")},
	{hx::fsInt,(int)offsetof(FlxUIState_obj,_reload_countdown),HX_HCSTRING("_reload_countdown","\x6a","\x17","\x8b","\x78")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUIState_obj,getTextFallback),HX_HCSTRING("getTextFallback","\xa5","\xc3","\x03","\x82")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUIState_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::ui::interfaces::IFireTongue*/ ,(void *) &FlxUIState_obj::static_tongue,HX_HCSTRING("static_tongue","\x75","\x8c","\x1c","\xbc")},
	{hx::fsString,(void *) &FlxUIState_obj::static_liveFilePath,HX_HCSTRING("static_liveFilePath","\xbe","\x56","\xdd","\x71")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUIState_obj_sMemberFields[] = {
	HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"),
	HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e"),
	HX_HCSTRING("hideCursorOnSubstate","\x28","\x20","\x2f","\xe3"),
	HX_HCSTRING("_cursorHidden","\xbf","\x59","\x51","\x6b"),
	HX_HCSTRING("tooltips","\x10","\xb6","\x8a","\xd0"),
	HX_HCSTRING("_xml_id","\x22","\x16","\xa3","\x73"),
	HX_HCSTRING("_liveFilePath","\x2c","\x08","\x44","\x93"),
	HX_HCSTRING("_makeCursor","\x83","\x30","\x42","\x63"),
	HX_HCSTRING("_ui_vars","\x38","\xca","\xda","\x37"),
	HX_HCSTRING("_ui","\x73","\x7c","\x48","\x00"),
	HX_HCSTRING("_tongue","\x63","\x57","\x5b","\x02"),
	HX_HCSTRING("reload_ui_on_asset_change","\xba","\xde","\x31","\x01"),
	HX_HCSTRING("reload_ui_on_resize","\x4f","\xeb","\x1e","\x44"),
	HX_HCSTRING("_reload","\xf8","\x64","\x56","\x72"),
	HX_HCSTRING("_reload_countdown","\x6a","\x17","\x8b","\x78"),
	HX_HCSTRING("getTextFallback","\xa5","\xc3","\x03","\x82"),
	HX_HCSTRING("set_reload_ui_on_asset_change","\x9d","\xca","\x48","\xab"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	HX_HCSTRING("_cleanupUIVars","\x85","\x0b","\x62","\xdf"),
	HX_HCSTRING("setUIVariable","\xd2","\xc6","\x16","\xed"),
	HX_HCSTRING("resizeScreen","\x80","\xf8","\x6a","\x2b"),
	HX_HCSTRING("openSubState","\x5b","\x66","\x48","\x37"),
	HX_HCSTRING("closeSubState","\x49","\x18","\x32","\x04"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("onShowTooltip","\xa7","\x66","\x12","\xaa"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("forceFocus","\xed","\x49","\x5e","\x9b"),
	HX_HCSTRING("onCursorEvent","\x85","\x3e","\x90","\x61"),
	HX_HCSTRING("getEvent","\xa4","\xd7","\x9b","\xd5"),
	HX_HCSTRING("getRequest","\x59","\x65","\xe6","\x93"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("createCursor","\xf2","\xce","\x3d","\x61"),
	HX_HCSTRING("createUI","\x50","\x68","\xf4","\x2b"),
	HX_HCSTRING("loadUIFromData","\xce","\xa4","\x71","\x19"),
	HX_HCSTRING("reloadUI","\xed","\xe5","\xdd","\x38"),
	::String(null()) };

static void FlxUIState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUIState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUIState_obj::static_tongue,"static_tongue");
	HX_MARK_MEMBER_NAME(FlxUIState_obj::static_liveFilePath,"static_liveFilePath");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUIState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUIState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUIState_obj::static_tongue,"static_tongue");
	HX_VISIT_MEMBER_NAME(FlxUIState_obj::static_liveFilePath,"static_liveFilePath");
};

#endif

hx::Class FlxUIState_obj::__mClass;

static ::String FlxUIState_obj_sStaticFields[] = {
	HX_HCSTRING("static_tongue","\x75","\x8c","\x1c","\xbc"),
	HX_HCSTRING("static_liveFilePath","\xbe","\x56","\xdd","\x71"),
	::String(null())
};

void FlxUIState_obj::__register()
{
	hx::Object *dummy = new FlxUIState_obj;
	FlxUIState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUIState","\x7c","\x89","\xc0","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUIState_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxUIState_obj::__SetStatic;
	__mClass->mMarkFunc = FlxUIState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUIState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUIState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUIState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUIState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUIState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUIState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUIState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_66_boot)
HXDLIN(  66)		static_tongue = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_71_boot)
HXDLIN(  71)		static_liveFilePath = HX_("",00,00,00,00);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
