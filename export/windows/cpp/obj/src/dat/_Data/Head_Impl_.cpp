// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_dat__Data_Head_Impl_
#include <dat/_Data/Head_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f2d50615ddde2172_216_get_id,"dat._Data.Head_Impl_","get_id",0x14c61556,"dat._Data.Head_Impl_.get_id","cdb/Module.hx",216,0x02d48d44)
HX_LOCAL_STACK_FRAME(_hx_pos_f2d50615ddde2172_192_get_lockSpeed,"dat._Data.Head_Impl_","get_lockSpeed",0xe9db9381,"dat._Data.Head_Impl_.get_lockSpeed","cdb/Module.hx",192,0x02d48d44)
HX_LOCAL_STACK_FRAME(_hx_pos_f2d50615ddde2172_192_get_scanRange,"dat._Data.Head_Impl_","get_scanRange",0x42b54ee5,"dat._Data.Head_Impl_.get_scanRange","cdb/Module.hx",192,0x02d48d44)
namespace dat{
namespace _Data{

void Head_Impl__obj::__construct() { }

Dynamic Head_Impl__obj::__CreateEmpty() { return new Head_Impl__obj; }

void *Head_Impl__obj::_hx_vtable = 0;

Dynamic Head_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Head_Impl__obj > _hx_result = new Head_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Head_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6bcf0d92;
}

::String Head_Impl__obj::get_id( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_f2d50615ddde2172_216_get_id)
HXDLIN( 216)		return ( (::String)(this1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Head_Impl__obj,get_id,return )

Float Head_Impl__obj::get_lockSpeed( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_f2d50615ddde2172_192_get_lockSpeed)
HXDLIN( 192)		return ( (Float)(this1->__Field(HX_("lockSpeed",9c,57,4b,bc),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Head_Impl__obj,get_lockSpeed,return )

Float Head_Impl__obj::get_scanRange( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_f2d50615ddde2172_192_get_scanRange)
HXDLIN( 192)		return ( (Float)(this1->__Field(HX_("scanRange",00,13,25,15),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Head_Impl__obj,get_scanRange,return )


Head_Impl__obj::Head_Impl__obj()
{
}

bool Head_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"get_id") ) { outValue = get_id_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_lockSpeed") ) { outValue = get_lockSpeed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_scanRange") ) { outValue = get_scanRange_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Head_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Head_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Head_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Head_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Head_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Head_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Head_Impl__obj::__mClass;

static ::String Head_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("get_id","\x24","\xf3","\x2f","\xa3"),
	HX_HCSTRING("get_lockSpeed","\x73","\x2b","\xaf","\x7d"),
	HX_HCSTRING("get_scanRange","\xd7","\xe6","\x88","\xd6"),
	::String(null())
};

void Head_Impl__obj::__register()
{
	hx::Object *dummy = new Head_Impl__obj;
	Head_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("dat._Data.Head_Impl_","\xfc","\xeb","\xb0","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Head_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Head_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Head_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Head_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Head_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Head_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Head_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dat
} // end namespace _Data
