// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_cdb_Index
#include <cdb/Index.h>
#endif
#ifndef INCLUDED_cdb_IndexId
#include <cdb/IndexId.h>
#endif
#ifndef INCLUDED_cdb_Parser
#include <cdb/Parser.h>
#endif
#ifndef INCLUDED_dat_Data
#include <dat/Data.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ef66e8c3e21c0884_488_load,"dat.Data","load",0x339eedf3,"dat.Data.load","cdb/Module.hx",488,0x02d48d44)
namespace dat{

void Data_obj::__construct() { }

Dynamic Data_obj::__CreateEmpty() { return new Data_obj; }

void *Data_obj::_hx_vtable = 0;

Dynamic Data_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Data_obj > _hx_result = new Data_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04959ff5;
}

void Data_obj::load(::String content){
            	HX_GC_STACKFRAME(&_hx_pos_ef66e8c3e21c0884_488_load)
HXLINE( 489)		 ::Dynamic root = ::cdb::Parser_obj::parse(content);
HXLINE( 490)		{
HXLINE( 471)			::dat::Data_obj::part =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("part",f3,e3,51,4a));
HXDLIN( 471)			::dat::Data_obj::head =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("head",20,29,0b,45));
HXDLIN( 471)			::dat::Data_obj::core =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("core",5f,bd,c4,41));
HXDLIN( 471)			::dat::Data_obj::carrierUnits =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("carrierUnits",57,d0,64,7e));
HXDLIN( 471)			::dat::Data_obj::legs =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("legs",e5,08,b0,47));
HXDLIN( 471)			::dat::Data_obj::thruster =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("thruster",05,dd,80,0e));
HXDLIN( 471)			::dat::Data_obj::equip =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("equip",b0,d6,82,72));
HXDLIN( 471)			::dat::Data_obj::catData =  ::cdb::IndexId_obj::__alloc( HX_CTX ,root,HX_("catData",60,b9,22,d5));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,load,(void))

 ::cdb::IndexId Data_obj::part;

 ::cdb::IndexId Data_obj::head;

 ::cdb::IndexId Data_obj::core;

 ::cdb::IndexId Data_obj::carrierUnits;

 ::cdb::IndexId Data_obj::legs;

 ::cdb::IndexId Data_obj::thruster;

 ::cdb::IndexId Data_obj::equip;

 ::cdb::IndexId Data_obj::catData;


Data_obj::Data_obj()
{
}

bool Data_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"part") ) { outValue = ( part ); return true; }
		if (HX_FIELD_EQ(inName,"head") ) { outValue = ( head ); return true; }
		if (HX_FIELD_EQ(inName,"core") ) { outValue = ( core ); return true; }
		if (HX_FIELD_EQ(inName,"legs") ) { outValue = ( legs ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"equip") ) { outValue = ( equip ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"catData") ) { outValue = ( catData ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"thruster") ) { outValue = ( thruster ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"carrierUnits") ) { outValue = ( carrierUnits ); return true; }
	}
	return false;
}

bool Data_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"part") ) { part=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		if (HX_FIELD_EQ(inName,"head") ) { head=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		if (HX_FIELD_EQ(inName,"core") ) { core=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		if (HX_FIELD_EQ(inName,"legs") ) { legs=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"equip") ) { equip=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"catData") ) { catData=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"thruster") ) { thruster=ioValue.Cast<  ::cdb::IndexId >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"carrierUnits") ) { carrierUnits=ioValue.Cast<  ::cdb::IndexId >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Data_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Data_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::part,HX_HCSTRING("part","\xf3","\xe3","\x51","\x4a")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::head,HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::core,HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::carrierUnits,HX_HCSTRING("carrierUnits","\x57","\xd0","\x64","\x7e")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::legs,HX_HCSTRING("legs","\xe5","\x08","\xb0","\x47")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::thruster,HX_HCSTRING("thruster","\x05","\xdd","\x80","\x0e")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::equip,HX_HCSTRING("equip","\xb0","\xd6","\x82","\x72")},
	{hx::fsObject /*::cdb::IndexId*/ ,(void *) &Data_obj::catData,HX_HCSTRING("catData","\x60","\xb9","\x22","\xd5")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Data_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Data_obj::part,"part");
	HX_MARK_MEMBER_NAME(Data_obj::head,"head");
	HX_MARK_MEMBER_NAME(Data_obj::core,"core");
	HX_MARK_MEMBER_NAME(Data_obj::carrierUnits,"carrierUnits");
	HX_MARK_MEMBER_NAME(Data_obj::legs,"legs");
	HX_MARK_MEMBER_NAME(Data_obj::thruster,"thruster");
	HX_MARK_MEMBER_NAME(Data_obj::equip,"equip");
	HX_MARK_MEMBER_NAME(Data_obj::catData,"catData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Data_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Data_obj::part,"part");
	HX_VISIT_MEMBER_NAME(Data_obj::head,"head");
	HX_VISIT_MEMBER_NAME(Data_obj::core,"core");
	HX_VISIT_MEMBER_NAME(Data_obj::carrierUnits,"carrierUnits");
	HX_VISIT_MEMBER_NAME(Data_obj::legs,"legs");
	HX_VISIT_MEMBER_NAME(Data_obj::thruster,"thruster");
	HX_VISIT_MEMBER_NAME(Data_obj::equip,"equip");
	HX_VISIT_MEMBER_NAME(Data_obj::catData,"catData");
};

#endif

hx::Class Data_obj::__mClass;

static ::String Data_obj_sStaticFields[] = {
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("part","\xf3","\xe3","\x51","\x4a"),
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("carrierUnits","\x57","\xd0","\x64","\x7e"),
	HX_HCSTRING("legs","\xe5","\x08","\xb0","\x47"),
	HX_HCSTRING("thruster","\x05","\xdd","\x80","\x0e"),
	HX_HCSTRING("equip","\xb0","\xd6","\x82","\x72"),
	HX_HCSTRING("catData","\x60","\xb9","\x22","\xd5"),
	::String(null())
};

void Data_obj::__register()
{
	hx::Object *dummy = new Data_obj;
	Data_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("dat.Data","\xc1","\x9f","\x67","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Data_obj::__GetStatic;
	__mClass->mSetStaticField = &Data_obj::__SetStatic;
	__mClass->mMarkFunc = Data_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Data_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Data_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Data_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Data_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dat
