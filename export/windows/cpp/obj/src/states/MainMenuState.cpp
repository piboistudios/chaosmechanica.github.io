// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dat_Data
#include <dat/Data.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebuggerLayout
#include <flixel/system/debug/FlxDebuggerLayout.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_BuildSchematicState
#include <states/BuildSchematicState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89e648ab22b7047a_11_new,"states.MainMenuState","new",0x55e2079f,"states.MainMenuState.new","states/MainMenuState.hx",11,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_15_create,"states.MainMenuState","create",0x17a2011d,"states.MainMenuState.create","states/MainMenuState.hx",15,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_35_setupDebugger,"states.MainMenuState","setupDebugger",0xd3e02fbd,"states.MainMenuState.setupDebugger","states/MainMenuState.hx",35,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_44_getEvent,"states.MainMenuState","getEvent",0x6ea1fc05,"states.MainMenuState.getEvent","states/MainMenuState.hx",44,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_13_boot,"states.MainMenuState","boot",0xc7fda413,"states.MainMenuState.boot","states/MainMenuState.hx",13,0x1c04e2b2)
namespace states{

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_11_new)
HXDLIN(  11)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			if (inClassId<=(int)0x16507e97) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x16507e97;
			} else {
				return inClassId==(int)0x2335d9a7;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		if (inClassId<=(int)0x55c33fb8) {
			return inClassId==(int)0x3634c52c || inClassId==(int)0x55c33fb8;
		} else {
			return inClassId==(int)0x743878ee;
		}
	}
}

void MainMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_89e648ab22b7047a_15_create)
HXLINE(  16)		this->_xml_id = HX_("main_menu",a5,ba,e0,81);
HXLINE(  17)		this->super::create();
HXLINE(  19)		if (!(::states::MainMenuState_obj::dataLoaded)) {
HXLINE(  21)			::String content = ::openfl::_legacy::Assets_obj::getText(HX_("source/dat/parts.cdb",e7,bb,7f,81));
HXLINE(  23)			::dat::Data_obj::load(content);
HXLINE(  24)			::Global_obj::player =  ::Player_obj::__alloc( HX_CTX );
HXLINE(  25)			::Global_obj::logStyle =  ::flixel::_hx_system::debug::log::LogStyle_obj::__alloc( HX_CTX ,HX_("[NOTICE]",4a,a2,c6,24),HX_("00FF40",bc,64,d7,02),null(),null(),null(),null(),null(),null(),null());
HXLINE(  27)			::states::MainMenuState_obj::dataLoaded = true;
HXLINE(  28)			this->setupDebugger();
            		}
            	}


void MainMenuState_obj::setupDebugger(){
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_35_setupDebugger)
HXLINE(  38)		::flixel::FlxG_obj::debugger->set_visible(true);
HXLINE(  39)		{
HXLINE(  39)			 ::flixel::_hx_system::frontEnds::DebuggerFrontEnd _this = ::flixel::FlxG_obj::debugger;
HXDLIN(  39)			{
HXLINE(  39)				 ::flixel::_hx_system::debug::FlxDebugger _this1 = ::flixel::FlxG_obj::game->debugger;
HXDLIN(  39)				_this1->_layout = ::flixel::_hx_system::debug::FlxDebuggerLayout_obj::MICRO_dyn();
HXDLIN(  39)				_this1->resetLayout();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,setupDebugger,(void))

void MainMenuState_obj::getEvent(::String id, ::Dynamic target, ::Dynamic data,::cpp::VirtualArray params){
            	HX_GC_STACKFRAME(&_hx_pos_89e648ab22b7047a_44_getEvent)
HXDLIN(  44)		if (hx::IsNotNull( params )) {
HXLINE(  46)			if ((id == HX_("click_button",49,90,30,6d))) {
HXLINE(  49)				::String _g = ::Std_obj::string(params->__get((int)0));
HXDLIN(  49)				if ((_g == HX_("build_schematic",3c,a8,9f,37))) {
HXLINE(  52)					 ::flixel::FlxState nextState =  ::states::BuildSchematicState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  52)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  52)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            		}
            	}


bool MainMenuState_obj::dataLoaded;


hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "states.MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

hx::Val MainMenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return hx::Val( getEvent_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setupDebugger") ) { return hx::Val( setupDebugger_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"dataLoaded") ) { outValue = ( dataLoaded ); return true; }
	}
	return false;
}

bool MainMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"dataLoaded") ) { dataLoaded=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MainMenuState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo MainMenuState_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &MainMenuState_obj::dataLoaded,HX_HCSTRING("dataLoaded","\xcf","\x0d","\x11","\x44")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("setupDebugger","\xbe","\xd3","\x0a","\x41"),
	HX_HCSTRING("getEvent","\xa4","\xd7","\x9b","\xd5"),
	::String(null()) };

static void MainMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::dataLoaded,"dataLoaded");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::dataLoaded,"dataLoaded");
};

#endif

hx::Class MainMenuState_obj::__mClass;

static ::String MainMenuState_obj_sStaticFields[] = {
	HX_HCSTRING("dataLoaded","\xcf","\x0d","\x11","\x44"),
	::String(null())
};

void MainMenuState_obj::__register()
{
	hx::Object *dummy = new MainMenuState_obj;
	MainMenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.MainMenuState","\x2d","\x4c","\x08","\x36");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MainMenuState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_13_boot)
HXDLIN(  13)		dataLoaded = false;
            	}
}

} // end namespace states
