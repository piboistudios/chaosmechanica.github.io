// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_cdb_Index
#include <cdb/Index.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_009f80726f88baa9_180_new,"cdb.Index","new",0x1c8100d7,"cdb.Index.new","cdb/Types.hx",180,0xc287d473)
namespace cdb{

void Index_obj::__construct( ::Dynamic data,::String name){
            	HX_STACKFRAME(&_hx_pos_009f80726f88baa9_180_new)
HXLINE( 181)		this->name = name;
HXLINE( 182)		{
HXLINE( 182)			int _g = (int)0;
HXDLIN( 182)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(data->__Field(HX_("sheets",f4,68,c6,1f),hx::paccDynamic)) );
HXDLIN( 182)			while((_g < _g1->length)){
HXLINE( 182)				 ::Dynamic s = _g1->__get(_g);
HXDLIN( 182)				_g = (_g + (int)1);
HXLINE( 183)				if ((( (::String)(s->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 184)					this->all = ( (::cpp::VirtualArray)(s->__Field(HX_("lines",ff,dd,01,75),hx::paccDynamic)) );
HXLINE( 185)					this->sheet = s;
HXLINE( 186)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 188)		if (hx::IsNull( this->sheet )) {
HXLINE( 189)			HX_STACK_DO_THROW(((HX_("'",27,00,00,00) + name) + HX_("' not found in CDB data",e0,27,ec,14)));
            		}
            	}

Dynamic Index_obj::__CreateEmpty() { return new Index_obj; }

void *Index_obj::_hx_vtable = 0;

Dynamic Index_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Index_obj > _hx_result = new Index_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Index_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x43feba79;
}


Index_obj::Index_obj()
{
}

void Index_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Index);
	HX_MARK_MEMBER_NAME(all,"all");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(sheet,"sheet");
	HX_MARK_END_CLASS();
}

void Index_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(all,"all");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(sheet,"sheet");
}

hx::Val Index_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { return hx::Val( all ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sheet") ) { return hx::Val( sheet ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Index_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { all=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sheet") ) { sheet=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Index_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("all","\x21","\xf9","\x49","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("sheet","\x9f","\xe2","\x1f","\x7c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Index_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Index_obj,all),HX_HCSTRING("all","\x21","\xf9","\x49","\x00")},
	{hx::fsString,(int)offsetof(Index_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Index_obj,sheet),HX_HCSTRING("sheet","\x9f","\xe2","\x1f","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Index_obj_sStaticStorageInfo = 0;
#endif

static ::String Index_obj_sMemberFields[] = {
	HX_HCSTRING("all","\x21","\xf9","\x49","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("sheet","\x9f","\xe2","\x1f","\x7c"),
	::String(null()) };

static void Index_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Index_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Index_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Index_obj::__mClass,"__mClass");
};

#endif

hx::Class Index_obj::__mClass;

void Index_obj::__register()
{
	hx::Object *dummy = new Index_obj;
	Index_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("cdb.Index","\x65","\x49","\xf4","\x8b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Index_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Index_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Index_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Index_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Index_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Index_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cdb
