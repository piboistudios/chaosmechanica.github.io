// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_cdb__Types_ArrayIterator
#include <cdb/_Types/ArrayIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_05c695d3bf96c4b6_6_new,"cdb._Types.ArrayIterator","new",0x7399ec92,"cdb._Types.ArrayIterator.new","cdb/Types.hx",6,0xc287d473)
HX_LOCAL_STACK_FRAME(_hx_pos_05c695d3bf96c4b6_11_hasNext,"cdb._Types.ArrayIterator","hasNext",0xa8d3c29f,"cdb._Types.ArrayIterator.hasNext","cdb/Types.hx",11,0xc287d473)
HX_LOCAL_STACK_FRAME(_hx_pos_05c695d3bf96c4b6_14_next,"cdb._Types.ArrayIterator","next",0xb3151481,"cdb._Types.ArrayIterator.next","cdb/Types.hx",14,0xc287d473)
namespace cdb{
namespace _Types{

void ArrayIterator_obj::__construct(::cpp::VirtualArray a){
            	HX_STACKFRAME(&_hx_pos_05c695d3bf96c4b6_6_new)
HXLINE(   7)		this->a = a;
HXLINE(   8)		this->pos = (int)0;
            	}

Dynamic ArrayIterator_obj::__CreateEmpty() { return new ArrayIterator_obj; }

void *ArrayIterator_obj::_hx_vtable = 0;

Dynamic ArrayIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayIterator_obj > _hx_result = new ArrayIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ArrayIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6556a22c;
}

bool ArrayIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_05c695d3bf96c4b6_11_hasNext)
HXDLIN(  11)		return (this->pos < this->a->get_length());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayIterator_obj,hasNext,return )

 ::Dynamic ArrayIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_05c695d3bf96c4b6_14_next)
HXDLIN(  14)		::cpp::VirtualArray _hx_tmp = this->a;
HXDLIN(  14)		return _hx_tmp->__get(this->pos++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayIterator_obj,next,return )


ArrayIterator_obj::ArrayIterator_obj()
{
}

void ArrayIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayIterator);
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_END_CLASS();
}

void ArrayIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(pos,"pos");
}

hx::Val ArrayIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(ArrayIterator_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ArrayIterator_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayIterator_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void ArrayIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayIterator_obj::__mClass;

void ArrayIterator_obj::__register()
{
	hx::Object *dummy = new ArrayIterator_obj;
	ArrayIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("cdb._Types.ArrayIterator","\xa0","\xfb","\xa7","\x41");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cdb
} // end namespace _Types
