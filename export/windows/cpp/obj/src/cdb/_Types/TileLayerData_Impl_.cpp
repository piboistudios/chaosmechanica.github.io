// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_cdb_Lz4Reader
#include <cdb/Lz4Reader.h>
#endif
#ifndef INCLUDED_cdb__Types_TileLayerData_Impl_
#include <cdb/_Types/TileLayerData_Impl_.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68e4ec2d59e03648_116__new,"cdb._Types.TileLayerData_Impl_","_new",0x5fbb1f29,"cdb._Types.TileLayerData_Impl_._new","cdb/Types.hx",116,0xc287d473)
HX_LOCAL_STACK_FRAME(_hx_pos_68e4ec2d59e03648_120_decode,"cdb._Types.TileLayerData_Impl_","decode",0xebf568f6,"cdb._Types.TileLayerData_Impl_.decode","cdb/Types.hx",120,0xc287d473)
HX_LOCAL_STACK_FRAME(_hx_pos_68e4ec2d59e03648_125_encode,"cdb._Types.TileLayerData_Impl_","encode",0x80ebfdde,"cdb._Types.TileLayerData_Impl_.encode","cdb/Types.hx",125,0xc287d473)
namespace cdb{
namespace _Types{

void TileLayerData_Impl__obj::__construct() { }

Dynamic TileLayerData_Impl__obj::__CreateEmpty() { return new TileLayerData_Impl__obj; }

void *TileLayerData_Impl__obj::_hx_vtable = 0;

Dynamic TileLayerData_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TileLayerData_Impl__obj > _hx_result = new TileLayerData_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TileLayerData_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e30c332;
}

::String TileLayerData_Impl__obj::_new(::String v){
            	HX_STACKFRAME(&_hx_pos_68e4ec2d59e03648_116__new)
HXDLIN( 116)		::String this1 = v;
HXDLIN( 116)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TileLayerData_Impl__obj,_new,return )

::Array< int > TileLayerData_Impl__obj::decode(::String this1){
            	HX_STACKFRAME(&_hx_pos_68e4ec2d59e03648_120_decode)
HXLINE( 121)		 ::haxe::io::Bytes k = ::cdb::Lz4Reader_obj::decodeString(this1);
HXLINE( 122)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 122)		{
HXLINE( 122)			int _g2 = (int)0;
HXDLIN( 122)			int _g1 = ((int)k->length >> (int)(int)1);
HXDLIN( 122)			while((_g2 < _g1)){
HXLINE( 122)				_g2 = (_g2 + (int)1);
HXDLIN( 122)				int i = (_g2 - (int)1);
HXDLIN( 122)				::Array< unsigned char > k1 = k->b;
HXDLIN( 122)				int k2 = k1->__get(((int)i << (int)(int)1));
HXDLIN( 122)				::Array< unsigned char > k3 = k->b;
HXDLIN( 122)				_g->push(((int)k2 | (int)((int)k3->__get((((int)i << (int)(int)1) + (int)1)) << (int)(int)8)));
            			}
            		}
HXDLIN( 122)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TileLayerData_Impl__obj,decode,return )

::String TileLayerData_Impl__obj::encode(::Array< int > a,bool compress){
            	HX_STACKFRAME(&_hx_pos_68e4ec2d59e03648_125_encode)
HXLINE( 126)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc((a->length * (int)2));
HXLINE( 127)		{
HXLINE( 127)			int _g1 = (int)0;
HXDLIN( 127)			int _g = a->length;
HXDLIN( 127)			while((_g1 < _g)){
HXLINE( 127)				_g1 = (_g1 + (int)1);
HXDLIN( 127)				int i = (_g1 - (int)1);
HXLINE( 128)				int v = a->__get(i);
HXLINE( 129)				::Array< unsigned char > b1 = b->b;
HXDLIN( 129)				b1[((int)i << (int)(int)1)] = ((int)v & (int)(int)255);
HXLINE( 130)				::Array< unsigned char > b2 = b->b;
HXDLIN( 130)				b2[(((int)i << (int)(int)1) + (int)1)] = ((int)((int)v >> (int)(int)8) & (int)(int)255);
            			}
            		}
HXLINE( 132)		return ::cdb::_Types::TileLayerData_Impl__obj::_new(::cdb::Lz4Reader_obj::encodeBytes(b,compress));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TileLayerData_Impl__obj,encode,return )


TileLayerData_Impl__obj::TileLayerData_Impl__obj()
{
}

bool TileLayerData_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { outValue = decode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"encode") ) { outValue = encode_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TileLayerData_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TileLayerData_Impl__obj_sStaticStorageInfo = 0;
#endif

static void TileLayerData_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TileLayerData_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TileLayerData_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TileLayerData_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class TileLayerData_Impl__obj::__mClass;

static ::String TileLayerData_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	::String(null())
};

void TileLayerData_Impl__obj::__register()
{
	hx::Object *dummy = new TileLayerData_Impl__obj;
	TileLayerData_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("cdb._Types.TileLayerData_Impl_","\xa6","\xab","\x44","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TileLayerData_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TileLayerData_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TileLayerData_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TileLayerData_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TileLayerData_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TileLayerData_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TileLayerData_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cdb
} // end namespace _Types
