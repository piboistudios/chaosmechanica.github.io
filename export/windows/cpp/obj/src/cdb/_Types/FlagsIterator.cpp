// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_cdb__Types_FlagsIterator
#include <cdb/_Types/FlagsIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5ad6762bacca3409_21_new,"cdb._Types.FlagsIterator","new",0x60137740,"cdb._Types.FlagsIterator.new","cdb/Types.hx",21,0xc287d473)
HX_LOCAL_STACK_FRAME(_hx_pos_5ad6762bacca3409_26_hasNext,"cdb._Types.FlagsIterator","hasNext",0x41933c4d,"cdb._Types.FlagsIterator.hasNext","cdb/Types.hx",26,0xc287d473)
HX_LOCAL_STACK_FRAME(_hx_pos_5ad6762bacca3409_28_next,"cdb._Types.FlagsIterator","next",0xb0f4e213,"cdb._Types.FlagsIterator.next","cdb/Types.hx",28,0xc287d473)
namespace cdb{
namespace _Types{

void FlagsIterator_obj::__construct(int flags){
            	HX_STACKFRAME(&_hx_pos_5ad6762bacca3409_21_new)
HXLINE(  22)		this->flags = flags;
HXLINE(  23)		this->k = (int)0;
            	}

Dynamic FlagsIterator_obj::__CreateEmpty() { return new FlagsIterator_obj; }

void *FlagsIterator_obj::_hx_vtable = 0;

Dynamic FlagsIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlagsIterator_obj > _hx_result = new FlagsIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlagsIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38edbdda;
}

bool FlagsIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_5ad6762bacca3409_26_hasNext)
HXDLIN(  26)		int _hx_tmp = this->flags;
HXDLIN(  26)		return (_hx_tmp >= ((int)(int)1 << (int)this->k));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlagsIterator_obj,hasNext,return )

 ::Dynamic FlagsIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_5ad6762bacca3409_28_next)
HXLINE(  29)		while(true){
HXLINE(  29)			int _hx_tmp = this->flags;
HXDLIN(  29)			if (!((((int)_hx_tmp & (int)((int)(int)1 << (int)this->k)) == (int)0))) {
HXLINE(  29)				goto _hx_goto_2;
            			}
HXLINE(  30)			this->k++;
            		}
            		_hx_goto_2:;
HXLINE(  31)		return this->k++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlagsIterator_obj,next,return )


FlagsIterator_obj::FlagsIterator_obj()
{
}

hx::Val FlagsIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"k") ) { return hx::Val( k ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flags") ) { return hx::Val( flags ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlagsIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"k") ) { k=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flags") ) { flags=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlagsIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("flags","\x47","\x2b","\x8c","\x02"));
	outFields->push(HX_HCSTRING("k","\x6b","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlagsIterator_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlagsIterator_obj,flags),HX_HCSTRING("flags","\x47","\x2b","\x8c","\x02")},
	{hx::fsInt,(int)offsetof(FlagsIterator_obj,k),HX_HCSTRING("k","\x6b","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlagsIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String FlagsIterator_obj_sMemberFields[] = {
	HX_HCSTRING("flags","\x47","\x2b","\x8c","\x02"),
	HX_HCSTRING("k","\x6b","\x00","\x00","\x00"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void FlagsIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlagsIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlagsIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlagsIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class FlagsIterator_obj::__mClass;

void FlagsIterator_obj::__register()
{
	hx::Object *dummy = new FlagsIterator_obj;
	FlagsIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("cdb._Types.FlagsIterator","\x4e","\x17","\x3f","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlagsIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlagsIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlagsIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlagsIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlagsIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlagsIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cdb
} // end namespace _Types
