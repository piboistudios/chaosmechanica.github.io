// Generated by Haxe 3.4.4
#ifndef INCLUDED_cdb_Lz4Reader
#define INCLUDED_cdb_Lz4Reader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(cdb,Lz4Reader)
HX_DECLARE_CLASS2(haxe,io,Bytes)

namespace cdb{


class HXCPP_CLASS_ATTRIBUTES Lz4Reader_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Lz4Reader_obj OBJ_;
		Lz4Reader_obj();

	public:
		enum { _hx_ClassId = 0x2e45df4c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="cdb.Lz4Reader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"cdb.Lz4Reader"); }
		static hx::ObjectPtr< Lz4Reader_obj > __new();
		static hx::ObjectPtr< Lz4Reader_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Lz4Reader_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Lz4Reader","\xa9","\xc7","\x37","\x85"); }

		static ::Array< int > uncompress( ::haxe::io::Bytes src,int srcPos,int srcLen, ::haxe::io::Bytes out,int outPos);
		static ::Dynamic uncompress_dyn();

		static  ::haxe::io::Bytes decodeString(::String s);
		static ::Dynamic decodeString_dyn();

		static ::String encodeBytes( ::haxe::io::Bytes b,bool compress);
		static ::Dynamic encodeBytes_dyn();

		 ::haxe::io::Bytes bytes;
		int pos;
		int b();
		::Dynamic b_dyn();

		 ::haxe::io::Bytes grow( ::haxe::io::Bytes out,int pos,int len);
		::Dynamic grow_dyn();

		 ::haxe::io::Bytes read( ::haxe::io::Bytes bytes);
		::Dynamic read_dyn();

};

} // end namespace cdb

#endif /* INCLUDED_cdb_Lz4Reader */ 
