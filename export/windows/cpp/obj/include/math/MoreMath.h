// Generated by Haxe 3.4.4
#ifndef INCLUDED_math_MoreMath
#define INCLUDED_math_MoreMath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(math,MoreMath)

namespace math{


class HXCPP_CLASS_ATTRIBUTES MoreMath_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MoreMath_obj OBJ_;
		MoreMath_obj();

	public:
		enum { _hx_ClassId = 0x30029e09 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="math.MoreMath")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"math.MoreMath"); }

		hx::ObjectPtr< MoreMath_obj > __new() {
			hx::ObjectPtr< MoreMath_obj > __this = new MoreMath_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MoreMath_obj > __alloc(hx::Ctx *_hx_ctx) {
			MoreMath_obj *__this = (MoreMath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MoreMath_obj), false, "math.MoreMath"));
			*(void **)__this = MoreMath_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MoreMath_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MoreMath","\x1d","\xf8","\x51","\x2b"); }

		static Float degToRad(Float v);
		static ::Dynamic degToRad_dyn();

		static Float lerpAngle(Float v1,Float v2,Float r);
		static ::Dynamic lerpAngle_dyn();

		static Float wrapAngle(Float v);
		static ::Dynamic wrapAngle_dyn();

		static  ::flixel::math::FlxPoint clampMagnitude( ::flixel::math::FlxPoint v,Float limit);
		static ::Dynamic clampMagnitude_dyn();

		static Float magnitudeSquared( ::flixel::math::FlxPoint v);
		static ::Dynamic magnitudeSquared_dyn();

		static Float magnitude( ::flixel::math::FlxPoint v);
		static ::Dynamic magnitude_dyn();

};

} // end namespace math

#endif /* INCLUDED_math_MoreMath */ 
