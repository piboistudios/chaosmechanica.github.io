// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_mechanica_Part
#define INCLUDED_util_mechanica_Part

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
#ifndef INCLUDED_util_mechanica_IPart
#include <util/mechanica/IPart.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxNestedSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(util,mechanica,IPart)
HX_DECLARE_CLASS2(util,mechanica,Mechanica)
HX_DECLARE_CLASS2(util,mechanica,Part)

namespace util{
namespace mechanica{


class HXCPP_CLASS_ATTRIBUTES Part_obj : public  ::flixel::addons::display::FlxNestedSprite_obj
{
	public:
		typedef  ::flixel::addons::display::FlxNestedSprite_obj super;
		typedef Part_obj OBJ_;
		Part_obj();

	public:
		enum { _hx_ClassId = 0x4ae160ee };

		void __construct( ::Dynamic X, ::Dynamic Y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.mechanica.Part")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"util.mechanica.Part"); }
		static hx::ObjectPtr< Part_obj > __new( ::Dynamic X, ::Dynamic Y);
		static hx::ObjectPtr< Part_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Part_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Part","\x13","\x10","\x2b","\x35"); }

		 ::util::mechanica::Mechanica parent;
		Float weight;
		::String desc;
		Float temp;
		::String type;
		Float tempCutoff;
		::String number;
		::String make;
		int MSRP;
		::String imageFile;
		Float armorRating;
		Float enUsage;
		bool functional;
		void fabricateInfo(::String _number,::String _desc);
		::Dynamic fabricateInfo_dyn();

};

} // end namespace util
} // end namespace mechanica

#endif /* INCLUDED_util_mechanica_Part */ 
