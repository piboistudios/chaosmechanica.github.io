// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_mechanica_ArmUnits
#define INCLUDED_util_mechanica_ArmUnits

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_util_mechanica_CarrierUnit
#include <util/mechanica/CarrierUnit.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxNestedSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(util,mechanica,ArmUnits)
HX_DECLARE_CLASS2(util,mechanica,CarrierUnit)
HX_DECLARE_CLASS2(util,mechanica,IPart)
HX_DECLARE_CLASS2(util,mechanica,Part)

namespace util{
namespace mechanica{


class HXCPP_CLASS_ATTRIBUTES ArmUnits_obj : public  ::util::mechanica::CarrierUnit_obj
{
	public:
		typedef  ::util::mechanica::CarrierUnit_obj super;
		typedef ArmUnits_obj OBJ_;
		ArmUnits_obj();

	public:
		enum { _hx_ClassId = 0x293863ee };

		void __construct( ::Dynamic X, ::Dynamic Y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.mechanica.ArmUnits")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"util.mechanica.ArmUnits"); }
		static hx::ObjectPtr< ArmUnits_obj > __new( ::Dynamic X, ::Dynamic Y);
		static hx::ObjectPtr< ArmUnits_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ArmUnits_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ArmUnits","\x93","\x09","\x59","\xd9"); }

};

} // end namespace util
} // end namespace mechanica

#endif /* INCLUDED_util_mechanica_ArmUnits */ 
