// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_mechanica_EquipType
#define INCLUDED_util_mechanica_EquipType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(util,mechanica,EquipType)
namespace util{
namespace mechanica{


class EquipType_obj : public hx::EnumBase_obj
{
	typedef hx::EnumBase_obj super;
		typedef EquipType_obj OBJ_;

	public:
		EquipType_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_HCSTRING("util.mechanica.EquipType","\xad","\xd6","\x85","\x75"); }
		::String __ToString() const { return HX_HCSTRING("EquipType.","\x84","\xcf","\xee","\x98") + _hx_tag; }

		static ::util::mechanica::EquipType Arms;
		static inline ::util::mechanica::EquipType Arms_dyn() { return Arms; }
		static ::util::mechanica::EquipType Core;
		static inline ::util::mechanica::EquipType Core_dyn() { return Core; }
		static ::util::mechanica::EquipType Equipment1;
		static inline ::util::mechanica::EquipType Equipment1_dyn() { return Equipment1; }
		static ::util::mechanica::EquipType Equipment2;
		static inline ::util::mechanica::EquipType Equipment2_dyn() { return Equipment2; }
		static ::util::mechanica::EquipType Head;
		static inline ::util::mechanica::EquipType Head_dyn() { return Head; }
		static ::util::mechanica::EquipType Legs;
		static inline ::util::mechanica::EquipType Legs_dyn() { return Legs; }
		static ::util::mechanica::EquipType Thruster;
		static inline ::util::mechanica::EquipType Thruster_dyn() { return Thruster; }
};

} // end namespace util
} // end namespace mechanica

#endif /* INCLUDED_util_mechanica_EquipType */ 
