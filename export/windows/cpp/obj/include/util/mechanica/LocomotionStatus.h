// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_mechanica_LocomotionStatus
#define INCLUDED_util_mechanica_LocomotionStatus

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(util,mechanica,LocomotionStatus)
namespace util{
namespace mechanica{


class LocomotionStatus_obj : public hx::EnumBase_obj
{
	typedef hx::EnumBase_obj super;
		typedef LocomotionStatus_obj OBJ_;

	public:
		LocomotionStatus_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_HCSTRING("util.mechanica.LocomotionStatus","\xb4","\xa5","\x2f","\x23"); }
		::String __ToString() const { return HX_HCSTRING("LocomotionStatus.","\xb7","\xf3","\x1c","\xcb") + _hx_tag; }

		static ::util::mechanica::LocomotionStatus Accelerating;
		static inline ::util::mechanica::LocomotionStatus Accelerating_dyn() { return Accelerating; }
		static ::util::mechanica::LocomotionStatus Braking;
		static inline ::util::mechanica::LocomotionStatus Braking_dyn() { return Braking; }
		static ::util::mechanica::LocomotionStatus Standing;
		static inline ::util::mechanica::LocomotionStatus Standing_dyn() { return Standing; }
		static ::util::mechanica::LocomotionStatus ThrusterEngaged;
		static inline ::util::mechanica::LocomotionStatus ThrusterEngaged_dyn() { return ThrusterEngaged; }
		static ::util::mechanica::LocomotionStatus Walking;
		static inline ::util::mechanica::LocomotionStatus Walking_dyn() { return Walking; }
};

} // end namespace util
} // end namespace mechanica

#endif /* INCLUDED_util_mechanica_LocomotionStatus */ 
