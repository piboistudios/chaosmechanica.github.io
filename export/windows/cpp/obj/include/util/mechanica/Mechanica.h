// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_mechanica_Mechanica
#define INCLUDED_util_mechanica_Mechanica

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#include <flixel/addons/display/FlxNestedSprite.h>
#endif
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxNestedSprite)
HX_DECLARE_CLASS3(flixel,addons,weapon,FlxBullet)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(util,control,Controller)
HX_DECLARE_CLASS2(util,interfaces,ICollider)
HX_DECLARE_CLASS2(util,mechanica,ArmUnits)
HX_DECLARE_CLASS2(util,mechanica,CarrierUnit)
HX_DECLARE_CLASS2(util,mechanica,CoreUnit)
HX_DECLARE_CLASS2(util,mechanica,EquipType)
HX_DECLARE_CLASS2(util,mechanica,EquipmentUnit)
HX_DECLARE_CLASS2(util,mechanica,FirearmUnit)
HX_DECLARE_CLASS2(util,mechanica,HeadUnit)
HX_DECLARE_CLASS2(util,mechanica,IPart)
HX_DECLARE_CLASS2(util,mechanica,LegUnits)
HX_DECLARE_CLASS2(util,mechanica,LocomotionStatus)
HX_DECLARE_CLASS2(util,mechanica,MechBullet)
HX_DECLARE_CLASS2(util,mechanica,MechGroup)
HX_DECLARE_CLASS2(util,mechanica,Mechanica)
HX_DECLARE_CLASS2(util,mechanica,Part)
HX_DECLARE_CLASS2(util,mechanica,ThrusterUnit)

namespace util{
namespace mechanica{


class HXCPP_CLASS_ATTRIBUTES Mechanica_obj : public  ::flixel::addons::display::FlxNestedSprite_obj
{
	public:
		typedef  ::flixel::addons::display::FlxNestedSprite_obj super;
		typedef Mechanica_obj OBJ_;
		Mechanica_obj();

	public:
		enum { _hx_ClassId = 0x63e18482 };

		void __construct( ::Dynamic X, ::Dynamic Y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.mechanica.Mechanica")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"util.mechanica.Mechanica"); }
		static hx::ObjectPtr< Mechanica_obj > __new( ::Dynamic X, ::Dynamic Y);
		static hx::ObjectPtr< Mechanica_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mechanica_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Mechanica","\x3d","\xcf","\x51","\xd0"); }

		static ::String makeToString(int make);
		static ::Dynamic makeToString_dyn();

		::String name;
		 ::util::mechanica::HeadUnit head;
		 ::util::mechanica::CoreUnit core;
		 ::util::mechanica::ArmUnits arms;
		 ::util::mechanica::LegUnits legs;
		 ::util::mechanica::ThrusterUnit thruster;
		 ::util::control::Controller controller;
		 ::util::mechanica::FirearmUnit equip1;
		 ::util::mechanica::MechGroup team;
		 ::util::mechanica::FirearmUnit equip2;
		bool enabled;
		Float speed;
		 ::util::mechanica::LocomotionStatus locomotionStatus;
		bool animatedThisFrame;
		 ::flixel::addons::display::FlxNestedSprite add( ::flixel::addons::display::FlxNestedSprite v);

		Float getWeight();
		::Dynamic getWeight_dyn();

		Float getLoad();
		::Dynamic getLoad_dyn();

		bool valid();
		::Dynamic valid_dyn();

		bool bump( ::Dynamic col1, ::Dynamic col2);
		::Dynamic bump_dyn();

		void struckBy( ::util::mechanica::MechBullet bullet);
		::Dynamic struckBy_dyn();

		void postCollision();
		::Dynamic postCollision_dyn();

		void runInput( ::Xml paramsXml);
		::Dynamic runInput_dyn();

		void update(Float e);

		void processInput();
		::Dynamic processInput_dyn();

		void concludeInput();
		::Dynamic concludeInput_dyn();

		bool buildFromParts(::String _head,::String _core,::String _arms,::String _legs,::String _thruster,::String _equip1,::String _equip2);
		::Dynamic buildFromParts_dyn();

		void rearrangeChildren();
		::Dynamic rearrangeChildren_dyn();

		bool buildPart( ::util::mechanica::EquipType etype,::String part);
		::Dynamic buildPart_dyn();

		void enable();
		::Dynamic enable_dyn();

		void disable();
		::Dynamic disable_dyn();

		bool isEnabled();
		::Dynamic isEnabled_dyn();

		bool equip( ::util::mechanica::EquipType etype, ::Dynamic part);
		::Dynamic equip_dyn();

};

} // end namespace util
} // end namespace mechanica

#endif /* INCLUDED_util_mechanica_Mechanica */ 
