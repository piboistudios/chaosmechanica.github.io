// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_mechanica_MechGroup
#define INCLUDED_util_mechanica_MechGroup

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(util,mechanica,MechGroup)

namespace util{
namespace mechanica{


class HXCPP_CLASS_ATTRIBUTES MechGroup_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef MechGroup_obj OBJ_;
		MechGroup_obj();

	public:
		enum { _hx_ClassId = 0x6e1fe727 };

		void __construct( ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.mechanica.MechGroup")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"util.mechanica.MechGroup"); }
		static hx::ObjectPtr< MechGroup_obj > __new( ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize);
		static hx::ObjectPtr< MechGroup_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MechGroup_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MechGroup","\xe2","\x31","\x90","\xda"); }

		::String name;
		 ::Dynamic add( ::Dynamic _tmp_v);

};

} // end namespace util
} // end namespace mechanica

#endif /* INCLUDED_util_mechanica_MechGroup */ 
