// Generated by Haxe 3.4.4
#ifndef INCLUDED_util_PartFactory
#define INCLUDED_util_PartFactory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxNestedSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(util,PartFactory)
HX_DECLARE_CLASS2(util,mechanica,IPart)
HX_DECLARE_CLASS2(util,mechanica,Part)

namespace util{


class HXCPP_CLASS_ATTRIBUTES PartFactory_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PartFactory_obj OBJ_;
		PartFactory_obj();

	public:
		enum { _hx_ClassId = 0x7bcf40f5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="util.PartFactory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"util.PartFactory"); }

		hx::ObjectPtr< PartFactory_obj > __new() {
			hx::ObjectPtr< PartFactory_obj > __this = new PartFactory_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< PartFactory_obj > __alloc(hx::Ctx *_hx_ctx) {
			PartFactory_obj *__this = (PartFactory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PartFactory_obj), false, "util.PartFactory"));
			*(void **)__this = PartFactory_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PartFactory_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PartFactory","\xf7","\xac","\x3e","\x71"); }

		static bool partExists(::String part);
		static ::Dynamic partExists_dyn();

		static  ::util::mechanica::Part buildPart(::String part);
		static ::Dynamic buildPart_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_PartFactory */ 
