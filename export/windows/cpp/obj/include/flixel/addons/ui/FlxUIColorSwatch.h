// Generated by Haxe 3.4.4
#ifndef INCLUDED_flixel_addons_ui_FlxUIColorSwatch
#define INCLUDED_flixel_addons_ui_FlxUIColorSwatch

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIButton)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIColorSwatch)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUITypedButton)
HX_DECLARE_CLASS3(flixel,addons,ui,SwatchData)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ICursorPointable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIButton)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIClickable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIWidget)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IHasParams)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ILabeled)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IResizable)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace addons{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES FlxUIColorSwatch_obj : public  ::flixel::addons::ui::FlxUIButton_obj
{
	public:
		typedef  ::flixel::addons::ui::FlxUIButton_obj super;
		typedef FlxUIColorSwatch_obj OBJ_;
		FlxUIColorSwatch_obj();

	public:
		enum { _hx_ClassId = 0x5b3a2d5c };

		void __construct(Float X,Float Y, ::Dynamic __o_Color, ::flixel::addons::ui::SwatchData Colors, ::Dynamic Asset, ::Dynamic Callback,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.ui.FlxUIColorSwatch")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.ui.FlxUIColorSwatch"); }
		static hx::ObjectPtr< FlxUIColorSwatch_obj > __new(Float X,Float Y, ::Dynamic __o_Color, ::flixel::addons::ui::SwatchData Colors, ::Dynamic Asset, ::Dynamic Callback,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height);
		static hx::ObjectPtr< FlxUIColorSwatch_obj > __alloc(hx::Ctx *_hx_ctx,Float X,Float Y, ::Dynamic __o_Color, ::flixel::addons::ui::SwatchData Colors, ::Dynamic Asset, ::Dynamic Callback,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxUIColorSwatch_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxUIColorSwatch","\x39","\x65","\x9c","\xd9"); }

		static void __boot();
		static ::String CLICK_EVENT;
		bool multiColored;
		int hilight;
		int midtone;
		int shadowMid;
		int shadowDark;
		 ::flixel::addons::ui::SwatchData colors;
		 ::Dynamic callback;
		Dynamic callback_dyn() { return callback;}
		int set_color(int _tmp_Color);

		void destroy();

		void setColorAtIndex(int Color,int index);
		::Dynamic setColorAtIndex_dyn();

		 ::flixel::addons::ui::SwatchData set_colors( ::flixel::addons::ui::SwatchData Colors);
		::Dynamic set_colors_dyn();

		bool set_multiColored(bool b);
		::Dynamic set_multiColored_dyn();

		int set_hilight(int i);
		::Dynamic set_hilight_dyn();

		int set_midtone(int i);
		::Dynamic set_midtone_dyn();

		int set_shadowMid(int i);
		::Dynamic set_shadowMid_dyn();

		int set_shadowDark(int i);
		::Dynamic set_shadowDark_dyn();

		bool equalsSwatch( ::flixel::addons::ui::SwatchData swatch);
		::Dynamic equalsSwatch_dyn();

		int getRawDifferenceSwatch( ::flixel::addons::ui::SwatchData swatch);
		::Dynamic getRawDifferenceSwatch_dyn();

		void refreshColor();
		::Dynamic refreshColor_dyn();

		::String _origKey;
		bool _skipRefresh;
		void onClick();
		::Dynamic onClick_dyn();

		::String colorKey();
		::Dynamic colorKey_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace ui

#endif /* INCLUDED_flixel_addons_ui_FlxUIColorSwatch */ 
