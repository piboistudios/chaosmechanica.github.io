// Generated by Haxe 3.4.4
#ifndef INCLUDED_flixel_addons_ui_SwatchData
#define INCLUDED_flixel_addons_ui_SwatchData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS3(flixel,addons,ui,SwatchData)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace addons{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES SwatchData_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SwatchData_obj OBJ_;
		SwatchData_obj();

	public:
		enum { _hx_ClassId = 0x270242d9 };

		void __construct(::String Name,::Array< int > Colors);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.ui.SwatchData")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.ui.SwatchData"); }
		static hx::ObjectPtr< SwatchData_obj > __new(::String Name,::Array< int > Colors);
		static hx::ObjectPtr< SwatchData_obj > __alloc(hx::Ctx *_hx_ctx,::String Name,::Array< int > Colors);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SwatchData_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("SwatchData","\x66","\x49","\x71","\x8e"); }

		::String name;
		::Array< int > colors;
		int setColor(int i,int Value);
		::Dynamic setColor_dyn();

		int getColor(int i);
		::Dynamic getColor_dyn();

		int get_hilight();
		::Dynamic get_hilight_dyn();

		int set_hilight(int Value);
		::Dynamic set_hilight_dyn();

		int get_midtone();
		::Dynamic get_midtone_dyn();

		int set_midtone(int Value);
		::Dynamic set_midtone_dyn();

		int get_shadowMid();
		::Dynamic get_shadowMid_dyn();

		int set_shadowMid(int Value);
		::Dynamic set_shadowMid_dyn();

		int get_shadowDark();
		::Dynamic get_shadowDark_dyn();

		int set_shadowDark(int Value);
		::Dynamic set_shadowDark_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		 ::flixel::addons::ui::SwatchData copy();
		::Dynamic copy_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		int getRawDifference( ::flixel::addons::ui::SwatchData other,::Array< int > otherColors, ::Dynamic IgnoreInvisible);
		::Dynamic getRawDifference_dyn();

		bool doColorsEqual( ::flixel::addons::ui::SwatchData other,::Array< int > otherColors);
		::Dynamic doColorsEqual_dyn();

		int getRGBdelta(int a,int b);
		::Dynamic getRGBdelta_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace ui

#endif /* INCLUDED_flixel_addons_ui_SwatchData */ 
