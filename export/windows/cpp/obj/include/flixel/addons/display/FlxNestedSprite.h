// Generated by Haxe 3.4.4
#ifndef INCLUDED_flixel_addons_display_FlxNestedSprite
#define INCLUDED_flixel_addons_display_FlxNestedSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxNestedSprite)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace addons{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FlxNestedSprite_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxNestedSprite_obj OBJ_;
		FlxNestedSprite_obj();

	public:
		enum { _hx_ClassId = 0x6706dc1b };

		void __construct( ::Dynamic X, ::Dynamic Y, ::Dynamic SimpleGraphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.display.FlxNestedSprite")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.display.FlxNestedSprite"); }
		static hx::ObjectPtr< FlxNestedSprite_obj > __new( ::Dynamic X, ::Dynamic Y, ::Dynamic SimpleGraphic);
		static hx::ObjectPtr< FlxNestedSprite_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic SimpleGraphic);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxNestedSprite_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxNestedSprite","\xce","\x8d","\x86","\x2e"); }

		Float relativeX;
		Float relativeY;
		Float relativeAngle;
		Float relativeAngularVelocity;
		Float relativeAngularAcceleration;
		Float relativeAlpha;
		 ::flixel::math::FlxPoint relativeScale;
		 ::flixel::math::FlxPoint relativeVelocity;
		 ::flixel::math::FlxPoint relativeAcceleration;
		::Array< ::Dynamic> children;
		Float _parentRed;
		Float _parentGreen;
		Float _parentBlue;
		void destroy();

		virtual  ::flixel::addons::display::FlxNestedSprite add( ::flixel::addons::display::FlxNestedSprite Child);
		::Dynamic add_dyn();

		 ::flixel::addons::display::FlxNestedSprite remove( ::flixel::addons::display::FlxNestedSprite Child);
		::Dynamic remove_dyn();

		 ::flixel::addons::display::FlxNestedSprite removeAt(hx::Null< int >  Index);
		::Dynamic removeAt_dyn();

		void removeAll();
		::Dynamic removeAll_dyn();

		void preUpdate(Float elapsed);
		::Dynamic preUpdate_dyn();

		virtual void update(Float elapsed);

		void postUpdate(Float elapsed);
		::Dynamic postUpdate_dyn();

		void draw();

		void drawDebug();

		Float set_alpha(Float Alpha);

		int set_color(int Color);

		int set_facing(int Direction);

		int get_count();
		::Dynamic get_count_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace display

#endif /* INCLUDED_flixel_addons_display_FlxNestedSprite */ 
