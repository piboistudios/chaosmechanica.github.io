// Generated by Haxe 3.4.4
#ifndef INCLUDED_dat__Data_PartKind_Impl_
#define INCLUDED_dat__Data_PartKind_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(dat,_Data,PartKind_Impl_)

namespace dat{
namespace _Data{


class HXCPP_CLASS_ATTRIBUTES PartKind_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PartKind_Impl__obj OBJ_;
		PartKind_Impl__obj();

	public:
		enum { _hx_ClassId = 0x0ecd8661 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="dat._Data.PartKind_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"dat._Data.PartKind_Impl_"); }

		hx::ObjectPtr< PartKind_Impl__obj > __new() {
			hx::ObjectPtr< PartKind_Impl__obj > __this = new PartKind_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< PartKind_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			PartKind_Impl__obj *__this = (PartKind_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PartKind_Impl__obj), false, "dat._Data.PartKind_Impl_"));
			*(void **)__this = PartKind_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PartKind_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PartKind_Impl_","\xe7","\xde","\x8e","\xe9"); }

		static void __boot();
		static ::String standardBrainCase;
		static ::String standardLocomote;
		static ::String standardKernel;
		static ::String standardCarrier;
		static ::String standardThruster;
		static ::String standardPistol;
		static ::String standardRifle;
		static ::String toString(::String this1);
		static ::Dynamic toString_dyn();

};

} // end namespace dat
} // end namespace _Data

#endif /* INCLUDED_dat__Data_PartKind_Impl_ */ 
