// Generated by Haxe 3.4.4
#ifndef INCLUDED_dat__Data_Part_make_Impl_
#define INCLUDED_dat__Data_Part_make_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(dat,_Data,Part_make_Impl_)

namespace dat{
namespace _Data{


class HXCPP_CLASS_ATTRIBUTES Part_make_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Part_make_Impl__obj OBJ_;
		Part_make_Impl__obj();

	public:
		enum { _hx_ClassId = 0x6af09624 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="dat._Data.Part_make_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"dat._Data.Part_make_Impl_"); }

		hx::ObjectPtr< Part_make_Impl__obj > __new() {
			hx::ObjectPtr< Part_make_Impl__obj > __this = new Part_make_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Part_make_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			Part_make_Impl__obj *__this = (Part_make_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Part_make_Impl__obj), false, "dat._Data.Part_make_Impl_"));
			*(void **)__this = Part_make_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Part_make_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Part_make_Impl_","\xfa","\x7c","\x12","\x69"); }

		static void __boot();
		static int HYSPD;
		static int COUNT;
		static ::Array< ::String > NAMES;
		static int ofInt(int v);
		static ::Dynamic ofInt_dyn();

		static int toInt(int this1);
		static ::Dynamic toInt_dyn();

};

} // end namespace dat
} // end namespace _Data

#endif /* INCLUDED_dat__Data_Part_make_Impl_ */ 
