// Generated by Haxe 3.4.4
#ifndef INCLUDED_dat_Data
#define INCLUDED_dat_Data

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(cdb,Index)
HX_DECLARE_CLASS1(cdb,IndexId)
HX_DECLARE_CLASS1(dat,Data)

namespace dat{


class HXCPP_CLASS_ATTRIBUTES Data_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Data_obj OBJ_;
		Data_obj();

	public:
		enum { _hx_ClassId = 0x04959ff5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="dat.Data")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"dat.Data"); }

		hx::ObjectPtr< Data_obj > __new() {
			hx::ObjectPtr< Data_obj > __this = new Data_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Data_obj > __alloc(hx::Ctx *_hx_ctx) {
			Data_obj *__this = (Data_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Data_obj), false, "dat.Data"));
			*(void **)__this = Data_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Data_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Data","\x4a","\x82","\x3c","\x2d"); }

		static void load(::String content);
		static ::Dynamic load_dyn();

		static  ::cdb::IndexId part;
		static  ::cdb::IndexId head;
		static  ::cdb::IndexId core;
		static  ::cdb::IndexId carrierUnits;
		static  ::cdb::IndexId legs;
		static  ::cdb::IndexId thruster;
		static  ::cdb::IndexId equip;
		static  ::cdb::IndexId catData;
};

} // end namespace dat

#endif /* INCLUDED_dat_Data */ 
